
oladyi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006158  08006158  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006160  08006160  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000678  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006e8  200006e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f7b  00000000  00000000  0002eb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  00030b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c3d  00000000  00000000  00031f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ddaf  00000000  00000000  00052bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c596f  00000000  00000000  00060984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001262f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003060  00000000  00000000  00126348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060a4 	.word	0x080060a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080060a4 	.word	0x080060a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MovingAverage>:
volatile int64_t tmp64[3];
//--------------------------------------------

//--------------------------------------------
void MovingAverage(int16_t* dt)
{
 8000db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000db8:	b088      	sub	sp, #32
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	61f8      	str	r0, [r7, #28]
	if(avg_cnt<8)
 8000dbe:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <MovingAverage+0x1dc>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	2b07      	cmp	r3, #7
 8000dc6:	f300 80ed 	bgt.w	8000fa4 <MovingAverage+0x1f0>
	{
		xbuf_avg[avg_cnt]=dt[0];
 8000dca:	4b71      	ldr	r3, [pc, #452]	; (8000f90 <MovingAverage+0x1dc>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000dd8:	4b6e      	ldr	r3, [pc, #440]	; (8000f94 <MovingAverage+0x1e0>)
 8000dda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		ybuf_avg[avg_cnt]=dt[1];
 8000dde:	4b6c      	ldr	r3, [pc, #432]	; (8000f90 <MovingAverage+0x1dc>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8000dec:	4b6a      	ldr	r3, [pc, #424]	; (8000f98 <MovingAverage+0x1e4>)
 8000dee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		zbuf_avg[avg_cnt]=dt[2];
 8000df2:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <MovingAverage+0x1dc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8000e00:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <MovingAverage+0x1e8>)
 8000e02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if(avg_cnt==7)
 8000e06:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <MovingAverage+0x1dc>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	2b07      	cmp	r3, #7
 8000e0e:	f040 80b5 	bne.w	8000f7c <MovingAverage+0x1c8>
		{
			tmp64[0]=xbuf_avg[7]+xbuf_avg[6]+xbuf_avg[5]+xbuf_avg[4]+\
 8000e12:	4b60      	ldr	r3, [pc, #384]	; (8000f94 <MovingAverage+0x1e0>)
 8000e14:	89db      	ldrh	r3, [r3, #14]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b5e      	ldr	r3, [pc, #376]	; (8000f94 <MovingAverage+0x1e0>)
 8000e1c:	899b      	ldrh	r3, [r3, #12]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4413      	add	r3, r2
 8000e22:	4a5c      	ldr	r2, [pc, #368]	; (8000f94 <MovingAverage+0x1e0>)
 8000e24:	8952      	ldrh	r2, [r2, #10]
 8000e26:	b212      	sxth	r2, r2
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a5a      	ldr	r2, [pc, #360]	; (8000f94 <MovingAverage+0x1e0>)
 8000e2c:	8912      	ldrh	r2, [r2, #8]
 8000e2e:	b212      	sxth	r2, r2
 8000e30:	4413      	add	r3, r2
							 xbuf_avg[3]+xbuf_avg[2]+xbuf_avg[1]+xbuf_avg[0];
 8000e32:	4a58      	ldr	r2, [pc, #352]	; (8000f94 <MovingAverage+0x1e0>)
 8000e34:	88d2      	ldrh	r2, [r2, #6]
 8000e36:	b212      	sxth	r2, r2
			tmp64[0]=xbuf_avg[7]+xbuf_avg[6]+xbuf_avg[5]+xbuf_avg[4]+\
 8000e38:	4413      	add	r3, r2
							 xbuf_avg[3]+xbuf_avg[2]+xbuf_avg[1]+xbuf_avg[0];
 8000e3a:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <MovingAverage+0x1e0>)
 8000e3c:	8892      	ldrh	r2, [r2, #4]
 8000e3e:	b212      	sxth	r2, r2
 8000e40:	4413      	add	r3, r2
 8000e42:	4a54      	ldr	r2, [pc, #336]	; (8000f94 <MovingAverage+0x1e0>)
 8000e44:	8852      	ldrh	r2, [r2, #2]
 8000e46:	b212      	sxth	r2, r2
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a52      	ldr	r2, [pc, #328]	; (8000f94 <MovingAverage+0x1e0>)
 8000e4c:	8812      	ldrh	r2, [r2, #0]
 8000e4e:	b212      	sxth	r2, r2
 8000e50:	4413      	add	r3, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	ea4f 73e2 	mov.w	r3, r2, asr #31
			tmp64[0]=xbuf_avg[7]+xbuf_avg[6]+xbuf_avg[5]+xbuf_avg[4]+\
 8000e58:	4951      	ldr	r1, [pc, #324]	; (8000fa0 <MovingAverage+0x1ec>)
 8000e5a:	e9c1 2300 	strd	r2, r3, [r1]
			tmp64[1]=ybuf_avg[7]+ybuf_avg[6]+ybuf_avg[5]+ybuf_avg[4]+\
 8000e5e:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <MovingAverage+0x1e4>)
 8000e60:	89db      	ldrh	r3, [r3, #14]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <MovingAverage+0x1e4>)
 8000e68:	899b      	ldrh	r3, [r3, #12]
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <MovingAverage+0x1e4>)
 8000e70:	8952      	ldrh	r2, [r2, #10]
 8000e72:	b212      	sxth	r2, r2
 8000e74:	4413      	add	r3, r2
 8000e76:	4a48      	ldr	r2, [pc, #288]	; (8000f98 <MovingAverage+0x1e4>)
 8000e78:	8912      	ldrh	r2, [r2, #8]
 8000e7a:	b212      	sxth	r2, r2
 8000e7c:	4413      	add	r3, r2
							 ybuf_avg[3]+ybuf_avg[2]+ybuf_avg[1]+ybuf_avg[0];
 8000e7e:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <MovingAverage+0x1e4>)
 8000e80:	88d2      	ldrh	r2, [r2, #6]
 8000e82:	b212      	sxth	r2, r2
			tmp64[1]=ybuf_avg[7]+ybuf_avg[6]+ybuf_avg[5]+ybuf_avg[4]+\
 8000e84:	4413      	add	r3, r2
							 ybuf_avg[3]+ybuf_avg[2]+ybuf_avg[1]+ybuf_avg[0];
 8000e86:	4a44      	ldr	r2, [pc, #272]	; (8000f98 <MovingAverage+0x1e4>)
 8000e88:	8892      	ldrh	r2, [r2, #4]
 8000e8a:	b212      	sxth	r2, r2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <MovingAverage+0x1e4>)
 8000e90:	8852      	ldrh	r2, [r2, #2]
 8000e92:	b212      	sxth	r2, r2
 8000e94:	4413      	add	r3, r2
 8000e96:	4a40      	ldr	r2, [pc, #256]	; (8000f98 <MovingAverage+0x1e4>)
 8000e98:	8812      	ldrh	r2, [r2, #0]
 8000e9a:	b212      	sxth	r2, r2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	ea4f 73e2 	mov.w	r3, r2, asr #31
			tmp64[1]=ybuf_avg[7]+ybuf_avg[6]+ybuf_avg[5]+ybuf_avg[4]+\
 8000ea4:	493e      	ldr	r1, [pc, #248]	; (8000fa0 <MovingAverage+0x1ec>)
 8000ea6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			tmp64[2]=zbuf_avg[7]+zbuf_avg[6]+zbuf_avg[5]+zbuf_avg[4]+\
 8000eaa:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <MovingAverage+0x1e8>)
 8000eac:	89db      	ldrh	r3, [r3, #14]
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <MovingAverage+0x1e8>)
 8000eb4:	899b      	ldrh	r3, [r3, #12]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <MovingAverage+0x1e8>)
 8000ebc:	8952      	ldrh	r2, [r2, #10]
 8000ebe:	b212      	sxth	r2, r2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a36      	ldr	r2, [pc, #216]	; (8000f9c <MovingAverage+0x1e8>)
 8000ec4:	8912      	ldrh	r2, [r2, #8]
 8000ec6:	b212      	sxth	r2, r2
 8000ec8:	4413      	add	r3, r2
							 zbuf_avg[3]+zbuf_avg[2]+zbuf_avg[1]+zbuf_avg[0];
 8000eca:	4a34      	ldr	r2, [pc, #208]	; (8000f9c <MovingAverage+0x1e8>)
 8000ecc:	88d2      	ldrh	r2, [r2, #6]
 8000ece:	b212      	sxth	r2, r2
			tmp64[2]=zbuf_avg[7]+zbuf_avg[6]+zbuf_avg[5]+zbuf_avg[4]+\
 8000ed0:	4413      	add	r3, r2
							 zbuf_avg[3]+zbuf_avg[2]+zbuf_avg[1]+zbuf_avg[0];
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <MovingAverage+0x1e8>)
 8000ed4:	8892      	ldrh	r2, [r2, #4]
 8000ed6:	b212      	sxth	r2, r2
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <MovingAverage+0x1e8>)
 8000edc:	8852      	ldrh	r2, [r2, #2]
 8000ede:	b212      	sxth	r2, r2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <MovingAverage+0x1e8>)
 8000ee4:	8812      	ldrh	r2, [r2, #0]
 8000ee6:	b212      	sxth	r2, r2
 8000ee8:	4413      	add	r3, r2
 8000eea:	461a      	mov	r2, r3
 8000eec:	ea4f 73e2 	mov.w	r3, r2, asr #31
			tmp64[2]=zbuf_avg[7]+zbuf_avg[6]+zbuf_avg[5]+zbuf_avg[4]+\
 8000ef0:	492b      	ldr	r1, [pc, #172]	; (8000fa0 <MovingAverage+0x1ec>)
 8000ef2:	e9c1 2304 	strd	r2, r3, [r1, #16]
			dt[0]=tmp64[0]/8;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MovingAverage+0x1ec>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	f173 0100 	sbcs.w	r1, r3, #0
 8000f02:	da02      	bge.n	8000f0a <MovingAverage+0x156>
 8000f04:	3207      	adds	r2, #7
 8000f06:	f143 0300 	adc.w	r3, r3, #0
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	f04f 0100 	mov.w	r1, #0
 8000f12:	08d0      	lsrs	r0, r2, #3
 8000f14:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8000f18:	10d9      	asrs	r1, r3, #3
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	b212      	sxth	r2, r2
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	801a      	strh	r2, [r3, #0]
			dt[1]=tmp64[1]/8;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MovingAverage+0x1ec>)
 8000f26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	f173 0100 	sbcs.w	r1, r3, #0
 8000f30:	da02      	bge.n	8000f38 <MovingAverage+0x184>
 8000f32:	3207      	adds	r2, #7
 8000f34:	f143 0300 	adc.w	r3, r3, #0
 8000f38:	f04f 0000 	mov.w	r0, #0
 8000f3c:	f04f 0100 	mov.w	r1, #0
 8000f40:	08d0      	lsrs	r0, r2, #3
 8000f42:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8000f46:	10d9      	asrs	r1, r3, #3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	b202      	sxth	r2, r0
 8000f4e:	801a      	strh	r2, [r3, #0]
			dt[2]=tmp64[2]/8;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MovingAverage+0x1ec>)
 8000f52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	f173 0100 	sbcs.w	r1, r3, #0
 8000f5c:	da02      	bge.n	8000f64 <MovingAverage+0x1b0>
 8000f5e:	3207      	adds	r2, #7
 8000f60:	f143 0300 	adc.w	r3, r3, #0
 8000f64:	f04f 0000 	mov.w	r0, #0
 8000f68:	f04f 0100 	mov.w	r1, #0
 8000f6c:	08d0      	lsrs	r0, r2, #3
 8000f6e:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8000f72:	10d9      	asrs	r1, r3, #3
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3304      	adds	r3, #4
 8000f78:	b202      	sxth	r2, r0
 8000f7a:	801a      	strh	r2, [r3, #0]
		}
		avg_cnt++;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <MovingAverage+0x1dc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	b25a      	sxtb	r2, r3
 8000f8a:	4b01      	ldr	r3, [pc, #4]	; (8000f90 <MovingAverage+0x1dc>)
 8000f8c:	701a      	strb	r2, [r3, #0]
		//������� ������� ��������
		dt[0]=tmp64[0]/8;
		dt[1]=tmp64[1]/8;
		dt[2]=tmp64[2]/8;
	}
}
 8000f8e:	e0d7      	b.n	8001140 <MovingAverage+0x38c>
 8000f90:	200004c0 	.word	0x200004c0
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	2000009c 	.word	0x2000009c
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	200004c8 	.word	0x200004c8
		tmp64[0]-=xbuf_avg[0];
 8000fa4:	4b69      	ldr	r3, [pc, #420]	; (800114c <MovingAverage+0x398>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b69      	ldr	r3, [pc, #420]	; (8001150 <MovingAverage+0x39c>)
 8000fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb0:	b212      	sxth	r2, r2
 8000fb2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fb6:	1a84      	subs	r4, r0, r2
 8000fb8:	eb61 0503 	sbc.w	r5, r1, r3
 8000fbc:	4b64      	ldr	r3, [pc, #400]	; (8001150 <MovingAverage+0x39c>)
 8000fbe:	e9c3 4500 	strd	r4, r5, [r3]
		tmp64[1]-=ybuf_avg[0];
 8000fc2:	4b64      	ldr	r3, [pc, #400]	; (8001154 <MovingAverage+0x3a0>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4a61      	ldr	r2, [pc, #388]	; (8001150 <MovingAverage+0x39c>)
 8000fca:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fd4:	1a84      	subs	r4, r0, r2
 8000fd6:	613c      	str	r4, [r7, #16]
 8000fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	4b5c      	ldr	r3, [pc, #368]	; (8001150 <MovingAverage+0x39c>)
 8000fe0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000fe4:	e9c3 1202 	strd	r1, r2, [r3, #8]
		tmp64[2]-=zbuf_avg[0];
 8000fe8:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <MovingAverage+0x3a4>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4a58      	ldr	r2, [pc, #352]	; (8001150 <MovingAverage+0x39c>)
 8000ff0:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000ffa:	1a84      	subs	r4, r0, r2
 8000ffc:	60bc      	str	r4, [r7, #8]
 8000ffe:	eb61 0303 	sbc.w	r3, r1, r3
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b52      	ldr	r3, [pc, #328]	; (8001150 <MovingAverage+0x39c>)
 8001006:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800100a:	e9c3 1204 	strd	r1, r2, [r3, #16]
		memcpy((void*)xbuf_avg,(void*)(xbuf_avg+1),sizeof(int16_t)*7);
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <MovingAverage+0x3a8>)
 8001010:	220e      	movs	r2, #14
 8001012:	4619      	mov	r1, r3
 8001014:	484d      	ldr	r0, [pc, #308]	; (800114c <MovingAverage+0x398>)
 8001016:	f004 fc0f 	bl	8005838 <memcpy>
		memcpy((void*)ybuf_avg,(void*)(ybuf_avg+1),sizeof(int16_t)*7);
 800101a:	4b51      	ldr	r3, [pc, #324]	; (8001160 <MovingAverage+0x3ac>)
 800101c:	220e      	movs	r2, #14
 800101e:	4619      	mov	r1, r3
 8001020:	484c      	ldr	r0, [pc, #304]	; (8001154 <MovingAverage+0x3a0>)
 8001022:	f004 fc09 	bl	8005838 <memcpy>
		memcpy((void*)zbuf_avg,(void*)(zbuf_avg+1),sizeof(int16_t)*7);
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <MovingAverage+0x3b0>)
 8001028:	220e      	movs	r2, #14
 800102a:	4619      	mov	r1, r3
 800102c:	484a      	ldr	r0, [pc, #296]	; (8001158 <MovingAverage+0x3a4>)
 800102e:	f004 fc03 	bl	8005838 <memcpy>
		xbuf_avg[7]=dt[0];
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001038:	4b44      	ldr	r3, [pc, #272]	; (800114c <MovingAverage+0x398>)
 800103a:	81da      	strh	r2, [r3, #14]
		ybuf_avg[7]=dt[1];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001042:	4b44      	ldr	r3, [pc, #272]	; (8001154 <MovingAverage+0x3a0>)
 8001044:	81da      	strh	r2, [r3, #14]
		zbuf_avg[7]=dt[2];
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800104c:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MovingAverage+0x3a4>)
 800104e:	81da      	strh	r2, [r3, #14]
		tmp64[0]+=dt[0];
 8001050:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <MovingAverage+0x39c>)
 8001052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	b21a      	sxth	r2, r3
 800105e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001062:	1884      	adds	r4, r0, r2
 8001064:	603c      	str	r4, [r7, #0]
 8001066:	eb41 0303 	adc.w	r3, r1, r3
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b38      	ldr	r3, [pc, #224]	; (8001150 <MovingAverage+0x39c>)
 800106e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001072:	e9c3 1200 	strd	r1, r2, [r3]
		tmp64[1]+=dt[1];
 8001076:	4b36      	ldr	r3, [pc, #216]	; (8001150 <MovingAverage+0x39c>)
 8001078:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	3302      	adds	r3, #2
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	b21a      	sxth	r2, r3
 8001086:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800108a:	eb10 0a02 	adds.w	sl, r0, r2
 800108e:	eb41 0b03 	adc.w	fp, r1, r3
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <MovingAverage+0x39c>)
 8001094:	e9c3 ab02 	strd	sl, fp, [r3, #8]
		tmp64[2]+=dt[2];
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <MovingAverage+0x39c>)
 800109a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80010ac:	eb10 0802 	adds.w	r8, r0, r2
 80010b0:	eb41 0903 	adc.w	r9, r1, r3
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <MovingAverage+0x39c>)
 80010b6:	e9c3 8904 	strd	r8, r9, [r3, #16]
		dt[0]=tmp64[0]/8;
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MovingAverage+0x39c>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	f173 0100 	sbcs.w	r1, r3, #0
 80010c6:	da02      	bge.n	80010ce <MovingAverage+0x31a>
 80010c8:	3207      	adds	r2, #7
 80010ca:	f143 0300 	adc.w	r3, r3, #0
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	f04f 0100 	mov.w	r1, #0
 80010d6:	08d0      	lsrs	r0, r2, #3
 80010d8:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 80010dc:	10d9      	asrs	r1, r3, #3
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	b212      	sxth	r2, r2
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	801a      	strh	r2, [r3, #0]
		dt[1]=tmp64[1]/8;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MovingAverage+0x39c>)
 80010ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	f173 0100 	sbcs.w	r1, r3, #0
 80010f4:	da02      	bge.n	80010fc <MovingAverage+0x348>
 80010f6:	3207      	adds	r2, #7
 80010f8:	f143 0300 	adc.w	r3, r3, #0
 80010fc:	f04f 0000 	mov.w	r0, #0
 8001100:	f04f 0100 	mov.w	r1, #0
 8001104:	08d0      	lsrs	r0, r2, #3
 8001106:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800110a:	10d9      	asrs	r1, r3, #3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3302      	adds	r3, #2
 8001110:	b202      	sxth	r2, r0
 8001112:	801a      	strh	r2, [r3, #0]
		dt[2]=tmp64[2]/8;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MovingAverage+0x39c>)
 8001116:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800111a:	2a00      	cmp	r2, #0
 800111c:	f173 0100 	sbcs.w	r1, r3, #0
 8001120:	da02      	bge.n	8001128 <MovingAverage+0x374>
 8001122:	3207      	adds	r2, #7
 8001124:	f143 0300 	adc.w	r3, r3, #0
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	f04f 0100 	mov.w	r1, #0
 8001130:	08d0      	lsrs	r0, r2, #3
 8001132:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8001136:	10d9      	asrs	r1, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3304      	adds	r3, #4
 800113c:	b202      	sxth	r2, r0
 800113e:	801a      	strh	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800114a:	bf00      	nop
 800114c:	2000008c 	.word	0x2000008c
 8001150:	200004c8 	.word	0x200004c8
 8001154:	2000009c 	.word	0x2000009c
 8001158:	200000ac 	.word	0x200000ac
 800115c:	2000008e 	.word	0x2000008e
 8001160:	2000009e 	.word	0x2000009e
 8001164:	200000ae 	.word	0x200000ae

08001168 <I2Cx_ReadData>:
//--------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af04      	add	r7, sp, #16
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	b29a      	uxth	r2, r3
 8001184:	88f9      	ldrh	r1, [r7, #6]
 8001186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f107 030e 	add.w	r3, r7, #14
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2301      	movs	r3, #1
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <I2Cx_ReadData+0x44>)
 800119a:	f002 fc27 	bl	80039ec <HAL_I2C_Mem_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]
	return value;
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200004e0 	.word	0x200004e0

080011b0 <I2Cx_WriteData>:
//--------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	460b      	mov	r3, r1
 80011bc:	717b      	strb	r3, [r7, #5]
 80011be:	4613      	mov	r3, r2
 80011c0:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	88f9      	ldrh	r1, [r7, #6]
 80011cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <I2Cx_WriteData+0x40>)
 80011de:	f002 fb0b 	bl	80037f8 <HAL_I2C_Mem_Write>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]
//	if(status != HAL_OK) Error();
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200004e0 	.word	0x200004e0

080011f4 <Accel_IO_Read>:
//--------------------------------------------
uint8_t Accel_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	460a      	mov	r2, r1
 80011fe:	80fb      	strh	r3, [r7, #6]
 8001200:	4613      	mov	r3, r2
 8001202:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001204:	797a      	ldrb	r2, [r7, #5]
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffac 	bl	8001168 <I2Cx_ReadData>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <Accel_IO_Write>:
//--------------------------------------------
void Accel_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	80fb      	strh	r3, [r7, #6]
 8001224:	460b      	mov	r3, r1
 8001226:	717b      	strb	r3, [r7, #5]
 8001228:	4613      	mov	r3, r2
 800122a:	713b      	strb	r3, [r7, #4]
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800122c:	793a      	ldrb	r2, [r7, #4]
 800122e:	7979      	ldrb	r1, [r7, #5]
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffbc 	bl	80011b0 <I2Cx_WriteData>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <Accel_GetXYZ>:
//--------------------------------------------
void Accel_GetXYZ(int16_t* pData)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	int16_t pnRawData[3];
	uint8_t ctrlx[2]={0,0};
 8001248:	2300      	movs	r3, #0
 800124a:	82bb      	strh	r3, [r7, #20]
	uint8_t buffer[6];
	uint8_t i=0;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
	uint8_t sensitivity = LSM303DLHC_FULLSCALE_2G;
 8001250:	2300      	movs	r3, #0
 8001252:	77bb      	strb	r3, [r7, #30]
	
	ctrlx[0] = Accel_IO_Read(0x32,LSM303DLHC_CTRL_REG4_A);
 8001254:	2123      	movs	r1, #35	; 0x23
 8001256:	2032      	movs	r0, #50	; 0x32
 8001258:	f7ff ffcc 	bl	80011f4 <Accel_IO_Read>
 800125c:	4603      	mov	r3, r0
 800125e:	753b      	strb	r3, [r7, #20]
	ctrlx[1] = Accel_IO_Read(0x32,LSM303DLHC_CTRL_REG5_A);
 8001260:	2124      	movs	r1, #36	; 0x24
 8001262:	2032      	movs	r0, #50	; 0x32
 8001264:	f7ff ffc6 	bl	80011f4 <Accel_IO_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	757b      	strb	r3, [r7, #21]
	
	buffer[0] = Accel_IO_Read(0x32,LSM303DLHC_OUT_X_L_A);
 800126c:	2128      	movs	r1, #40	; 0x28
 800126e:	2032      	movs	r0, #50	; 0x32
 8001270:	f7ff ffc0 	bl	80011f4 <Accel_IO_Read>
 8001274:	4603      	mov	r3, r0
 8001276:	733b      	strb	r3, [r7, #12]
	buffer[1] = Accel_IO_Read(0x32,LSM303DLHC_OUT_X_H_A);
 8001278:	2129      	movs	r1, #41	; 0x29
 800127a:	2032      	movs	r0, #50	; 0x32
 800127c:	f7ff ffba 	bl	80011f4 <Accel_IO_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	737b      	strb	r3, [r7, #13]
	buffer[2] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Y_L_A);
 8001284:	212a      	movs	r1, #42	; 0x2a
 8001286:	2032      	movs	r0, #50	; 0x32
 8001288:	f7ff ffb4 	bl	80011f4 <Accel_IO_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Y_H_A);
 8001290:	212b      	movs	r1, #43	; 0x2b
 8001292:	2032      	movs	r0, #50	; 0x32
 8001294:	f7ff ffae 	bl	80011f4 <Accel_IO_Read>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
	buffer[4] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Z_L_A);
 800129c:	212c      	movs	r1, #44	; 0x2c
 800129e:	2032      	movs	r0, #50	; 0x32
 80012a0:	f7ff ffa8 	bl	80011f4 <Accel_IO_Read>
 80012a4:	4603      	mov	r3, r0
 80012a6:	743b      	strb	r3, [r7, #16]
	buffer[5] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Z_H_A);
 80012a8:	212d      	movs	r1, #45	; 0x2d
 80012aa:	2032      	movs	r0, #50	; 0x32
 80012ac:	f7ff ffa2 	bl	80011f4 <Accel_IO_Read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	747b      	strb	r3, [r7, #17]
	
	if(!(ctrlx[0]&LSM303DLHC_BLE_MSB))
 80012b4:	7d3b      	ldrb	r3, [r7, #20]
 80012b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d125      	bne.n	800130a <Accel_GetXYZ+0xca>
	{
		for(i=0;i<3;i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	77fb      	strb	r3, [r7, #31]
 80012c2:	e01e      	b.n	8001302 <Accel_GetXYZ+0xc2>
		{
			pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1]<<8)+buffer[2*i]);
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	3301      	adds	r3, #1
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	4413      	add	r3, r2
 80012d0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	f107 0120 	add.w	r1, r7, #32
 80012e0:	440b      	add	r3, r1
 80012e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	b212      	sxth	r2, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	f107 0120 	add.w	r1, r7, #32
 80012f6:	440b      	add	r3, r1
 80012f8:	f823 2c08 	strh.w	r2, [r3, #-8]
		for(i=0;i<3;i++)
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	3301      	adds	r3, #1
 8001300:	77fb      	strb	r3, [r7, #31]
 8001302:	7ffb      	ldrb	r3, [r7, #31]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d9dd      	bls.n	80012c4 <Accel_GetXYZ+0x84>
 8001308:	e024      	b.n	8001354 <Accel_GetXYZ+0x114>
		}
	}
	else
	{
		for(i=0;i<3;i++)
 800130a:	2300      	movs	r3, #0
 800130c:	77fb      	strb	r3, [r7, #31]
 800130e:	e01e      	b.n	800134e <Accel_GetXYZ+0x10e>
		{
			pnRawData[i]=((int16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]);
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	f107 0220 	add.w	r2, r7, #32
 8001318:	4413      	add	r3, r2
 800131a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b29a      	uxth	r2, r3
 8001322:	7ffb      	ldrb	r3, [r7, #31]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	3301      	adds	r3, #1
 8001328:	f107 0120 	add.w	r1, r7, #32
 800132c:	440b      	add	r3, r1
 800132e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4413      	add	r3, r2
 8001336:	b29a      	uxth	r2, r3
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	b212      	sxth	r2, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	f107 0120 	add.w	r1, r7, #32
 8001342:	440b      	add	r3, r1
 8001344:	f823 2c08 	strh.w	r2, [r3, #-8]
		for(i=0;i<3;i++)
 8001348:	7ffb      	ldrb	r3, [r7, #31]
 800134a:	3301      	adds	r3, #1
 800134c:	77fb      	strb	r3, [r7, #31]
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d9dd      	bls.n	8001310 <Accel_GetXYZ+0xd0>
		}
	}
	
	switch(ctrlx[0]&LSM303DLHC_FULLSCALE_16G)
 8001354:	7d3b      	ldrb	r3, [r7, #20]
 8001356:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800135a:	2b30      	cmp	r3, #48	; 0x30
 800135c:	d013      	beq.n	8001386 <Accel_GetXYZ+0x146>
 800135e:	2b30      	cmp	r3, #48	; 0x30
 8001360:	dc14      	bgt.n	800138c <Accel_GetXYZ+0x14c>
 8001362:	2b20      	cmp	r3, #32
 8001364:	d00c      	beq.n	8001380 <Accel_GetXYZ+0x140>
 8001366:	2b20      	cmp	r3, #32
 8001368:	dc10      	bgt.n	800138c <Accel_GetXYZ+0x14c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <Accel_GetXYZ+0x134>
 800136e:	2b10      	cmp	r3, #16
 8001370:	d003      	beq.n	800137a <Accel_GetXYZ+0x13a>
 8001372:	e00b      	b.n	800138c <Accel_GetXYZ+0x14c>
	{
		case LSM303DLHC_FULLSCALE_2G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001374:	2301      	movs	r3, #1
 8001376:	77bb      	strb	r3, [r7, #30]
			break;
 8001378:	e008      	b.n	800138c <Accel_GetXYZ+0x14c>
		case LSM303DLHC_FULLSCALE_4G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 800137a:	2302      	movs	r3, #2
 800137c:	77bb      	strb	r3, [r7, #30]
			break;
 800137e:	e005      	b.n	800138c <Accel_GetXYZ+0x14c>
		case LSM303DLHC_FULLSCALE_8G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001380:	2304      	movs	r3, #4
 8001382:	77bb      	strb	r3, [r7, #30]
			break;
 8001384:	e002      	b.n	800138c <Accel_GetXYZ+0x14c>
		case LSM303DLHC_FULLSCALE_16G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001386:	230c      	movs	r3, #12
 8001388:	77bb      	strb	r3, [r7, #30]
			break;
 800138a:	bf00      	nop
	}
	
	for(i=0;i<3;i++)
 800138c:	2300      	movs	r3, #0
 800138e:	77fb      	strb	r3, [r7, #31]
 8001390:	e015      	b.n	80013be <Accel_GetXYZ+0x17e>
	{
		pData[i]=(pnRawData[i]*sensitivity);
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	f107 0220 	add.w	r2, r7, #32
 800139a:	4413      	add	r3, r2
 800139c:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	7fbb      	ldrb	r3, [r7, #30]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	fb12 f303 	smulbb	r3, r2, r3
 80013aa:	b299      	uxth	r1, r3
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	b20a      	sxth	r2, r1
 80013b6:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 80013b8:	7ffb      	ldrb	r3, [r7, #31]
 80013ba:	3301      	adds	r3, #1
 80013bc:	77fb      	strb	r3, [r7, #31]
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d9e6      	bls.n	8001392 <Accel_GetXYZ+0x152>
	}
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <Mag_GetXYZ>:
//--------------------------------------------
void Mag_GetXYZ(int16_t* pData)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	uint8_t i=0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
	
	buffer[0] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_X_H_M);
 80013da:	2103      	movs	r1, #3
 80013dc:	203c      	movs	r0, #60	; 0x3c
 80013de:	f7ff ff09 	bl	80011f4 <Accel_IO_Read>
 80013e2:	4603      	mov	r3, r0
 80013e4:	723b      	strb	r3, [r7, #8]
	buffer[1] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_X_L_M);
 80013e6:	2104      	movs	r1, #4
 80013e8:	203c      	movs	r0, #60	; 0x3c
 80013ea:	f7ff ff03 	bl	80011f4 <Accel_IO_Read>
 80013ee:	4603      	mov	r3, r0
 80013f0:	727b      	strb	r3, [r7, #9]
	buffer[2] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Y_H_M);
 80013f2:	2107      	movs	r1, #7
 80013f4:	203c      	movs	r0, #60	; 0x3c
 80013f6:	f7ff fefd 	bl	80011f4 <Accel_IO_Read>
 80013fa:	4603      	mov	r3, r0
 80013fc:	72bb      	strb	r3, [r7, #10]
	buffer[3] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Y_L_M);
 80013fe:	2108      	movs	r1, #8
 8001400:	203c      	movs	r0, #60	; 0x3c
 8001402:	f7ff fef7 	bl	80011f4 <Accel_IO_Read>
 8001406:	4603      	mov	r3, r0
 8001408:	72fb      	strb	r3, [r7, #11]
	buffer[4] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Z_H_M);
 800140a:	2105      	movs	r1, #5
 800140c:	203c      	movs	r0, #60	; 0x3c
 800140e:	f7ff fef1 	bl	80011f4 <Accel_IO_Read>
 8001412:	4603      	mov	r3, r0
 8001414:	733b      	strb	r3, [r7, #12]
	buffer[5] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Z_L_M);
 8001416:	2106      	movs	r1, #6
 8001418:	203c      	movs	r0, #60	; 0x3c
 800141a:	f7ff feeb 	bl	80011f4 <Accel_IO_Read>
 800141e:	4603      	mov	r3, r0
 8001420:	737b      	strb	r3, [r7, #13]
	
	for(i=0;i<3;i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e026      	b.n	8001476 <Mag_GetXYZ+0xa8>
	{
		if(pData[i]!=-4096) pData[i]=((uint16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001434:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001438:	d01a      	beq.n	8001470 <Mag_GetXYZ+0xa2>
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	f107 0210 	add.w	r2, r7, #16
 8001442:	4413      	add	r3, r2
 8001444:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001448:	b29b      	uxth	r3, r3
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b29a      	uxth	r2, r3
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	3301      	adds	r3, #1
 8001454:	f107 0110 	add.w	r1, r7, #16
 8001458:	440b      	add	r3, r1
 800145a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b299      	uxth	r1, r3
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	b20a      	sxth	r2, r1
 800146e:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	3301      	adds	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d9d5      	bls.n	8001428 <Mag_GetXYZ+0x5a>
	}
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <Accel_ReadID>:
//--------------------------------------------
uint8_t Accel_ReadID(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	71fb      	strb	r3, [r7, #7]
	ctrl = Accel_IO_Read(0x32,0x0F);
 8001490:	210f      	movs	r1, #15
 8001492:	2032      	movs	r0, #50	; 0x32
 8001494:	f7ff feae 	bl	80011f4 <Accel_IO_Read>
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
	return ctrl;
 800149c:	79fb      	ldrb	r3, [r7, #7]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <AccelMag_Read>:
//--------------------------------------------
#include <stdbool.h>
_Bool wave_detected = false;
static int16_t massiv[500]={0};
void AccelMag_Read(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0a0      	sub	sp, #128	; 0x80
 80014ac:	af00      	add	r7, sp, #0
	int16_t buffer[3] = {0};
 80014ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	809a      	strh	r2, [r3, #4]
	int16_t bufferAcess[3]={0};
 80014b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	809a      	strh	r2, [r3, #4]
	static int16_t val[3], tmp16;
	Accel_GetXYZ(bufferAcess);
 80014c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff feba 	bl	8001240 <Accel_GetXYZ>
	Mag_GetXYZ(buffer);
 80014cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff7c 	bl	80013ce <Mag_GetXYZ>
	tmp16=buffer[0]; if(tmp16!=-4096) val[0]=tmp16+64;
 80014d6:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <AccelMag_Read+0x1a4>)
 80014dc:	801a      	strh	r2, [r3, #0]
 80014de:	4b5b      	ldr	r3, [pc, #364]	; (800164c <AccelMag_Read+0x1a4>)
 80014e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80014e8:	d008      	beq.n	80014fc <AccelMag_Read+0x54>
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <AccelMag_Read+0x1a4>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3340      	adds	r3, #64	; 0x40
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b55      	ldr	r3, [pc, #340]	; (8001650 <AccelMag_Read+0x1a8>)
 80014fa:	801a      	strh	r2, [r3, #0]
	tmp16=buffer[1]; if(tmp16!=-4096) val[1]=tmp16+174;
 80014fc:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 8001500:	4b52      	ldr	r3, [pc, #328]	; (800164c <AccelMag_Read+0x1a4>)
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	4b51      	ldr	r3, [pc, #324]	; (800164c <AccelMag_Read+0x1a4>)
 8001506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800150e:	d008      	beq.n	8001522 <AccelMag_Read+0x7a>
 8001510:	4b4e      	ldr	r3, [pc, #312]	; (800164c <AccelMag_Read+0x1a4>)
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	b29b      	uxth	r3, r3
 8001518:	33ae      	adds	r3, #174	; 0xae
 800151a:	b29b      	uxth	r3, r3
 800151c:	b21a      	sxth	r2, r3
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <AccelMag_Read+0x1a8>)
 8001520:	805a      	strh	r2, [r3, #2]
	tmp16=buffer[2]; if(tmp16!=-4096) val[2]=tmp16+1204;
 8001522:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <AccelMag_Read+0x1a4>)
 8001528:	801a      	strh	r2, [r3, #0]
 800152a:	4b48      	ldr	r3, [pc, #288]	; (800164c <AccelMag_Read+0x1a4>)
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001534:	d009      	beq.n	800154a <AccelMag_Read+0xa2>
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <AccelMag_Read+0x1a4>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	b29b      	uxth	r3, r3
 800153e:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8001542:	b29b      	uxth	r3, r3
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <AccelMag_Read+0x1a8>)
 8001548:	809a      	strh	r2, [r3, #4]
	//������� ������ ����������� ��������
	MovingAverage(val);
 800154a:	4841      	ldr	r0, [pc, #260]	; (8001650 <AccelMag_Read+0x1a8>)
 800154c:	f7ff fc32 	bl	8000db4 <MovingAverage>
//	sprintf(str1,"Mag X:%06d Y:%06d Z:%06d\r\n", val[0], val[1], val[2]);
//	sprintf(str2,"Acell X:%06d Y:%06d Z:%06d\r\n", bufferAcess[0], bufferAcess[1], bufferAcess[2]);
//	HAL_UART_Transmit(&huart4, (uint8_t*)str2,strlen(str2),0x1000);
	static int16_t number=0;
	massiv[number]=bufferAcess[1];
 8001550:	4b40      	ldr	r3, [pc, #256]	; (8001654 <AccelMag_Read+0x1ac>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	461a      	mov	r2, r3
 8001558:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	; 0x6a
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <AccelMag_Read+0x1b0>)
 800155e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (number<499)
 8001562:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <AccelMag_Read+0x1ac>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800156c:	dc09      	bgt.n	8001582 <AccelMag_Read+0xda>
		number=number+1;
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <AccelMag_Read+0x1ac>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	b29b      	uxth	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	b29b      	uxth	r3, r3
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <AccelMag_Read+0x1ac>)
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	e002      	b.n	8001588 <AccelMag_Read+0xe0>
	else
		number=0;
 8001582:	4b34      	ldr	r3, [pc, #208]	; (8001654 <AccelMag_Read+0x1ac>)
 8001584:	2200      	movs	r2, #0
 8001586:	801a      	strh	r2, [r3, #0]

	uint16_t k=0;
 8001588:	2300      	movs	r3, #0
 800158a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	for (int numbercell=0; numbercell<500; numbercell=numbercell+1){
 800158e:	2300      	movs	r3, #0
 8001590:	67bb      	str	r3, [r7, #120]	; 0x78
 8001592:	e021      	b.n	80015d8 <AccelMag_Read+0x130>
		if (massiv[numbercell] < 14000 | massiv[numbercell] > 18000)
 8001594:	4a30      	ldr	r2, [pc, #192]	; (8001658 <AccelMag_Read+0x1b0>)
 8001596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001598:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800159c:	f243 62af 	movw	r2, #13999	; 0x36af
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bfd4      	ite	le
 80015a4:	2301      	movle	r3, #1
 80015a6:	2300      	movgt	r3, #0
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	492b      	ldr	r1, [pc, #172]	; (8001658 <AccelMag_Read+0x1b0>)
 80015ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015ae:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80015b2:	f244 6150 	movw	r1, #18000	; 0x4650
 80015b6:	428b      	cmp	r3, r1
 80015b8:	bfcc      	ite	gt
 80015ba:	2301      	movgt	r3, #1
 80015bc:	2300      	movle	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <AccelMag_Read+0x12a>
			k=k+1;
 80015c8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80015cc:	3301      	adds	r3, #1
 80015ce:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	for (int numbercell=0; numbercell<500; numbercell=numbercell+1){
 80015d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d4:	3301      	adds	r3, #1
 80015d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80015d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015de:	dbd9      	blt.n	8001594 <AccelMag_Read+0xec>
	}

	char answer_str[100] = {0};
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2260      	movs	r2, #96	; 0x60
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 f931 	bl	8005854 <memset>
	if (k>25){
 80015f2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80015f6:	2b19      	cmp	r3, #25
 80015f8:	d90a      	bls.n	8001610 <AccelMag_Read+0x168>
		wave_detected = true;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <AccelMag_Read+0x1b4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
		sprintf(answer_str, "Wave detected [DEBUG] k = %d\r\n", k);
 8001600:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4916      	ldr	r1, [pc, #88]	; (8001660 <AccelMag_Read+0x1b8>)
 8001608:	4618      	mov	r0, r3
 800160a:	f004 f92b 	bl	8005864 <siprintf>
 800160e:	e009      	b.n	8001624 <AccelMag_Read+0x17c>
	}
	else{
		wave_detected = false;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <AccelMag_Read+0x1b4>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
		sprintf(answer_str, "Wave not detected [DEBUG] k = %d\r\n", k);
 8001616:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4911      	ldr	r1, [pc, #68]	; (8001664 <AccelMag_Read+0x1bc>)
 800161e:	4618      	mov	r0, r3
 8001620:	f004 f920 	bl	8005864 <siprintf>
	}

	HAL_UART_Transmit_DMA(&huart4, (uint8_t*)answer_str, strlen(answer_str));
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fdd2 	bl	80001d0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <AccelMag_Read+0x1c0>)
 8001636:	f003 fd41 	bl	80050bc <HAL_UART_Transmit_DMA>
	HAL_Delay(500);
 800163a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800163e:	f000 fe17 	bl	8002270 <HAL_Delay>
}
 8001642:	bf00      	nop
 8001644:	3780      	adds	r7, #128	; 0x80
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200004a8 	.word	0x200004a8
 8001650:	200004ac 	.word	0x200004ac
 8001654:	200004b2 	.word	0x200004b2
 8001658:	200000c0 	.word	0x200000c0
 800165c:	200000bc 	.word	0x200000bc
 8001660:	080060bc 	.word	0x080060bc
 8001664:	080060dc 	.word	0x080060dc
 8001668:	2000062c 	.word	0x2000062c

0800166c <AccInit>:
//--------------------------------------------
void AccInit(uint16_t InitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]

	memset(massiv, 56, 500 * 2);
 8001676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800167a:	2138      	movs	r1, #56	; 0x38
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <AccInit+0x44>)
 800167e:	f004 f8e9 	bl	8005854 <memset>
	uint8_t ctrl = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
	ctrl = (uint8_t) InitStruct;
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32,LSM303DLHC_CTRL_REG1_A,ctrl);
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	461a      	mov	r2, r3
 800168e:	2120      	movs	r1, #32
 8001690:	2032      	movs	r0, #50	; 0x32
 8001692:	f7ff fdc2 	bl	800121a <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<8);
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32,LSM303DLHC_CTRL_REG4_A,ctrl);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	461a      	mov	r2, r3
 800169e:	2123      	movs	r1, #35	; 0x23
 80016a0:	2032      	movs	r0, #50	; 0x32
 80016a2:	f7ff fdba 	bl	800121a <Accel_IO_Write>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000c0 	.word	0x200000c0

080016b4 <MagInit>:
//--------------------------------------------
void MagInit(uint32_t InitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
	ctrl = (uint8_t) InitStruct;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_CRA_REG_M,ctrl);
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	461a      	mov	r2, r3
 80016c8:	2100      	movs	r1, #0
 80016ca:	203c      	movs	r0, #60	; 0x3c
 80016cc:	f7ff fda5 	bl	800121a <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<8);
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_CRB_REG_M,ctrl);
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2101      	movs	r1, #1
 80016da:	203c      	movs	r0, #60	; 0x3c
 80016dc:	f7ff fd9d 	bl	800121a <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<16);
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_MR_REG_M,ctrl);
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	461a      	mov	r2, r3
 80016e8:	2102      	movs	r1, #2
 80016ea:	203c      	movs	r0, #60	; 0x3c
 80016ec:	f7ff fd95 	bl	800121a <Accel_IO_Write>
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <Accel_AccFilter>:
//--------------------------------------------
void Accel_AccFilter(uint16_t FilterStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
	uint8_t tmpreg;
	tmpreg = Accel_IO_Read(0x32,LSM303DLHC_CTRL_REG2_A);
 8001702:	2121      	movs	r1, #33	; 0x21
 8001704:	2032      	movs	r0, #50	; 0x32
 8001706:	f7ff fd75 	bl	80011f4 <Accel_IO_Read>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
	tmpreg &= 0x0C;
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	73fb      	strb	r3, [r7, #15]
	tmpreg |= FilterStruct;
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	4313      	orrs	r3, r2
 800171e:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32,LSM303DLHC_CTRL_REG2_A,tmpreg);
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	461a      	mov	r2, r3
 8001724:	2121      	movs	r1, #33	; 0x21
 8001726:	2032      	movs	r0, #50	; 0x32
 8001728:	f7ff fd77 	bl	800121a <Accel_IO_Write>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <AccelMag_Ini>:
//--------------------------------------------
void AccelMag_Ini(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	uint16_t ctrl = 0x0000;
 800173a:	2300      	movs	r3, #0
 800173c:	80fb      	strh	r3, [r7, #6]
	uint32_t ctrl32 = 0x00000000;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
	avg_cnt=0;//������� ����������
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <AccelMag_Ini+0x80>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8001748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800174c:	f000 fd90 	bl	8002270 <HAL_Delay>
	if(Accel_ReadID()==0x33) LD6_ON;
 8001750:	f7ff fe99 	bl	8001486 <Accel_ReadID>
 8001754:	4603      	mov	r3, r0
 8001756:	2b33      	cmp	r3, #51	; 0x33
 8001758:	d105      	bne.n	8001766 <AccelMag_Ini+0x32>
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001760:	4815      	ldr	r0, [pc, #84]	; (80017b8 <AccelMag_Ini+0x84>)
 8001762:	f001 fbc7 	bl	8002ef4 <HAL_GPIO_WritePin>
//	else Error();
	ctrl|=(LSM303DLHC_NORMAL_MODE|LSM303DLHC_ODR_50_HZ|LSM303DLHC_AXES_ENABLE);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800176c:	80fb      	strh	r3, [r7, #6]
	ctrl|=((LSM303DLHC_BlockUpdate_Continous|LSM303DLHC_BLE_LSB|LSM303DLHC_HR_ENABLE)<<8);
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001774:	80fb      	strh	r3, [r7, #6]
	AccInit(ctrl);
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff77 	bl	800166c <AccInit>
	ctrl=(uint8_t)(LSM303DLHC_HPM_NORMAL_MODE|LSM303DLHC_HPFCF_16|\
 800177e:	2390      	movs	r3, #144	; 0x90
 8001780:	80fb      	strh	r3, [r7, #6]
								 LSM303DLHC_HPF_AOI1_DISABLE|LSM303DLHC_HPF_AOI2_DISABLE);
	Accel_AccFilter(ctrl);
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ffb7 	bl	80016f8 <Accel_AccFilter>
	ctrl32|=(LSM303DLHC_TEMPSENSOR_DISABLE|LSM303DLHC_ODR_220_HZ);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f043 031c 	orr.w	r3, r3, #28
 8001790:	603b      	str	r3, [r7, #0]
	ctrl32|=LSM303DLHC_FS_4_0_GA<<8;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001798:	603b      	str	r3, [r7, #0]
	ctrl32|=LSM303DLHC_CONTINUOS_CONVERSION<<16;
	MagInit(ctrl32);
 800179a:	6838      	ldr	r0, [r7, #0]
 800179c:	f7ff ff8a 	bl	80016b4 <MagInit>
	LD7_ON;
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a6:	4804      	ldr	r0, [pc, #16]	; (80017b8 <AccelMag_Ini+0x84>)
 80017a8:	f001 fba4 	bl	8002ef4 <HAL_GPIO_WritePin>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200004c0 	.word	0x200004c0
 80017b8:	40021000 	.word	0x40021000

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f000 fce3 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f82d 	bl	8001824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f000 f97b 	bl	8001ac4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ce:	f000 f893 	bl	80018f8 <MX_I2C1_Init>
  MX_UART4_Init();
 80017d2:	f000 f8ed 	bl	80019b0 <MX_UART4_Init>
  MX_DMA_Init();
 80017d6:	f000 f93f 	bl	8001a58 <MX_DMA_Init>
  MX_I2C2_Init();
 80017da:	f000 f8bb 	bl	8001954 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80017de:	f000 f911 	bl	8001a04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AccelMag_Ini();
 80017e2:	f7ff ffa7 	bl	8001734 <AccelMag_Ini>
  SHT2x_Init(&hi2c2);
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <main+0x64>)
 80017e8:	f000 f9b6 	bl	8001b58 <SHT2x_Init>
  SHT2x_SetResolution(RES_13_10);
 80017ec:	2080      	movs	r0, #128	; 0x80
 80017ee:	f000 fa71 	bl	8001cd4 <SHT2x_SetResolution>
  SHT2x_SoftReset();
 80017f2:	f000 f9c1 	bl	8001b78 <SHT2x_SoftReset>
  float temperature = SHT2x_GetTemperature(SHT2x_READ_TEMP_HOLD);
 80017f6:	20e3      	movs	r0, #227	; 0xe3
 80017f8:	f000 fa26 	bl	8001c48 <SHT2x_GetTemperature>
 80017fc:	ed87 0a01 	vstr	s0, [r7, #4]
  int id = SHT2x_ReadUserReg();
 8001800:	f000 f9d0 	bl	8001ba4 <SHT2x_ReadUserReg>
 8001804:	4603      	mov	r3, r0
 8001806:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AccelMag_Read();
 8001808:	f7ff fe4e 	bl	80014a8 <AccelMag_Read>
	  temperature = SHT2x_GetTemperature(SHT2x_READ_TEMP_NOHOLD);
 800180c:	20f3      	movs	r0, #243	; 0xf3
 800180e:	f000 fa1b 	bl	8001c48 <SHT2x_GetTemperature>
 8001812:	ed87 0a01 	vstr	s0, [r7, #4]
	  HAL_Delay(5);
 8001816:	2005      	movs	r0, #5
 8001818:	f000 fd2a 	bl	8002270 <HAL_Delay>
	  AccelMag_Read();
 800181c:	e7f4      	b.n	8001808 <main+0x4c>
 800181e:	bf00      	nop
 8001820:	20000534 	.word	0x20000534

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	; 0x50
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2230      	movs	r2, #48	; 0x30
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f004 f80e 	bl	8005854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <SystemClock_Config+0xcc>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <SystemClock_Config+0xcc>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6413      	str	r3, [r2, #64]	; 0x40
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <SystemClock_Config+0xcc>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <SystemClock_Config+0xd0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <SystemClock_Config+0xd0>)
 800186e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <SystemClock_Config+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001888:	2310      	movs	r3, #16
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188c:	2302      	movs	r3, #2
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001894:	2308      	movs	r3, #8
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001898:	23a8      	movs	r3, #168	; 0xa8
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189c:	2302      	movs	r3, #2
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 ff71 	bl	8004790 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b4:	f000 f94a 	bl	8001b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2105      	movs	r1, #5
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f9d2 	bl	8004c80 <HAL_RCC_ClockConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018e2:	f000 f933 	bl	8001b4c <Error_Handler>
  }
}
 80018e6:	bf00      	nop
 80018e8:	3750      	adds	r7, #80	; 0x50
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f001 faf7 	bl	8002f28 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 f904 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200004e0 	.word	0x200004e0
 800194c:	40005400 	.word	0x40005400
 8001950:	000186a0 	.word	0x000186a0

08001954 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_I2C2_Init+0x50>)
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <MX_I2C2_Init+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_I2C2_Init+0x50>)
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_I2C2_Init+0x58>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_I2C2_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_I2C2_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_I2C2_Init+0x50>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_I2C2_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_I2C2_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_I2C2_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_I2C2_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_I2C2_Init+0x50>)
 8001992:	f001 fac9 	bl	8002f28 <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 f8d6 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000534 	.word	0x20000534
 80019a8:	40005800 	.word	0x40005800
 80019ac:	000186a0 	.word	0x000186a0

080019b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_UART4_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_UART4_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_UART4_Init+0x4c>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_UART4_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_UART4_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_UART4_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_UART4_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_UART4_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_UART4_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_UART4_Init+0x4c>)
 80019e8:	f003 fb1a 	bl	8005020 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80019f2:	f000 f8ab 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000062c 	.word	0x2000062c
 8001a00:	40004c00 	.word	0x40004c00

08001a04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	f003 faf0 	bl	8005020 <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a46:	f000 f881 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200005e8 	.word	0x200005e8
 8001a54:	40011000 	.word	0x40011000

08001a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_DMA_Init+0x68>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <MX_DMA_Init+0x68>)
 8001a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_DMA_Init+0x68>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_DMA_Init+0x68>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <MX_DMA_Init+0x68>)
 8001a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <MX_DMA_Init+0x68>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f000 fce7 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001aa0:	200f      	movs	r0, #15
 8001aa2:	f000 fd00 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2046      	movs	r0, #70	; 0x46
 8001aac:	f000 fcdf 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001ab0:	2046      	movs	r0, #70	; 0x46
 8001ab2:	f000 fcf8 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_GPIO_Init+0x84>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
}
 8001b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <Error_Handler+0x8>
	...

08001b58 <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <SHT2x_Init+0x1c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	200006d0 	.word	0x200006d0

08001b78 <SHT2x_SoftReset>:

/**
 *  @brief Performs a soft reset.
 */
void SHT2x_SoftReset(void){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af02      	add	r7, sp, #8
	uint8_t cmd = SHT2x_SOFT_RESET;
 8001b7e:	23fe      	movs	r3, #254	; 0xfe
 8001b80:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <SHT2x_SoftReset+0x28>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	1dfa      	adds	r2, r7, #7
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	f001 fb0d 	bl	80031b0 <HAL_I2C_Master_Transmit>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200006d0 	.word	0x200006d0

08001ba4 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8001baa:	23e7      	movs	r3, #231	; 0xe7
 8001bac:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <SHT2x_ReadUserReg+0x3c>)
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	1dba      	adds	r2, r7, #6
 8001bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	f001 faf7 	bl	80031b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <SHT2x_ReadUserReg+0x3c>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	1dfa      	adds	r2, r7, #7
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	f001 fbeb 	bl	80033ac <HAL_I2C_Master_Receive>
	return val;
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200006d0 	.word	0x200006d0

08001be4 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <SHT2x_GetRaw+0x58>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	81bb      	strh	r3, [r7, #12]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <SHT2x_GetRaw+0x5c>)
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	1dfa      	adds	r2, r7, #7
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2301      	movs	r3, #1
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	f001 fad2 	bl	80031b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <SHT2x_GetRaw+0x5c>)
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	f001 fbc5 	bl	80033ac <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8001c22:	7b3b      	ldrb	r3, [r7, #12]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	7b7b      	ldrb	r3, [r7, #13]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	b29b      	uxth	r3, r3
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	08006100 	.word	0x08006100
 8001c40:	200006d0 	.word	0x200006d0
 8001c44:	00000000 	.word	0x00000000

08001c48 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SHT2x_GetTemperature+0x14>
 8001c58:	23e3      	movs	r3, #227	; 0xe3
 8001c5a:	e000      	b.n	8001c5e <SHT2x_GetTemperature+0x16>
 8001c5c:	23f3      	movs	r3, #243	; 0xf3
 8001c5e:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ffbe 	bl	8001be4 <SHT2x_GetRaw>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc5a 	bl	8000524 <__aeabi_i2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <SHT2x_GetTemperature+0x88>)
 8001c76:	f7fe fde9 	bl	800084c <__aeabi_ddiv>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	a30f      	add	r3, pc, #60	; (adr r3, 8001cc0 <SHT2x_GetTemperature+0x78>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fcb6 	bl	80005f8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	a30c      	add	r3, pc, #48	; (adr r3, 8001cc8 <SHT2x_GetTemperature+0x80>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe faf5 	bl	8000288 <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe feb9 	bl	8000a1c <__aeabi_d2f>
 8001caa:	4603      	mov	r3, r0
 8001cac:	ee07 3a90 	vmov	s15, r3
}
 8001cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	3d70a3d7 	.word	0x3d70a3d7
 8001cc4:	4065f70a 	.word	0x4065f70a
 8001cc8:	cccccccd 	.word	0xcccccccd
 8001ccc:	40476ccc 	.word	0x40476ccc
 8001cd0:	40f00000 	.word	0x40f00000

08001cd4 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 8001cde:	f7ff ff61 	bl	8001ba4 <SHT2x_ReadUserReg>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001cee:	b25a      	sxtb	r2, r3
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8001cfa:	23e6      	movs	r3, #230	; 0xe6
 8001cfc:	733b      	strb	r3, [r7, #12]
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <SHT2x_SetResolution+0x4c>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	f107 020c 	add.w	r2, r7, #12
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	f001 fa4c 	bl	80031b0 <HAL_I2C_Master_Transmit>
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200006d0 	.word	0x200006d0

08001d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_MspInit+0x4c>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a32      	ldr	r2, [pc, #200]	; (8001e5c <HAL_I2C_MspInit+0xe8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d12c      	bne.n	8001df0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db6:	2312      	movs	r3, #18
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4825      	ldr	r0, [pc, #148]	; (8001e64 <HAL_I2C_MspInit+0xf0>)
 8001dce:	f000 fef5 	bl	8002bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001ddc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dee:	e031      	b.n	8001e54 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_I2C_MspInit+0xf4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d12c      	bne.n	8001e54 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1c:	2312      	movs	r3, #18
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	480c      	ldr	r0, [pc, #48]	; (8001e64 <HAL_I2C_MspInit+0xf0>)
 8001e34:	f000 fec2 	bl	8002bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001e42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_I2C_MspInit+0xec>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3730      	adds	r7, #48	; 0x30
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40005800 	.word	0x40005800

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a60      	ldr	r2, [pc, #384]	; (800200c <HAL_UART_MspInit+0x1a0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d15a      	bne.n	8001f44 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a5e      	ldr	r2, [pc, #376]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	4b58      	ldr	r3, [pc, #352]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a57      	ldr	r2, [pc, #348]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b55      	ldr	r3, [pc, #340]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	484c      	ldr	r0, [pc, #304]	; (8002014 <HAL_UART_MspInit+0x1a8>)
 8001ee2:	f000 fe6b 	bl	8002bbc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_UART_MspInit+0x1b0>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ef4:	4b48      	ldr	r3, [pc, #288]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001ef6:	2240      	movs	r2, #64	; 0x40
 8001ef8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f00:	4b45      	ldr	r3, [pc, #276]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f06:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0e:	4b42      	ldr	r3, [pc, #264]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001f14:	4b40      	ldr	r3, [pc, #256]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f20:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001f26:	483c      	ldr	r0, [pc, #240]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f28:	f000 fad8 	bl	80024dc <HAL_DMA_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001f32:	f7ff fe0b 	bl	8001b4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a37      	ldr	r2, [pc, #220]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3c:	4a36      	ldr	r2, [pc, #216]	; (8002018 <HAL_UART_MspInit+0x1ac>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f42:	e05f      	b.n	8002004 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a35      	ldr	r2, [pc, #212]	; (8002020 <HAL_UART_MspInit+0x1b4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d15a      	bne.n	8002004 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a2e      	ldr	r2, [pc, #184]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a27      	ldr	r2, [pc, #156]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_UART_MspInit+0x1a4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481c      	ldr	r0, [pc, #112]	; (8002014 <HAL_UART_MspInit+0x1a8>)
 8001fa4:	f000 fe0a 	bl	8002bbc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_UART_MspInit+0x1bc>)
 8001fac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001fea:	f000 fa77 	bl	80024dc <HAL_DMA_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001ff4:	f7ff fdaa 	bl	8001b4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_UART_MspInit+0x1b8>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002004:	bf00      	nop
 8002006:	3730      	adds	r7, #48	; 0x30
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40004c00 	.word	0x40004c00
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000
 8002018:	20000670 	.word	0x20000670
 800201c:	40026070 	.word	0x40026070
 8002020:	40011000 	.word	0x40011000
 8002024:	20000588 	.word	0x20000588
 8002028:	400264b8 	.word	0x400264b8

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f000 f8da 	bl	8002230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <DMA1_Stream4_IRQHandler+0x10>)
 8002086:	f000 fb2f 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000670 	.word	0x20000670

08002094 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <DMA2_Stream7_IRQHandler+0x10>)
 800209a:	f000 fb25 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000588 	.word	0x20000588

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d8:	f003 fb84 	bl	80057e4 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	220c      	movs	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20020000 	.word	0x20020000
 8002108:	00000400 	.word	0x00000400
 800210c:	200004b4 	.word	0x200004b4
 8002110:	200006e8 	.word	0x200006e8

08002114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <SystemInit+0x20>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <SystemInit+0x20>)
 8002120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002170 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800213e:	490e      	ldr	r1, [pc, #56]	; (8002178 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002140:	4a0e      	ldr	r2, [pc, #56]	; (800217c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002154:	4c0b      	ldr	r4, [pc, #44]	; (8002184 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002162:	f7ff ffd7 	bl	8002114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002166:	f003 fb43 	bl	80057f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216a:	f7ff fb27 	bl	80017bc <main>
  bx  lr    
 800216e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800217c:	08006168 	.word	0x08006168
  ldr r2, =_sbss
 8002180:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002184:	200006e8 	.word	0x200006e8

08002188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <HAL_Init+0x40>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <HAL_Init+0x40>)
 80021a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_Init+0x40>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f94f 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ba:	200f      	movs	r0, #15
 80021bc:	f000 f808 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c0:	f7ff fdb0 	bl	8001d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0x54>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x58>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f967 	bl	80024c2 <HAL_SYSTICK_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00e      	b.n	800221c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d80a      	bhi.n	800221a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f000 f92f 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_InitTick+0x5c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000000 	.word	0x20000000
 8002228:	20000008 	.word	0x20000008
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_IncTick+0x20>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x24>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_IncTick+0x24>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000008 	.word	0x20000008
 8002254:	200006d4 	.word	0x200006d4

08002258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_GetTick+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200006d4 	.word	0x200006d4

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff ffee 	bl	8002258 <HAL_GetTick>
 800227c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d005      	beq.n	8002296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_Delay+0x44>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002296:	bf00      	nop
 8002298:	f7ff ffde 	bl	8002258 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f7      	bhi.n	8002298 <HAL_Delay+0x28>
  {
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000008 	.word	0x20000008

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	; (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	; (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	; (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff8e 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff29 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff3e 	bl	8002300 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff8e 	bl	80023ac <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5d 	bl	8002358 <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff31 	bl	800231c <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff feb6 	bl	8002258 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e099      	b.n	800262c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002518:	e00f      	b.n	800253a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251a:	f7ff fe9d 	bl	8002258 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b05      	cmp	r3, #5
 8002526:	d908      	bls.n	800253a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e078      	b.n	800262c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e8      	bne.n	800251a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <HAL_DMA_Init+0x158>)
 8002554:	4013      	ands	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	2b04      	cmp	r3, #4
 8002592:	d107      	bne.n	80025a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	4313      	orrs	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0307 	bic.w	r3, r3, #7
 80025ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d117      	bne.n	80025fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fa6f 	bl	8002ac4 <DMA_CheckFifoParam>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025fa:	2301      	movs	r3, #1
 80025fc:	e016      	b.n	800262c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa26 	bl	8002a58 <DMA_CalcBaseAndBitshift>
 800260c:	4603      	mov	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	223f      	movs	r2, #63	; 0x3f
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	f010803f 	.word	0xf010803f

08002638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_DMA_Start_IT+0x26>
 800265a:	2302      	movs	r3, #2
 800265c:	e040      	b.n	80026e0 <HAL_DMA_Start_IT+0xa8>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d12f      	bne.n	80026d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f9b8 	bl	80029fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	223f      	movs	r2, #63	; 0x3f
 8002692:	409a      	lsls	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0216 	orr.w	r2, r2, #22
 80026a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e005      	b.n	80026de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026da:	2302      	movs	r3, #2
 80026dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026de:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f4:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_DMA_IRQHandler+0x258>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a92      	ldr	r2, [pc, #584]	; (8002944 <HAL_DMA_IRQHandler+0x25c>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0a9b      	lsrs	r3, r3, #10
 8002700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2208      	movs	r2, #8
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01a      	beq.n	8002754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0204 	bic.w	r2, r2, #4
 800273a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2208      	movs	r2, #8
 8002742:	409a      	lsls	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2201      	movs	r2, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f043 0202 	orr.w	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2204      	movs	r2, #4
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d012      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2204      	movs	r2, #4
 80027ae:	409a      	lsls	r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	2210      	movs	r2, #16
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d043      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03c      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2210      	movs	r2, #16
 80027e4:	409a      	lsls	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d018      	beq.n	800282a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d024      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
 8002816:	e01f      	b.n	8002858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
 8002828:	e016      	b.n	8002858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0208 	bic.w	r2, r2, #8
 8002846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	2220      	movs	r2, #32
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 808e 	beq.w	8002986 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8086 	beq.w	8002986 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	2220      	movs	r2, #32
 8002880:	409a      	lsls	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b05      	cmp	r3, #5
 8002890:	d136      	bne.n	8002900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0216 	bic.w	r2, r2, #22
 80028a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <HAL_DMA_IRQHandler+0x1da>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0208 	bic.w	r2, r2, #8
 80028d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	223f      	movs	r2, #63	; 0x3f
 80028d8:	409a      	lsls	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d07d      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
        }
        return;
 80028fe:	e078      	b.n	80029f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01c      	beq.n	8002948 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	2b00      	cmp	r3, #0
 8002922:	d030      	beq.n	8002986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e02b      	b.n	8002986 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d027      	beq.n	8002986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
 800293e:	e022      	b.n	8002986 <HAL_DMA_IRQHandler+0x29e>
 8002940:	20000000 	.word	0x20000000
 8002944:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0210 	bic.w	r2, r2, #16
 8002964:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	2b00      	cmp	r3, #0
 800298c:	d032      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2205      	movs	r2, #5
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d307      	bcc.n	80029ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f2      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x2ca>
 80029cc:	e000      	b.n	80029d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029ce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e000      	b.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029f2:	bf00      	nop
    }
  }
}
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop

080029fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d108      	bne.n	8002a3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a3a:	e007      	b.n	8002a4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3b10      	subs	r3, #16
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <DMA_CalcBaseAndBitshift+0x64>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d909      	bls.n	8002a9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	1d1a      	adds	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	659a      	str	r2, [r3, #88]	; 0x58
 8002a98:	e007      	b.n	8002aaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	aaaaaaab 	.word	0xaaaaaaab
 8002ac0:	0800611c 	.word	0x0800611c

08002ac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11f      	bne.n	8002b1e <DMA_CheckFifoParam+0x5a>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d856      	bhi.n	8002b92 <DMA_CheckFifoParam+0xce>
 8002ae4:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <DMA_CheckFifoParam+0x28>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b0f 	.word	0x08002b0f
 8002af4:	08002afd 	.word	0x08002afd
 8002af8:	08002b93 	.word	0x08002b93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d046      	beq.n	8002b96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e043      	b.n	8002b96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b16:	d140      	bne.n	8002b9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e03d      	b.n	8002b9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b26:	d121      	bne.n	8002b6c <DMA_CheckFifoParam+0xa8>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d837      	bhi.n	8002b9e <DMA_CheckFifoParam+0xda>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <DMA_CheckFifoParam+0x70>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b45 	.word	0x08002b45
 8002b38:	08002b4b 	.word	0x08002b4b
 8002b3c:	08002b45 	.word	0x08002b45
 8002b40:	08002b5d 	.word	0x08002b5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e030      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d025      	beq.n	8002ba2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5a:	e022      	b.n	8002ba2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b64:	d11f      	bne.n	8002ba6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b6a:	e01c      	b.n	8002ba6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d903      	bls.n	8002b7a <DMA_CheckFifoParam+0xb6>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d003      	beq.n	8002b80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b78:	e018      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7e:	e015      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e00b      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;
 8002b92:	bf00      	nop
 8002b94:	e00a      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
 8002b98:	e008      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e006      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e004      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;   
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
    }
  } 
  
  return status; 
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e16b      	b.n	8002eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	f040 815a 	bne.w	8002eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d005      	beq.n	8002c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d130      	bne.n	8002c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	2201      	movs	r2, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0201 	and.w	r2, r3, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d017      	beq.n	8002cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d123      	bne.n	8002d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80b4 	beq.w	8002eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4a5f      	ldr	r2, [pc, #380]	; (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d50:	6453      	str	r3, [r2, #68]	; 0x44
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ecc <HAL_GPIO_Init+0x310>)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_GPIO_Init+0x314>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02b      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a51      	ldr	r2, [pc, #324]	; (8002ed4 <HAL_GPIO_Init+0x318>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d025      	beq.n	8002dde <HAL_GPIO_Init+0x222>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a50      	ldr	r2, [pc, #320]	; (8002ed8 <HAL_GPIO_Init+0x31c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <HAL_GPIO_Init+0x21e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	; (8002edc <HAL_GPIO_Init+0x320>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d019      	beq.n	8002dd6 <HAL_GPIO_Init+0x21a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <HAL_GPIO_Init+0x324>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0x216>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4d      	ldr	r2, [pc, #308]	; (8002ee4 <HAL_GPIO_Init+0x328>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00d      	beq.n	8002dce <HAL_GPIO_Init+0x212>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4c      	ldr	r2, [pc, #304]	; (8002ee8 <HAL_GPIO_Init+0x32c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <HAL_GPIO_Init+0x20e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	; (8002eec <HAL_GPIO_Init+0x330>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_GPIO_Init+0x20a>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e00e      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	e00c      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00a      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e008      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e004      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002de2:	2300      	movs	r3, #0
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f002 0203 	and.w	r2, r2, #3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4093      	lsls	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df4:	4935      	ldr	r1, [pc, #212]	; (8002ecc <HAL_GPIO_Init+0x310>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e26:	4a32      	ldr	r2, [pc, #200]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <HAL_GPIO_Init+0x334>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	f67f ae90 	bls.w	8002bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021400 	.word	0x40021400
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40021c00 	.word	0x40021c00
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
 8002f00:	4613      	mov	r3, r2
 8002f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f04:	787b      	ldrb	r3, [r7, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f10:	e003      	b.n	8002f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e12b      	b.n	8003192 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe ff10 	bl	8001d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f002 f820 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8002f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a81      	ldr	r2, [pc, #516]	; (800319c <HAL_I2C_Init+0x274>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d807      	bhi.n	8002fac <HAL_I2C_Init+0x84>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a80      	ldr	r2, [pc, #512]	; (80031a0 <HAL_I2C_Init+0x278>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e006      	b.n	8002fba <HAL_I2C_Init+0x92>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a7d      	ldr	r2, [pc, #500]	; (80031a4 <HAL_I2C_Init+0x27c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0e7      	b.n	8003192 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a78      	ldr	r2, [pc, #480]	; (80031a8 <HAL_I2C_Init+0x280>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0c9b      	lsrs	r3, r3, #18
 8002fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a6a      	ldr	r2, [pc, #424]	; (800319c <HAL_I2C_Init+0x274>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d802      	bhi.n	8002ffc <HAL_I2C_Init+0xd4>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	e009      	b.n	8003010 <HAL_I2C_Init+0xe8>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_I2C_Init+0x284>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	3301      	adds	r3, #1
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	430b      	orrs	r3, r1
 8003016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	495c      	ldr	r1, [pc, #368]	; (800319c <HAL_I2C_Init+0x274>)
 800302c:	428b      	cmp	r3, r1
 800302e:	d819      	bhi.n	8003064 <HAL_I2C_Init+0x13c>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e59      	subs	r1, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fbb1 f3f3 	udiv	r3, r1, r3
 800303e:	1c59      	adds	r1, r3, #1
 8003040:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003044:	400b      	ands	r3, r1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_I2C_Init+0x138>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e59      	subs	r1, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fbb1 f3f3 	udiv	r3, r1, r3
 8003058:	3301      	adds	r3, #1
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	e051      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 8003060:	2304      	movs	r3, #4
 8003062:	e04f      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <HAL_I2C_Init+0x168>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e012      	b.n	80030b6 <HAL_I2C_Init+0x18e>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e58      	subs	r0, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	0099      	lsls	r1, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Init+0x196>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e022      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10e      	bne.n	80030e4 <HAL_I2C_Init+0x1bc>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1e58      	subs	r0, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	440b      	add	r3, r1
 80030d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e2:	e00f      	b.n	8003104 <HAL_I2C_Init+0x1dc>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e58      	subs	r0, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	0099      	lsls	r1, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	6809      	ldr	r1, [r1, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6911      	ldr	r1, [r2, #16]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68d2      	ldr	r2, [r2, #12]
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	430b      	orrs	r3, r1
 8003146:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	000186a0 	.word	0x000186a0
 80031a0:	001e847f 	.word	0x001e847f
 80031a4:	003d08ff 	.word	0x003d08ff
 80031a8:	431bde83 	.word	0x431bde83
 80031ac:	10624dd3 	.word	0x10624dd3

080031b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	461a      	mov	r2, r3
 80031bc:	460b      	mov	r3, r1
 80031be:	817b      	strh	r3, [r7, #10]
 80031c0:	4613      	mov	r3, r2
 80031c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff f848 	bl	8002258 <HAL_GetTick>
 80031c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	f040 80e0 	bne.w	8003398 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	4970      	ldr	r1, [pc, #448]	; (80033a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f001 f8f6 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
 80031f0:	e0d3      	b.n	800339a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_I2C_Master_Transmit+0x50>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0cc      	b.n	800339a <HAL_I2C_Master_Transmit+0x1ea>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d007      	beq.n	8003226 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2221      	movs	r2, #33	; 0x21
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2210      	movs	r2, #16
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	893a      	ldrh	r2, [r7, #8]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a50      	ldr	r2, [pc, #320]	; (80033a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fde2 	bl	8003e38 <I2C_MasterRequestWrite>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e08d      	b.n	800339a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003294:	e066      	b.n	8003364 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f001 f970 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06b      	b.n	800339a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d11b      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x188>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d017      	beq.n	8003338 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	6a39      	ldr	r1, [r7, #32]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f001 f960 	bl	8004602 <I2C_WaitOnBTFFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b04      	cmp	r3, #4
 800334e:	d107      	bne.n	8003360 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e01a      	b.n	800339a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	d194      	bne.n	8003296 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	00100002 	.word	0x00100002
 80033a8:	ffff0000 	.word	0xffff0000

080033ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	461a      	mov	r2, r3
 80033b8:	460b      	mov	r3, r1
 80033ba:	817b      	strh	r3, [r7, #10]
 80033bc:	4613      	mov	r3, r2
 80033be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033c0:	f7fe ff4a 	bl	8002258 <HAL_GetTick>
 80033c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	f040 820b 	bne.w	80037ea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2319      	movs	r3, #25
 80033da:	2201      	movs	r2, #1
 80033dc:	497c      	ldr	r1, [pc, #496]	; (80035d0 <HAL_I2C_Master_Receive+0x224>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fff8 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
 80033ec:	e1fe      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_I2C_Master_Receive+0x50>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e1f7      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d007      	beq.n	8003422 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003430:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2222      	movs	r2, #34	; 0x22
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2210      	movs	r2, #16
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	893a      	ldrh	r2, [r7, #8]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_I2C_Master_Receive+0x228>)
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003464:	8979      	ldrh	r1, [r7, #10]
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fd66 	bl	8003f3c <I2C_MasterRequestRead>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1b8      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	d113      	bne.n	80034aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e18c      	b.n	80037c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d11b      	bne.n	80034ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e16c      	b.n	80037c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d11b      	bne.n	800352a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	e14c      	b.n	80037c4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003550:	e138      	b.n	80037c4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b03      	cmp	r3, #3
 8003558:	f200 80f1 	bhi.w	800373e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b01      	cmp	r3, #1
 8003562:	d123      	bne.n	80035ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f001 f88b 	bl	8004684 <I2C_WaitOnRXNEFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e139      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035aa:	e10b      	b.n	80037c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d14e      	bne.n	8003652 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	2200      	movs	r2, #0
 80035bc:	4906      	ldr	r1, [pc, #24]	; (80035d8 <HAL_I2C_Master_Receive+0x22c>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 ff08 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e10e      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
 80035ce:	bf00      	nop
 80035d0:	00100002 	.word	0x00100002
 80035d4:	ffff0000 	.word	0xffff0000
 80035d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003650:	e0b8      	b.n	80037c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	4966      	ldr	r1, [pc, #408]	; (80037f4 <HAL_I2C_Master_Receive+0x448>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 feb9 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0bf      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	2200      	movs	r2, #0
 80036b6:	494f      	ldr	r1, [pc, #316]	; (80037f4 <HAL_I2C_Master_Receive+0x448>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fe8b 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e091      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800373c:	e042      	b.n	80037c4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 ff9e 	bl	8004684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e04c      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d118      	bne.n	80037c4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f aec2 	bne.w	8003552 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	00010004 	.word	0x00010004

080037f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	460b      	mov	r3, r1
 800380c:	813b      	strh	r3, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003812:	f7fe fd21 	bl	8002258 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	f040 80d9 	bne.w	80039d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	2319      	movs	r3, #25
 800382c:	2201      	movs	r2, #1
 800382e:	496d      	ldr	r1, [pc, #436]	; (80039e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fdcf 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	e0cc      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_I2C_Mem_Write+0x56>
 800384a:	2302      	movs	r3, #2
 800384c:	e0c5      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d007      	beq.n	8003874 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2221      	movs	r2, #33	; 0x21
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a3a      	ldr	r2, [r7, #32]
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_I2C_Mem_Write+0x1f0>)
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038b6:	88f8      	ldrh	r0, [r7, #6]
 80038b8:	893a      	ldrh	r2, [r7, #8]
 80038ba:	8979      	ldrh	r1, [r7, #10]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	4603      	mov	r3, r0
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fc06 	bl	80040d8 <I2C_RequestMemoryWrite>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d052      	beq.n	8003978 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e081      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fe50 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06b      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11b      	bne.n	8003978 <HAL_I2C_Mem_Write+0x180>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1aa      	bne.n	80038d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fe3c 	bl	8004602 <I2C_WaitOnBTFFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2b04      	cmp	r3, #4
 8003996:	d107      	bne.n	80039a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e016      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00100002 	.word	0x00100002
 80039e8:	ffff0000 	.word	0xffff0000

080039ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	; 0x30
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	817b      	strh	r3, [r7, #10]
 80039fe:	460b      	mov	r3, r1
 8003a00:	813b      	strh	r3, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a06:	f7fe fc27 	bl	8002258 <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	f040 8208 	bne.w	8003e2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2319      	movs	r3, #25
 8003a20:	2201      	movs	r2, #1
 8003a22:	497b      	ldr	r1, [pc, #492]	; (8003c10 <HAL_I2C_Mem_Read+0x224>)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fcd5 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	e1fb      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Mem_Read+0x56>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e1f4      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d007      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2222      	movs	r2, #34	; 0x22
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2240      	movs	r2, #64	; 0x40
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a5b      	ldr	r2, [pc, #364]	; (8003c14 <HAL_I2C_Mem_Read+0x228>)
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aaa:	88f8      	ldrh	r0, [r7, #6]
 8003aac:	893a      	ldrh	r2, [r7, #8]
 8003aae:	8979      	ldrh	r1, [r7, #10]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	4603      	mov	r3, r0
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fba2 	bl	8004204 <I2C_RequestMemoryRead>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1b0      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d113      	bne.n	8003afa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e184      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d11b      	bne.n	8003b3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e164      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d11b      	bne.n	8003b7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	e144      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b90:	e138      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f200 80f1 	bhi.w	8003d7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d123      	bne.n	8003bec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fd6b 	bl	8004684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e139      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bea:	e10b      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d14e      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4906      	ldr	r1, [pc, #24]	; (8003c18 <HAL_I2C_Mem_Read+0x22c>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fbe8 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e10e      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
 8003c0e:	bf00      	nop
 8003c10:	00100002 	.word	0x00100002
 8003c14:	ffff0000 	.word	0xffff0000
 8003c18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c90:	e0b8      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4966      	ldr	r1, [pc, #408]	; (8003e34 <HAL_I2C_Mem_Read+0x448>)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fb99 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0bf      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	494f      	ldr	r1, [pc, #316]	; (8003e34 <HAL_I2C_Mem_Read+0x448>)
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fb6b 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e091      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d7c:	e042      	b.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fc7e 	bl	8004684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e04c      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d118      	bne.n	8003e04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f aec2 	bne.w	8003b92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e000      	b.n	8003e2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3728      	adds	r7, #40	; 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00010004 	.word	0x00010004

08003e38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	460b      	mov	r3, r1
 8003e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d006      	beq.n	8003e62 <I2C_MasterRequestWrite+0x2a>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d003      	beq.n	8003e62 <I2C_MasterRequestWrite+0x2a>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e60:	d108      	bne.n	8003e74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e00b      	b.n	8003e8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	2b12      	cmp	r3, #18
 8003e7a:	d107      	bne.n	8003e8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fa9b 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d103      	bne.n	8003ebc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e035      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec8:	d108      	bne.n	8003edc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eca:	897b      	ldrh	r3, [r7, #10]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	e01b      	b.n	8003f14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003edc:	897b      	ldrh	r3, [r7, #10]
 8003ede:	11db      	asrs	r3, r3, #7
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0306 	and.w	r3, r3, #6
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f063 030f 	orn	r3, r3, #15
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	490e      	ldr	r1, [pc, #56]	; (8003f34 <I2C_MasterRequestWrite+0xfc>)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fac1 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e010      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4907      	ldr	r1, [pc, #28]	; (8003f38 <I2C_MasterRequestWrite+0x100>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fab1 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	00010008 	.word	0x00010008
 8003f38:	00010002 	.word	0x00010002

08003f3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d006      	beq.n	8003f76 <I2C_MasterRequestRead+0x3a>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d003      	beq.n	8003f76 <I2C_MasterRequestRead+0x3a>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f74:	d108      	bne.n	8003f88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e00b      	b.n	8003fa0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b11      	cmp	r3, #17
 8003f8e:	d107      	bne.n	8003fa0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa11 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d103      	bne.n	8003fd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e079      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	e05f      	b.n	80040b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	11db      	asrs	r3, r3, #7
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0306 	and.w	r3, r3, #6
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f063 030f 	orn	r3, r3, #15
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4930      	ldr	r1, [pc, #192]	; (80040d0 <I2C_MasterRequestRead+0x194>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fa37 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e054      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4929      	ldr	r1, [pc, #164]	; (80040d4 <I2C_MasterRequestRead+0x198>)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa27 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e044      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f9af 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d103      	bne.n	8004094 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e017      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004098:	897b      	ldrh	r3, [r7, #10]
 800409a:	11db      	asrs	r3, r3, #7
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f063 030e 	orn	r3, r3, #14
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4907      	ldr	r1, [pc, #28]	; (80040d4 <I2C_MasterRequestRead+0x198>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f9e3 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	00010008 	.word	0x00010008
 80040d4:	00010002 	.word	0x00010002

080040d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2200      	movs	r2, #0
 800410a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f960 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004128:	d103      	bne.n	8004132 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e05f      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	6a3a      	ldr	r2, [r7, #32]
 800414a:	492d      	ldr	r1, [pc, #180]	; (8004200 <I2C_RequestMemoryWrite+0x128>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f998 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e04c      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	6a39      	ldr	r1, [r7, #32]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fa02 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b04      	cmp	r3, #4
 8004188:	d107      	bne.n	800419a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e02b      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d105      	bne.n	80041b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	611a      	str	r2, [r3, #16]
 80041ae:	e021      	b.n	80041f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f9dc 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e005      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ea:	893b      	ldrh	r3, [r7, #8]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	00010002 	.word	0x00010002

08004204 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	461a      	mov	r2, r3
 8004212:	4603      	mov	r3, r0
 8004214:	817b      	strh	r3, [r7, #10]
 8004216:	460b      	mov	r3, r1
 8004218:	813b      	strh	r3, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800422c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	2200      	movs	r2, #0
 8004246:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8c2 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004264:	d103      	bne.n	800426e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0aa      	b.n	80043c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004280:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	4952      	ldr	r1, [pc, #328]	; (80043d0 <I2C_RequestMemoryRead+0x1cc>)
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f8fa 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e097      	b.n	80043c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	6a39      	ldr	r1, [r7, #32]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f964 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00d      	beq.n	80042da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d107      	bne.n	80042d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e076      	b.n	80043c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042e0:	893b      	ldrh	r3, [r7, #8]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]
 80042ea:	e021      	b.n	8004330 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	6a39      	ldr	r1, [r7, #32]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f93e 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2b04      	cmp	r3, #4
 8004310:	d107      	bne.n	8004322 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004320:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e050      	b.n	80043c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004326:	893b      	ldrh	r3, [r7, #8]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004332:	6a39      	ldr	r1, [r7, #32]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f923 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00d      	beq.n	800435c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	2b04      	cmp	r3, #4
 8004346:	d107      	bne.n	8004358 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e035      	b.n	80043c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2200      	movs	r2, #0
 8004374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f82b 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004392:	d103      	bne.n	800439c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e013      	b.n	80043c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	6a3a      	ldr	r2, [r7, #32]
 80043b4:	4906      	ldr	r1, [pc, #24]	; (80043d0 <I2C_RequestMemoryRead+0x1cc>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f863 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	00010002 	.word	0x00010002

080043d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e4:	e025      	b.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d021      	beq.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fd ff33 	bl	8002258 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d116      	bne.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e023      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10d      	bne.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x84>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	e00c      	b.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0b6      	beq.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004490:	e051      	b.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a0:	d123      	bne.n	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e046      	b.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d021      	beq.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fd feb1 	bl	8002258 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e020      	b.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10c      	bne.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e00b      	b.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	43da      	mvns	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d18d      	bne.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800458c:	e02d      	b.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f8ce 	bl	8004730 <I2C_IsAcknowledgeFailed>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e02d      	b.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d021      	beq.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fd fe57 	bl	8002258 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d116      	bne.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d1ca      	bne.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460e:	e02d      	b.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f88d 	bl	8004730 <I2C_IsAcknowledgeFailed>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e02d      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d021      	beq.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004628:	f7fd fe16 	bl	8002258 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d302      	bcc.n	800463e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e007      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d1ca      	bne.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004690:	e042      	b.n	8004718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d119      	bne.n	80046d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0210 	mvn.w	r2, #16
 80046a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e029      	b.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7fd fdc0 	bl	8002258 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e007      	b.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d1b5      	bne.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d11b      	bne.n	8004780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e264      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d075      	beq.n	800489a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ae:	4ba3      	ldr	r3, [pc, #652]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d00c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ba:	4ba0      	ldr	r3, [pc, #640]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d112      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c6:	4b9d      	ldr	r3, [pc, #628]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d10b      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	4b99      	ldr	r3, [pc, #612]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05b      	beq.n	8004898 <HAL_RCC_OscConfig+0x108>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d157      	bne.n	8004898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e23f      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d106      	bne.n	8004804 <HAL_RCC_OscConfig+0x74>
 80047f6:	4b91      	ldr	r3, [pc, #580]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a90      	ldr	r2, [pc, #576]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e01d      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x98>
 800480e:	4b8b      	ldr	r3, [pc, #556]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a8a      	ldr	r2, [pc, #552]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b88      	ldr	r3, [pc, #544]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a87      	ldr	r2, [pc, #540]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004828:	4b84      	ldr	r3, [pc, #528]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a83      	ldr	r2, [pc, #524]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b81      	ldr	r3, [pc, #516]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a80      	ldr	r2, [pc, #512]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800483a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fd fd06 	bl	8002258 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004850:	f7fd fd02 	bl	8002258 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e204      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b76      	ldr	r3, [pc, #472]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0xc0>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fd fcf2 	bl	8002258 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004878:	f7fd fcee 	bl	8002258 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e1f0      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488a:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0xe8>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a6:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b5f      	ldr	r3, [pc, #380]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	4b5c      	ldr	r3, [pc, #368]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e1c4      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b56      	ldr	r3, [pc, #344]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4952      	ldr	r1, [pc, #328]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	e03a      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004900:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <HAL_RCC_OscConfig+0x2b0>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fd fca7 	bl	8002258 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490e:	f7fd fca3 	bl	8002258 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1a5      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4940      	ldr	r1, [pc, #256]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <HAL_RCC_OscConfig+0x2b0>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd fc86 	bl	8002258 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004950:	f7fd fc82 	bl	8002258 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e184      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d030      	beq.n	80049dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004982:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCC_OscConfig+0x2b4>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fd fc66 	bl	8002258 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004990:	f7fd fc62 	bl	8002258 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e164      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x200>
 80049ae:	e015      	b.n	80049dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b0:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_OscConfig+0x2b4>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd fc4f 	bl	8002258 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049be:	f7fd fc4b 	bl	8002258 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e14d      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d0:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80a0 	beq.w	8004b2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_OscConfig+0x2b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d121      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <HAL_RCC_OscConfig+0x2b8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <HAL_RCC_OscConfig+0x2b8>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fd fc11 	bl	8002258 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	e011      	b.n	8004a5e <HAL_RCC_OscConfig+0x2ce>
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	42470000 	.word	0x42470000
 8004a44:	42470e80 	.word	0x42470e80
 8004a48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fd fc04 	bl	8002258 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e106      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5e:	4b85      	ldr	r3, [pc, #532]	; (8004c74 <HAL_RCC_OscConfig+0x4e4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d106      	bne.n	8004a80 <HAL_RCC_OscConfig+0x2f0>
 8004a72:	4b81      	ldr	r3, [pc, #516]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a80      	ldr	r2, [pc, #512]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7e:	e01c      	b.n	8004aba <HAL_RCC_OscConfig+0x32a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x312>
 8004a88:	4b7b      	ldr	r3, [pc, #492]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a7a      	ldr	r2, [pc, #488]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004a8e:	f043 0304 	orr.w	r3, r3, #4
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
 8004a94:	4b78      	ldr	r3, [pc, #480]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a77      	ldr	r2, [pc, #476]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	e00b      	b.n	8004aba <HAL_RCC_OscConfig+0x32a>
 8004aa2:	4b75      	ldr	r3, [pc, #468]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a74      	ldr	r2, [pc, #464]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	4b72      	ldr	r3, [pc, #456]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a71      	ldr	r2, [pc, #452]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d015      	beq.n	8004aee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fd fbc9 	bl	8002258 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fd fbc5 	bl	8002258 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0c5      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ee      	beq.n	8004aca <HAL_RCC_OscConfig+0x33a>
 8004aec:	e014      	b.n	8004b18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aee:	f7fd fbb3 	bl	8002258 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fd fbaf 	bl	8002258 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0af      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0c:	4b5a      	ldr	r3, [pc, #360]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ee      	bne.n	8004af6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4b56      	ldr	r3, [pc, #344]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a55      	ldr	r2, [pc, #340]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 809b 	beq.w	8004c6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b34:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d05c      	beq.n	8004bfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d141      	bne.n	8004bcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b48:	4b4c      	ldr	r3, [pc, #304]	; (8004c7c <HAL_RCC_OscConfig+0x4ec>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4e:	f7fd fb83 	bl	8002258 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fd fb7f 	bl	8002258 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e081      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b68:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f0      	bne.n	8004b56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	019b      	lsls	r3, r3, #6
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	4937      	ldr	r1, [pc, #220]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9e:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <HAL_RCC_OscConfig+0x4ec>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fb58 	bl	8002258 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fd fb54 	bl	8002258 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e056      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x41c>
 8004bca:	e04e      	b.n	8004c6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <HAL_RCC_OscConfig+0x4ec>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7fd fb41 	bl	8002258 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bda:	f7fd fb3d 	bl	8002258 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e03f      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bec:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x44a>
 8004bf8:	e037      	b.n	8004c6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e032      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <HAL_RCC_OscConfig+0x4e8>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d028      	beq.n	8004c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d121      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d11a      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c36:	4013      	ands	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d111      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d107      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d001      	beq.n	8004c6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40007000 	.word	0x40007000
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	42470060 	.word	0x42470060

08004c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0cc      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c94:	4b68      	ldr	r3, [pc, #416]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d90c      	bls.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b65      	ldr	r3, [pc, #404]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004caa:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0b8      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd4:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cec:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a52      	ldr	r2, [pc, #328]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf8:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	494d      	ldr	r1, [pc, #308]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d044      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d119      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e07f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e06f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e067      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d5e:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4934      	ldr	r1, [pc, #208]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d70:	f7fd fa72 	bl	8002258 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fd fa6e 	bl	8002258 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e04f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 020c 	and.w	r2, r3, #12
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d1eb      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d20c      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e032      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4916      	ldr	r1, [pc, #88]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	490e      	ldr	r1, [pc, #56]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e06:	f000 f821 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	490a      	ldr	r1, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	5ccb      	ldrb	r3, [r1, r3]
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd f9d2 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023c00 	.word	0x40023c00
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	08006104 	.word	0x08006104
 8004e44:	20000000 	.word	0x20000000
 8004e48:	20000004 	.word	0x20000004

08004e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e52:	2100      	movs	r1, #0
 8004e54:	6079      	str	r1, [r7, #4]
 8004e56:	2100      	movs	r1, #0
 8004e58:	60f9      	str	r1, [r7, #12]
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e5e:	2100      	movs	r1, #0
 8004e60:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e62:	4952      	ldr	r1, [pc, #328]	; (8004fac <HAL_RCC_GetSysClockFreq+0x160>)
 8004e64:	6889      	ldr	r1, [r1, #8]
 8004e66:	f001 010c 	and.w	r1, r1, #12
 8004e6a:	2908      	cmp	r1, #8
 8004e6c:	d00d      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x3e>
 8004e6e:	2908      	cmp	r1, #8
 8004e70:	f200 8094 	bhi.w	8004f9c <HAL_RCC_GetSysClockFreq+0x150>
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x32>
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d003      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x38>
 8004e7c:	e08e      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e7e:	4b4c      	ldr	r3, [pc, #304]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004e80:	60bb      	str	r3, [r7, #8]
       break;
 8004e82:	e08e      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e84:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e86:	60bb      	str	r3, [r7, #8]
      break;
 8004e88:	e08b      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e8a:	4948      	ldr	r1, [pc, #288]	; (8004fac <HAL_RCC_GetSysClockFreq+0x160>)
 8004e8c:	6849      	ldr	r1, [r1, #4]
 8004e8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004e92:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e94:	4945      	ldr	r1, [pc, #276]	; (8004fac <HAL_RCC_GetSysClockFreq+0x160>)
 8004e96:	6849      	ldr	r1, [r1, #4]
 8004e98:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	d024      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea0:	4942      	ldr	r1, [pc, #264]	; (8004fac <HAL_RCC_GetSysClockFreq+0x160>)
 8004ea2:	6849      	ldr	r1, [r1, #4]
 8004ea4:	0989      	lsrs	r1, r1, #6
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004eb0:	f04f 0500 	mov.w	r5, #0
 8004eb4:	ea00 0204 	and.w	r2, r0, r4
 8004eb8:	ea01 0305 	and.w	r3, r1, r5
 8004ebc:	493d      	ldr	r1, [pc, #244]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ebe:	fb01 f003 	mul.w	r0, r1, r3
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	fb01 f102 	mul.w	r1, r1, r2
 8004ec8:	1844      	adds	r4, r0, r1
 8004eca:	493a      	ldr	r1, [pc, #232]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ecc:	fba2 0101 	umull	r0, r1, r2, r1
 8004ed0:	1863      	adds	r3, r4, r1
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	f7fb fdee 	bl	8000abc <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e04a      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <HAL_RCC_GetSysClockFreq+0x160>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004efa:	f04f 0100 	mov.w	r1, #0
 8004efe:	ea02 0400 	and.w	r4, r2, r0
 8004f02:	ea03 0501 	and.w	r5, r3, r1
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	014b      	lsls	r3, r1, #5
 8004f14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f18:	0142      	lsls	r2, r0, #5
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	1b00      	subs	r0, r0, r4
 8004f20:	eb61 0105 	sbc.w	r1, r1, r5
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	018b      	lsls	r3, r1, #6
 8004f2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f32:	0182      	lsls	r2, r0, #6
 8004f34:	1a12      	subs	r2, r2, r0
 8004f36:	eb63 0301 	sbc.w	r3, r3, r1
 8004f3a:	f04f 0000 	mov.w	r0, #0
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	00d9      	lsls	r1, r3, #3
 8004f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f48:	00d0      	lsls	r0, r2, #3
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	1912      	adds	r2, r2, r4
 8004f50:	eb45 0303 	adc.w	r3, r5, r3
 8004f54:	f04f 0000 	mov.w	r0, #0
 8004f58:	f04f 0100 	mov.w	r1, #0
 8004f5c:	0299      	lsls	r1, r3, #10
 8004f5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f62:	0290      	lsls	r0, r2, #10
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	f7fb fda2 	bl	8000abc <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <HAL_RCC_GetSysClockFreq+0x160>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	0c1b      	lsrs	r3, r3, #16
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	60bb      	str	r3, [r7, #8]
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f9e:	60bb      	str	r3, [r7, #8]
      break;
 8004fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bdb0      	pop	{r4, r5, r7, pc}
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	00f42400 	.word	0x00f42400
 8004fb4:	017d7840 	.word	0x017d7840

08004fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000000 	.word	0x20000000

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fd4:	f7ff fff0 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0a9b      	lsrs	r3, r3, #10
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4903      	ldr	r1, [pc, #12]	; (8004ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	08006114 	.word	0x08006114

08004ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ffc:	f7ff ffdc 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0b5b      	lsrs	r3, r3, #13
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCC_GetPCLK2Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	08006114 	.word	0x08006114

08005020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e03f      	b.n	80050b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc ff10 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2224      	movs	r2, #36	; 0x24
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9f5 	bl	8005454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d165      	bne.n	80051a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_UART_Transmit_DMA+0x26>
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e05e      	b.n	80051a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_UART_Transmit_DMA+0x38>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e057      	b.n	80051a4 <HAL_UART_Transmit_DMA+0xe8>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2221      	movs	r2, #33	; 0x21
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	4a22      	ldr	r2, [pc, #136]	; (80051ac <HAL_UART_Transmit_DMA+0xf0>)
 8005122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005128:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <HAL_UART_Transmit_DMA+0xf4>)
 800512a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <HAL_UART_Transmit_DMA+0xf8>)
 8005132:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	2200      	movs	r2, #0
 800513a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800513c:	f107 0308 	add.w	r3, r7, #8
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	6819      	ldr	r1, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3304      	adds	r3, #4
 8005150:	461a      	mov	r2, r3
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	f7fd fa70 	bl	8002638 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005160:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3314      	adds	r3, #20
 8005170:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	617b      	str	r3, [r7, #20]
   return(result);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3314      	adds	r3, #20
 8005188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518a:	627a      	str	r2, [r7, #36]	; 0x24
 800518c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	6a39      	ldr	r1, [r7, #32]
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	61fb      	str	r3, [r7, #28]
   return(result);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e5      	bne.n	800516a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3730      	adds	r7, #48	; 0x30
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	080051f5 	.word	0x080051f5
 80051b0:	0800528f 	.word	0x0800528f
 80051b4:	080052ab 	.word	0x080052ab

080051b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b090      	sub	sp, #64	; 0x40
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d137      	bne.n	8005280 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	2200      	movs	r2, #0
 8005214:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	623b      	str	r3, [r7, #32]
   return(result);
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
 800522e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3314      	adds	r3, #20
 8005234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005236:	633a      	str	r2, [r7, #48]	; 0x30
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800523c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e5      	bne.n	8005216 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800524a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60fb      	str	r3, [r7, #12]
   return(result);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
 8005262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800526a:	61fa      	str	r2, [r7, #28]
 800526c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	69b9      	ldr	r1, [r7, #24]
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	617b      	str	r3, [r7, #20]
   return(result);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800527e:	e002      	b.n	8005286 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005280:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005282:	f7ff ff99 	bl	80051b8 <HAL_UART_TxCpltCallback>
}
 8005286:	bf00      	nop
 8005288:	3740      	adds	r7, #64	; 0x40
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff95 	bl	80051cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b80      	cmp	r3, #128	; 0x80
 80052c8:	bf0c      	ite	eq
 80052ca:	2301      	moveq	r3, #1
 80052cc:	2300      	movne	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b21      	cmp	r3, #33	; 0x21
 80052dc:	d108      	bne.n	80052f0 <UART_DMAError+0x46>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2200      	movs	r2, #0
 80052e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80052ea:	68b8      	ldr	r0, [r7, #8]
 80052ec:	f000 f827 	bl	800533e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b22      	cmp	r3, #34	; 0x22
 8005310:	d108      	bne.n	8005324 <UART_DMAError+0x7a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f000 f835 	bl	800538e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005330:	68b8      	ldr	r0, [r7, #8]
 8005332:	f7ff ff55 	bl	80051e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800533e:	b480      	push	{r7}
 8005340:	b089      	sub	sp, #36	; 0x24
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	60bb      	str	r3, [r7, #8]
   return(result);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	61ba      	str	r2, [r7, #24]
 8005368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	613b      	str	r3, [r7, #16]
   return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005382:	bf00      	nop
 8005384:	3724      	adds	r7, #36	; 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800538e:	b480      	push	{r7}
 8005390:	b095      	sub	sp, #84	; 0x54
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053b6:	643a      	str	r2, [r7, #64]	; 0x40
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e5      	bne.n	8005396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	2b01      	cmp	r3, #1
 8005404:	d119      	bne.n	800543a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	60bb      	str	r3, [r7, #8]
   return(result);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f023 0310 	bic.w	r3, r3, #16
 800541c:	647b      	str	r3, [r7, #68]	; 0x44
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005426:	61ba      	str	r2, [r7, #24]
 8005428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6979      	ldr	r1, [r7, #20]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	613b      	str	r3, [r7, #16]
   return(result);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005448:	bf00      	nop
 800544a:	3754      	adds	r7, #84	; 0x54
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005458:	b09f      	sub	sp, #124	; 0x7c
 800545a:	af00      	add	r7, sp, #0
 800545c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	68d9      	ldr	r1, [r3, #12]
 800546c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	ea40 0301 	orr.w	r3, r0, r1
 8005474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	431a      	orrs	r2, r3
 8005480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	431a      	orrs	r2, r3
 8005486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	4313      	orrs	r3, r2
 800548c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005498:	f021 010c 	bic.w	r1, r1, #12
 800549c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a2:	430b      	orrs	r3, r1
 80054a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	6999      	ldr	r1, [r3, #24]
 80054b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	ea40 0301 	orr.w	r3, r0, r1
 80054bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4bc5      	ldr	r3, [pc, #788]	; (80057d8 <UART_SetConfig+0x384>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d004      	beq.n	80054d2 <UART_SetConfig+0x7e>
 80054c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4bc3      	ldr	r3, [pc, #780]	; (80057dc <UART_SetConfig+0x388>)
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d103      	bne.n	80054da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054d2:	f7ff fd91 	bl	8004ff8 <HAL_RCC_GetPCLK2Freq>
 80054d6:	6778      	str	r0, [r7, #116]	; 0x74
 80054d8:	e002      	b.n	80054e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054da:	f7ff fd79 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80054de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e8:	f040 80b6 	bne.w	8005658 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ee:	461c      	mov	r4, r3
 80054f0:	f04f 0500 	mov.w	r5, #0
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	6439      	str	r1, [r7, #64]	; 0x40
 80054fc:	415b      	adcs	r3, r3
 80054fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005500:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005504:	1912      	adds	r2, r2, r4
 8005506:	eb45 0303 	adc.w	r3, r5, r3
 800550a:	f04f 0000 	mov.w	r0, #0
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	00d9      	lsls	r1, r3, #3
 8005514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005518:	00d0      	lsls	r0, r2, #3
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	1911      	adds	r1, r2, r4
 8005520:	6639      	str	r1, [r7, #96]	; 0x60
 8005522:	416b      	adcs	r3, r5
 8005524:	667b      	str	r3, [r7, #100]	; 0x64
 8005526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	461a      	mov	r2, r3
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	1891      	adds	r1, r2, r2
 8005532:	63b9      	str	r1, [r7, #56]	; 0x38
 8005534:	415b      	adcs	r3, r3
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800553c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005540:	f7fb fabc 	bl	8000abc <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4ba5      	ldr	r3, [pc, #660]	; (80057e0 <UART_SetConfig+0x38c>)
 800554a:	fba3 2302 	umull	r2, r3, r3, r2
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	011e      	lsls	r6, r3, #4
 8005552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005554:	461c      	mov	r4, r3
 8005556:	f04f 0500 	mov.w	r5, #0
 800555a:	4622      	mov	r2, r4
 800555c:	462b      	mov	r3, r5
 800555e:	1891      	adds	r1, r2, r2
 8005560:	6339      	str	r1, [r7, #48]	; 0x30
 8005562:	415b      	adcs	r3, r3
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
 8005566:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800556a:	1912      	adds	r2, r2, r4
 800556c:	eb45 0303 	adc.w	r3, r5, r3
 8005570:	f04f 0000 	mov.w	r0, #0
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	00d9      	lsls	r1, r3, #3
 800557a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800557e:	00d0      	lsls	r0, r2, #3
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	1911      	adds	r1, r2, r4
 8005586:	65b9      	str	r1, [r7, #88]	; 0x58
 8005588:	416b      	adcs	r3, r5
 800558a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800558c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	461a      	mov	r2, r3
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	1891      	adds	r1, r2, r2
 8005598:	62b9      	str	r1, [r7, #40]	; 0x28
 800559a:	415b      	adcs	r3, r3
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80055a6:	f7fb fa89 	bl	8000abc <__aeabi_uldivmod>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4b8c      	ldr	r3, [pc, #560]	; (80057e0 <UART_SetConfig+0x38c>)
 80055b0:	fba3 1302 	umull	r1, r3, r3, r2
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2164      	movs	r1, #100	; 0x64
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a87      	ldr	r2, [pc, #540]	; (80057e0 <UART_SetConfig+0x38c>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055d0:	441e      	add	r6, r3
 80055d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d4:	4618      	mov	r0, r3
 80055d6:	f04f 0100 	mov.w	r1, #0
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	1894      	adds	r4, r2, r2
 80055e0:	623c      	str	r4, [r7, #32]
 80055e2:	415b      	adcs	r3, r3
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ea:	1812      	adds	r2, r2, r0
 80055ec:	eb41 0303 	adc.w	r3, r1, r3
 80055f0:	f04f 0400 	mov.w	r4, #0
 80055f4:	f04f 0500 	mov.w	r5, #0
 80055f8:	00dd      	lsls	r5, r3, #3
 80055fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055fe:	00d4      	lsls	r4, r2, #3
 8005600:	4622      	mov	r2, r4
 8005602:	462b      	mov	r3, r5
 8005604:	1814      	adds	r4, r2, r0
 8005606:	653c      	str	r4, [r7, #80]	; 0x50
 8005608:	414b      	adcs	r3, r1
 800560a:	657b      	str	r3, [r7, #84]	; 0x54
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	461a      	mov	r2, r3
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	1891      	adds	r1, r2, r2
 8005618:	61b9      	str	r1, [r7, #24]
 800561a:	415b      	adcs	r3, r3
 800561c:	61fb      	str	r3, [r7, #28]
 800561e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005622:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005626:	f7fb fa49 	bl	8000abc <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4b6c      	ldr	r3, [pc, #432]	; (80057e0 <UART_SetConfig+0x38c>)
 8005630:	fba3 1302 	umull	r1, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	2164      	movs	r1, #100	; 0x64
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	3332      	adds	r3, #50	; 0x32
 8005642:	4a67      	ldr	r2, [pc, #412]	; (80057e0 <UART_SetConfig+0x38c>)
 8005644:	fba2 2303 	umull	r2, r3, r2, r3
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	f003 0207 	and.w	r2, r3, #7
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4432      	add	r2, r6
 8005654:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005656:	e0b9      	b.n	80057cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800565a:	461c      	mov	r4, r3
 800565c:	f04f 0500 	mov.w	r5, #0
 8005660:	4622      	mov	r2, r4
 8005662:	462b      	mov	r3, r5
 8005664:	1891      	adds	r1, r2, r2
 8005666:	6139      	str	r1, [r7, #16]
 8005668:	415b      	adcs	r3, r3
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005670:	1912      	adds	r2, r2, r4
 8005672:	eb45 0303 	adc.w	r3, r5, r3
 8005676:	f04f 0000 	mov.w	r0, #0
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	00d9      	lsls	r1, r3, #3
 8005680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005684:	00d0      	lsls	r0, r2, #3
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	eb12 0804 	adds.w	r8, r2, r4
 800568e:	eb43 0905 	adc.w	r9, r3, r5
 8005692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	f04f 0100 	mov.w	r1, #0
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	008b      	lsls	r3, r1, #2
 80056a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056aa:	0082      	lsls	r2, r0, #2
 80056ac:	4640      	mov	r0, r8
 80056ae:	4649      	mov	r1, r9
 80056b0:	f7fb fa04 	bl	8000abc <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4b49      	ldr	r3, [pc, #292]	; (80057e0 <UART_SetConfig+0x38c>)
 80056ba:	fba3 2302 	umull	r2, r3, r3, r2
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	011e      	lsls	r6, r3, #4
 80056c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c4:	4618      	mov	r0, r3
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	1894      	adds	r4, r2, r2
 80056d0:	60bc      	str	r4, [r7, #8]
 80056d2:	415b      	adcs	r3, r3
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056da:	1812      	adds	r2, r2, r0
 80056dc:	eb41 0303 	adc.w	r3, r1, r3
 80056e0:	f04f 0400 	mov.w	r4, #0
 80056e4:	f04f 0500 	mov.w	r5, #0
 80056e8:	00dd      	lsls	r5, r3, #3
 80056ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056ee:	00d4      	lsls	r4, r2, #3
 80056f0:	4622      	mov	r2, r4
 80056f2:	462b      	mov	r3, r5
 80056f4:	1814      	adds	r4, r2, r0
 80056f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80056f8:	414b      	adcs	r3, r1
 80056fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	f04f 0100 	mov.w	r1, #0
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	008b      	lsls	r3, r1, #2
 8005710:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005714:	0082      	lsls	r2, r0, #2
 8005716:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800571a:	f7fb f9cf 	bl	8000abc <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4b2f      	ldr	r3, [pc, #188]	; (80057e0 <UART_SetConfig+0x38c>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <UART_SetConfig+0x38c>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005742:	441e      	add	r6, r3
 8005744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005746:	4618      	mov	r0, r3
 8005748:	f04f 0100 	mov.w	r1, #0
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	1894      	adds	r4, r2, r2
 8005752:	603c      	str	r4, [r7, #0]
 8005754:	415b      	adcs	r3, r3
 8005756:	607b      	str	r3, [r7, #4]
 8005758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800575c:	1812      	adds	r2, r2, r0
 800575e:	eb41 0303 	adc.w	r3, r1, r3
 8005762:	f04f 0400 	mov.w	r4, #0
 8005766:	f04f 0500 	mov.w	r5, #0
 800576a:	00dd      	lsls	r5, r3, #3
 800576c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005770:	00d4      	lsls	r4, r2, #3
 8005772:	4622      	mov	r2, r4
 8005774:	462b      	mov	r3, r5
 8005776:	eb12 0a00 	adds.w	sl, r2, r0
 800577a:	eb43 0b01 	adc.w	fp, r3, r1
 800577e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4618      	mov	r0, r3
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	008b      	lsls	r3, r1, #2
 8005792:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005796:	0082      	lsls	r2, r0, #2
 8005798:	4650      	mov	r0, sl
 800579a:	4659      	mov	r1, fp
 800579c:	f7fb f98e 	bl	8000abc <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <UART_SetConfig+0x38c>)
 80057a6:	fba3 1302 	umull	r1, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2164      	movs	r1, #100	; 0x64
 80057ae:	fb01 f303 	mul.w	r3, r1, r3
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	3332      	adds	r3, #50	; 0x32
 80057b8:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <UART_SetConfig+0x38c>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4432      	add	r2, r6
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	377c      	adds	r7, #124	; 0x7c
 80057d0:	46bd      	mov	sp, r7
 80057d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d6:	bf00      	nop
 80057d8:	40011000 	.word	0x40011000
 80057dc:	40011400 	.word	0x40011400
 80057e0:	51eb851f 	.word	0x51eb851f

080057e4 <__errno>:
 80057e4:	4b01      	ldr	r3, [pc, #4]	; (80057ec <__errno+0x8>)
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <__libc_init_array>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4d0d      	ldr	r5, [pc, #52]	; (8005828 <__libc_init_array+0x38>)
 80057f4:	4c0d      	ldr	r4, [pc, #52]	; (800582c <__libc_init_array+0x3c>)
 80057f6:	1b64      	subs	r4, r4, r5
 80057f8:	10a4      	asrs	r4, r4, #2
 80057fa:	2600      	movs	r6, #0
 80057fc:	42a6      	cmp	r6, r4
 80057fe:	d109      	bne.n	8005814 <__libc_init_array+0x24>
 8005800:	4d0b      	ldr	r5, [pc, #44]	; (8005830 <__libc_init_array+0x40>)
 8005802:	4c0c      	ldr	r4, [pc, #48]	; (8005834 <__libc_init_array+0x44>)
 8005804:	f000 fc4e 	bl	80060a4 <_init>
 8005808:	1b64      	subs	r4, r4, r5
 800580a:	10a4      	asrs	r4, r4, #2
 800580c:	2600      	movs	r6, #0
 800580e:	42a6      	cmp	r6, r4
 8005810:	d105      	bne.n	800581e <__libc_init_array+0x2e>
 8005812:	bd70      	pop	{r4, r5, r6, pc}
 8005814:	f855 3b04 	ldr.w	r3, [r5], #4
 8005818:	4798      	blx	r3
 800581a:	3601      	adds	r6, #1
 800581c:	e7ee      	b.n	80057fc <__libc_init_array+0xc>
 800581e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005822:	4798      	blx	r3
 8005824:	3601      	adds	r6, #1
 8005826:	e7f2      	b.n	800580e <__libc_init_array+0x1e>
 8005828:	08006160 	.word	0x08006160
 800582c:	08006160 	.word	0x08006160
 8005830:	08006160 	.word	0x08006160
 8005834:	08006164 	.word	0x08006164

08005838 <memcpy>:
 8005838:	440a      	add	r2, r1
 800583a:	4291      	cmp	r1, r2
 800583c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005840:	d100      	bne.n	8005844 <memcpy+0xc>
 8005842:	4770      	bx	lr
 8005844:	b510      	push	{r4, lr}
 8005846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800584a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800584e:	4291      	cmp	r1, r2
 8005850:	d1f9      	bne.n	8005846 <memcpy+0xe>
 8005852:	bd10      	pop	{r4, pc}

08005854 <memset>:
 8005854:	4402      	add	r2, r0
 8005856:	4603      	mov	r3, r0
 8005858:	4293      	cmp	r3, r2
 800585a:	d100      	bne.n	800585e <memset+0xa>
 800585c:	4770      	bx	lr
 800585e:	f803 1b01 	strb.w	r1, [r3], #1
 8005862:	e7f9      	b.n	8005858 <memset+0x4>

08005864 <siprintf>:
 8005864:	b40e      	push	{r1, r2, r3}
 8005866:	b500      	push	{lr}
 8005868:	b09c      	sub	sp, #112	; 0x70
 800586a:	ab1d      	add	r3, sp, #116	; 0x74
 800586c:	9002      	str	r0, [sp, #8]
 800586e:	9006      	str	r0, [sp, #24]
 8005870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005874:	4809      	ldr	r0, [pc, #36]	; (800589c <siprintf+0x38>)
 8005876:	9107      	str	r1, [sp, #28]
 8005878:	9104      	str	r1, [sp, #16]
 800587a:	4909      	ldr	r1, [pc, #36]	; (80058a0 <siprintf+0x3c>)
 800587c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005880:	9105      	str	r1, [sp, #20]
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	a902      	add	r1, sp, #8
 8005888:	f000 f868 	bl	800595c <_svfiprintf_r>
 800588c:	9b02      	ldr	r3, [sp, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	b01c      	add	sp, #112	; 0x70
 8005894:	f85d eb04 	ldr.w	lr, [sp], #4
 8005898:	b003      	add	sp, #12
 800589a:	4770      	bx	lr
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	ffff0208 	.word	0xffff0208

080058a4 <__ssputs_r>:
 80058a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	688e      	ldr	r6, [r1, #8]
 80058aa:	429e      	cmp	r6, r3
 80058ac:	4682      	mov	sl, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	4690      	mov	r8, r2
 80058b2:	461f      	mov	r7, r3
 80058b4:	d838      	bhi.n	8005928 <__ssputs_r+0x84>
 80058b6:	898a      	ldrh	r2, [r1, #12]
 80058b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058bc:	d032      	beq.n	8005924 <__ssputs_r+0x80>
 80058be:	6825      	ldr	r5, [r4, #0]
 80058c0:	6909      	ldr	r1, [r1, #16]
 80058c2:	eba5 0901 	sub.w	r9, r5, r1
 80058c6:	6965      	ldr	r5, [r4, #20]
 80058c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058d0:	3301      	adds	r3, #1
 80058d2:	444b      	add	r3, r9
 80058d4:	106d      	asrs	r5, r5, #1
 80058d6:	429d      	cmp	r5, r3
 80058d8:	bf38      	it	cc
 80058da:	461d      	movcc	r5, r3
 80058dc:	0553      	lsls	r3, r2, #21
 80058de:	d531      	bpl.n	8005944 <__ssputs_r+0xa0>
 80058e0:	4629      	mov	r1, r5
 80058e2:	f000 fb39 	bl	8005f58 <_malloc_r>
 80058e6:	4606      	mov	r6, r0
 80058e8:	b950      	cbnz	r0, 8005900 <__ssputs_r+0x5c>
 80058ea:	230c      	movs	r3, #12
 80058ec:	f8ca 3000 	str.w	r3, [sl]
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f6:	81a3      	strh	r3, [r4, #12]
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	6921      	ldr	r1, [r4, #16]
 8005902:	464a      	mov	r2, r9
 8005904:	f7ff ff98 	bl	8005838 <memcpy>
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800590e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	6126      	str	r6, [r4, #16]
 8005916:	6165      	str	r5, [r4, #20]
 8005918:	444e      	add	r6, r9
 800591a:	eba5 0509 	sub.w	r5, r5, r9
 800591e:	6026      	str	r6, [r4, #0]
 8005920:	60a5      	str	r5, [r4, #8]
 8005922:	463e      	mov	r6, r7
 8005924:	42be      	cmp	r6, r7
 8005926:	d900      	bls.n	800592a <__ssputs_r+0x86>
 8005928:	463e      	mov	r6, r7
 800592a:	4632      	mov	r2, r6
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	4641      	mov	r1, r8
 8005930:	f000 faa8 	bl	8005e84 <memmove>
 8005934:	68a3      	ldr	r3, [r4, #8]
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	4432      	add	r2, r6
 800593c:	60a3      	str	r3, [r4, #8]
 800593e:	6022      	str	r2, [r4, #0]
 8005940:	2000      	movs	r0, #0
 8005942:	e7db      	b.n	80058fc <__ssputs_r+0x58>
 8005944:	462a      	mov	r2, r5
 8005946:	f000 fb61 	bl	800600c <_realloc_r>
 800594a:	4606      	mov	r6, r0
 800594c:	2800      	cmp	r0, #0
 800594e:	d1e1      	bne.n	8005914 <__ssputs_r+0x70>
 8005950:	6921      	ldr	r1, [r4, #16]
 8005952:	4650      	mov	r0, sl
 8005954:	f000 fab0 	bl	8005eb8 <_free_r>
 8005958:	e7c7      	b.n	80058ea <__ssputs_r+0x46>
	...

0800595c <_svfiprintf_r>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	4698      	mov	r8, r3
 8005962:	898b      	ldrh	r3, [r1, #12]
 8005964:	061b      	lsls	r3, r3, #24
 8005966:	b09d      	sub	sp, #116	; 0x74
 8005968:	4607      	mov	r7, r0
 800596a:	460d      	mov	r5, r1
 800596c:	4614      	mov	r4, r2
 800596e:	d50e      	bpl.n	800598e <_svfiprintf_r+0x32>
 8005970:	690b      	ldr	r3, [r1, #16]
 8005972:	b963      	cbnz	r3, 800598e <_svfiprintf_r+0x32>
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	f000 faef 	bl	8005f58 <_malloc_r>
 800597a:	6028      	str	r0, [r5, #0]
 800597c:	6128      	str	r0, [r5, #16]
 800597e:	b920      	cbnz	r0, 800598a <_svfiprintf_r+0x2e>
 8005980:	230c      	movs	r3, #12
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	e0d1      	b.n	8005b2e <_svfiprintf_r+0x1d2>
 800598a:	2340      	movs	r3, #64	; 0x40
 800598c:	616b      	str	r3, [r5, #20]
 800598e:	2300      	movs	r3, #0
 8005990:	9309      	str	r3, [sp, #36]	; 0x24
 8005992:	2320      	movs	r3, #32
 8005994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005998:	f8cd 800c 	str.w	r8, [sp, #12]
 800599c:	2330      	movs	r3, #48	; 0x30
 800599e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b48 <_svfiprintf_r+0x1ec>
 80059a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059a6:	f04f 0901 	mov.w	r9, #1
 80059aa:	4623      	mov	r3, r4
 80059ac:	469a      	mov	sl, r3
 80059ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059b2:	b10a      	cbz	r2, 80059b8 <_svfiprintf_r+0x5c>
 80059b4:	2a25      	cmp	r2, #37	; 0x25
 80059b6:	d1f9      	bne.n	80059ac <_svfiprintf_r+0x50>
 80059b8:	ebba 0b04 	subs.w	fp, sl, r4
 80059bc:	d00b      	beq.n	80059d6 <_svfiprintf_r+0x7a>
 80059be:	465b      	mov	r3, fp
 80059c0:	4622      	mov	r2, r4
 80059c2:	4629      	mov	r1, r5
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff ff6d 	bl	80058a4 <__ssputs_r>
 80059ca:	3001      	adds	r0, #1
 80059cc:	f000 80aa 	beq.w	8005b24 <_svfiprintf_r+0x1c8>
 80059d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059d2:	445a      	add	r2, fp
 80059d4:	9209      	str	r2, [sp, #36]	; 0x24
 80059d6:	f89a 3000 	ldrb.w	r3, [sl]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80a2 	beq.w	8005b24 <_svfiprintf_r+0x1c8>
 80059e0:	2300      	movs	r3, #0
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ea:	f10a 0a01 	add.w	sl, sl, #1
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	9307      	str	r3, [sp, #28]
 80059f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059f6:	931a      	str	r3, [sp, #104]	; 0x68
 80059f8:	4654      	mov	r4, sl
 80059fa:	2205      	movs	r2, #5
 80059fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a00:	4851      	ldr	r0, [pc, #324]	; (8005b48 <_svfiprintf_r+0x1ec>)
 8005a02:	f7fa fbed 	bl	80001e0 <memchr>
 8005a06:	9a04      	ldr	r2, [sp, #16]
 8005a08:	b9d8      	cbnz	r0, 8005a42 <_svfiprintf_r+0xe6>
 8005a0a:	06d0      	lsls	r0, r2, #27
 8005a0c:	bf44      	itt	mi
 8005a0e:	2320      	movmi	r3, #32
 8005a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a14:	0711      	lsls	r1, r2, #28
 8005a16:	bf44      	itt	mi
 8005a18:	232b      	movmi	r3, #43	; 0x2b
 8005a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a22:	2b2a      	cmp	r3, #42	; 0x2a
 8005a24:	d015      	beq.n	8005a52 <_svfiprintf_r+0xf6>
 8005a26:	9a07      	ldr	r2, [sp, #28]
 8005a28:	4654      	mov	r4, sl
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f04f 0c0a 	mov.w	ip, #10
 8005a30:	4621      	mov	r1, r4
 8005a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a36:	3b30      	subs	r3, #48	; 0x30
 8005a38:	2b09      	cmp	r3, #9
 8005a3a:	d94e      	bls.n	8005ada <_svfiprintf_r+0x17e>
 8005a3c:	b1b0      	cbz	r0, 8005a6c <_svfiprintf_r+0x110>
 8005a3e:	9207      	str	r2, [sp, #28]
 8005a40:	e014      	b.n	8005a6c <_svfiprintf_r+0x110>
 8005a42:	eba0 0308 	sub.w	r3, r0, r8
 8005a46:	fa09 f303 	lsl.w	r3, r9, r3
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	46a2      	mov	sl, r4
 8005a50:	e7d2      	b.n	80059f8 <_svfiprintf_r+0x9c>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	1d19      	adds	r1, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	9103      	str	r1, [sp, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bfbb      	ittet	lt
 8005a5e:	425b      	neglt	r3, r3
 8005a60:	f042 0202 	orrlt.w	r2, r2, #2
 8005a64:	9307      	strge	r3, [sp, #28]
 8005a66:	9307      	strlt	r3, [sp, #28]
 8005a68:	bfb8      	it	lt
 8005a6a:	9204      	strlt	r2, [sp, #16]
 8005a6c:	7823      	ldrb	r3, [r4, #0]
 8005a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a70:	d10c      	bne.n	8005a8c <_svfiprintf_r+0x130>
 8005a72:	7863      	ldrb	r3, [r4, #1]
 8005a74:	2b2a      	cmp	r3, #42	; 0x2a
 8005a76:	d135      	bne.n	8005ae4 <_svfiprintf_r+0x188>
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	1d1a      	adds	r2, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	9203      	str	r2, [sp, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bfb8      	it	lt
 8005a84:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a88:	3402      	adds	r4, #2
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b58 <_svfiprintf_r+0x1fc>
 8005a90:	7821      	ldrb	r1, [r4, #0]
 8005a92:	2203      	movs	r2, #3
 8005a94:	4650      	mov	r0, sl
 8005a96:	f7fa fba3 	bl	80001e0 <memchr>
 8005a9a:	b140      	cbz	r0, 8005aae <_svfiprintf_r+0x152>
 8005a9c:	2340      	movs	r3, #64	; 0x40
 8005a9e:	eba0 000a 	sub.w	r0, r0, sl
 8005aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8005aa6:	9b04      	ldr	r3, [sp, #16]
 8005aa8:	4303      	orrs	r3, r0
 8005aaa:	3401      	adds	r4, #1
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab2:	4826      	ldr	r0, [pc, #152]	; (8005b4c <_svfiprintf_r+0x1f0>)
 8005ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ab8:	2206      	movs	r2, #6
 8005aba:	f7fa fb91 	bl	80001e0 <memchr>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d038      	beq.n	8005b34 <_svfiprintf_r+0x1d8>
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <_svfiprintf_r+0x1f4>)
 8005ac4:	bb1b      	cbnz	r3, 8005b0e <_svfiprintf_r+0x1b2>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	3307      	adds	r3, #7
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	3308      	adds	r3, #8
 8005ad0:	9303      	str	r3, [sp, #12]
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	4433      	add	r3, r6
 8005ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad8:	e767      	b.n	80059aa <_svfiprintf_r+0x4e>
 8005ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ade:	460c      	mov	r4, r1
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	e7a5      	b.n	8005a30 <_svfiprintf_r+0xd4>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	3401      	adds	r4, #1
 8005ae8:	9305      	str	r3, [sp, #20]
 8005aea:	4619      	mov	r1, r3
 8005aec:	f04f 0c0a 	mov.w	ip, #10
 8005af0:	4620      	mov	r0, r4
 8005af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005af6:	3a30      	subs	r2, #48	; 0x30
 8005af8:	2a09      	cmp	r2, #9
 8005afa:	d903      	bls.n	8005b04 <_svfiprintf_r+0x1a8>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0c5      	beq.n	8005a8c <_svfiprintf_r+0x130>
 8005b00:	9105      	str	r1, [sp, #20]
 8005b02:	e7c3      	b.n	8005a8c <_svfiprintf_r+0x130>
 8005b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b08:	4604      	mov	r4, r0
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e7f0      	b.n	8005af0 <_svfiprintf_r+0x194>
 8005b0e:	ab03      	add	r3, sp, #12
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	462a      	mov	r2, r5
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <_svfiprintf_r+0x1f8>)
 8005b16:	a904      	add	r1, sp, #16
 8005b18:	4638      	mov	r0, r7
 8005b1a:	f3af 8000 	nop.w
 8005b1e:	1c42      	adds	r2, r0, #1
 8005b20:	4606      	mov	r6, r0
 8005b22:	d1d6      	bne.n	8005ad2 <_svfiprintf_r+0x176>
 8005b24:	89ab      	ldrh	r3, [r5, #12]
 8005b26:	065b      	lsls	r3, r3, #25
 8005b28:	f53f af2c 	bmi.w	8005984 <_svfiprintf_r+0x28>
 8005b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b2e:	b01d      	add	sp, #116	; 0x74
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	ab03      	add	r3, sp, #12
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <_svfiprintf_r+0x1f8>)
 8005b3c:	a904      	add	r1, sp, #16
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f000 f87a 	bl	8005c38 <_printf_i>
 8005b44:	e7eb      	b.n	8005b1e <_svfiprintf_r+0x1c2>
 8005b46:	bf00      	nop
 8005b48:	08006124 	.word	0x08006124
 8005b4c:	0800612e 	.word	0x0800612e
 8005b50:	00000000 	.word	0x00000000
 8005b54:	080058a5 	.word	0x080058a5
 8005b58:	0800612a 	.word	0x0800612a

08005b5c <_printf_common>:
 8005b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b60:	4616      	mov	r6, r2
 8005b62:	4699      	mov	r9, r3
 8005b64:	688a      	ldr	r2, [r1, #8]
 8005b66:	690b      	ldr	r3, [r1, #16]
 8005b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	bfb8      	it	lt
 8005b70:	4613      	movlt	r3, r2
 8005b72:	6033      	str	r3, [r6, #0]
 8005b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b78:	4607      	mov	r7, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	b10a      	cbz	r2, 8005b82 <_printf_common+0x26>
 8005b7e:	3301      	adds	r3, #1
 8005b80:	6033      	str	r3, [r6, #0]
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	0699      	lsls	r1, r3, #26
 8005b86:	bf42      	ittt	mi
 8005b88:	6833      	ldrmi	r3, [r6, #0]
 8005b8a:	3302      	addmi	r3, #2
 8005b8c:	6033      	strmi	r3, [r6, #0]
 8005b8e:	6825      	ldr	r5, [r4, #0]
 8005b90:	f015 0506 	ands.w	r5, r5, #6
 8005b94:	d106      	bne.n	8005ba4 <_printf_common+0x48>
 8005b96:	f104 0a19 	add.w	sl, r4, #25
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	6832      	ldr	r2, [r6, #0]
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dc26      	bgt.n	8005bf2 <_printf_common+0x96>
 8005ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ba8:	1e13      	subs	r3, r2, #0
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	bf18      	it	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	0692      	lsls	r2, r2, #26
 8005bb2:	d42b      	bmi.n	8005c0c <_printf_common+0xb0>
 8005bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bb8:	4649      	mov	r1, r9
 8005bba:	4638      	mov	r0, r7
 8005bbc:	47c0      	blx	r8
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d01e      	beq.n	8005c00 <_printf_common+0xa4>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	68e5      	ldr	r5, [r4, #12]
 8005bc6:	6832      	ldr	r2, [r6, #0]
 8005bc8:	f003 0306 	and.w	r3, r3, #6
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	bf08      	it	eq
 8005bd0:	1aad      	subeq	r5, r5, r2
 8005bd2:	68a3      	ldr	r3, [r4, #8]
 8005bd4:	6922      	ldr	r2, [r4, #16]
 8005bd6:	bf0c      	ite	eq
 8005bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bdc:	2500      	movne	r5, #0
 8005bde:	4293      	cmp	r3, r2
 8005be0:	bfc4      	itt	gt
 8005be2:	1a9b      	subgt	r3, r3, r2
 8005be4:	18ed      	addgt	r5, r5, r3
 8005be6:	2600      	movs	r6, #0
 8005be8:	341a      	adds	r4, #26
 8005bea:	42b5      	cmp	r5, r6
 8005bec:	d11a      	bne.n	8005c24 <_printf_common+0xc8>
 8005bee:	2000      	movs	r0, #0
 8005bf0:	e008      	b.n	8005c04 <_printf_common+0xa8>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	47c0      	blx	r8
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d103      	bne.n	8005c08 <_printf_common+0xac>
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	3501      	adds	r5, #1
 8005c0a:	e7c6      	b.n	8005b9a <_printf_common+0x3e>
 8005c0c:	18e1      	adds	r1, r4, r3
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	2030      	movs	r0, #48	; 0x30
 8005c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c16:	4422      	add	r2, r4
 8005c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c20:	3302      	adds	r3, #2
 8005c22:	e7c7      	b.n	8005bb4 <_printf_common+0x58>
 8005c24:	2301      	movs	r3, #1
 8005c26:	4622      	mov	r2, r4
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	47c0      	blx	r8
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d0e6      	beq.n	8005c00 <_printf_common+0xa4>
 8005c32:	3601      	adds	r6, #1
 8005c34:	e7d9      	b.n	8005bea <_printf_common+0x8e>
	...

08005c38 <_printf_i>:
 8005c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	4691      	mov	r9, r2
 8005c40:	7e27      	ldrb	r7, [r4, #24]
 8005c42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c44:	2f78      	cmp	r7, #120	; 0x78
 8005c46:	4680      	mov	r8, r0
 8005c48:	469a      	mov	sl, r3
 8005c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c4e:	d807      	bhi.n	8005c60 <_printf_i+0x28>
 8005c50:	2f62      	cmp	r7, #98	; 0x62
 8005c52:	d80a      	bhi.n	8005c6a <_printf_i+0x32>
 8005c54:	2f00      	cmp	r7, #0
 8005c56:	f000 80d8 	beq.w	8005e0a <_printf_i+0x1d2>
 8005c5a:	2f58      	cmp	r7, #88	; 0x58
 8005c5c:	f000 80a3 	beq.w	8005da6 <_printf_i+0x16e>
 8005c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c68:	e03a      	b.n	8005ce0 <_printf_i+0xa8>
 8005c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c6e:	2b15      	cmp	r3, #21
 8005c70:	d8f6      	bhi.n	8005c60 <_printf_i+0x28>
 8005c72:	a001      	add	r0, pc, #4	; (adr r0, 8005c78 <_printf_i+0x40>)
 8005c74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c78:	08005cd1 	.word	0x08005cd1
 8005c7c:	08005ce5 	.word	0x08005ce5
 8005c80:	08005c61 	.word	0x08005c61
 8005c84:	08005c61 	.word	0x08005c61
 8005c88:	08005c61 	.word	0x08005c61
 8005c8c:	08005c61 	.word	0x08005c61
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005c61 	.word	0x08005c61
 8005c98:	08005c61 	.word	0x08005c61
 8005c9c:	08005c61 	.word	0x08005c61
 8005ca0:	08005c61 	.word	0x08005c61
 8005ca4:	08005df1 	.word	0x08005df1
 8005ca8:	08005d15 	.word	0x08005d15
 8005cac:	08005dd3 	.word	0x08005dd3
 8005cb0:	08005c61 	.word	0x08005c61
 8005cb4:	08005c61 	.word	0x08005c61
 8005cb8:	08005e13 	.word	0x08005e13
 8005cbc:	08005c61 	.word	0x08005c61
 8005cc0:	08005d15 	.word	0x08005d15
 8005cc4:	08005c61 	.word	0x08005c61
 8005cc8:	08005c61 	.word	0x08005c61
 8005ccc:	08005ddb 	.word	0x08005ddb
 8005cd0:	680b      	ldr	r3, [r1, #0]
 8005cd2:	1d1a      	adds	r2, r3, #4
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	600a      	str	r2, [r1, #0]
 8005cd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0a3      	b.n	8005e2c <_printf_i+0x1f4>
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	6808      	ldr	r0, [r1, #0]
 8005ce8:	062e      	lsls	r6, r5, #24
 8005cea:	f100 0304 	add.w	r3, r0, #4
 8005cee:	d50a      	bpl.n	8005d06 <_printf_i+0xce>
 8005cf0:	6805      	ldr	r5, [r0, #0]
 8005cf2:	600b      	str	r3, [r1, #0]
 8005cf4:	2d00      	cmp	r5, #0
 8005cf6:	da03      	bge.n	8005d00 <_printf_i+0xc8>
 8005cf8:	232d      	movs	r3, #45	; 0x2d
 8005cfa:	426d      	negs	r5, r5
 8005cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d00:	485e      	ldr	r0, [pc, #376]	; (8005e7c <_printf_i+0x244>)
 8005d02:	230a      	movs	r3, #10
 8005d04:	e019      	b.n	8005d3a <_printf_i+0x102>
 8005d06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d0a:	6805      	ldr	r5, [r0, #0]
 8005d0c:	600b      	str	r3, [r1, #0]
 8005d0e:	bf18      	it	ne
 8005d10:	b22d      	sxthne	r5, r5
 8005d12:	e7ef      	b.n	8005cf4 <_printf_i+0xbc>
 8005d14:	680b      	ldr	r3, [r1, #0]
 8005d16:	6825      	ldr	r5, [r4, #0]
 8005d18:	1d18      	adds	r0, r3, #4
 8005d1a:	6008      	str	r0, [r1, #0]
 8005d1c:	0628      	lsls	r0, r5, #24
 8005d1e:	d501      	bpl.n	8005d24 <_printf_i+0xec>
 8005d20:	681d      	ldr	r5, [r3, #0]
 8005d22:	e002      	b.n	8005d2a <_printf_i+0xf2>
 8005d24:	0669      	lsls	r1, r5, #25
 8005d26:	d5fb      	bpl.n	8005d20 <_printf_i+0xe8>
 8005d28:	881d      	ldrh	r5, [r3, #0]
 8005d2a:	4854      	ldr	r0, [pc, #336]	; (8005e7c <_printf_i+0x244>)
 8005d2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d2e:	bf0c      	ite	eq
 8005d30:	2308      	moveq	r3, #8
 8005d32:	230a      	movne	r3, #10
 8005d34:	2100      	movs	r1, #0
 8005d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d3a:	6866      	ldr	r6, [r4, #4]
 8005d3c:	60a6      	str	r6, [r4, #8]
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	bfa2      	ittt	ge
 8005d42:	6821      	ldrge	r1, [r4, #0]
 8005d44:	f021 0104 	bicge.w	r1, r1, #4
 8005d48:	6021      	strge	r1, [r4, #0]
 8005d4a:	b90d      	cbnz	r5, 8005d50 <_printf_i+0x118>
 8005d4c:	2e00      	cmp	r6, #0
 8005d4e:	d04d      	beq.n	8005dec <_printf_i+0x1b4>
 8005d50:	4616      	mov	r6, r2
 8005d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d56:	fb03 5711 	mls	r7, r3, r1, r5
 8005d5a:	5dc7      	ldrb	r7, [r0, r7]
 8005d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d60:	462f      	mov	r7, r5
 8005d62:	42bb      	cmp	r3, r7
 8005d64:	460d      	mov	r5, r1
 8005d66:	d9f4      	bls.n	8005d52 <_printf_i+0x11a>
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d10b      	bne.n	8005d84 <_printf_i+0x14c>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	07df      	lsls	r7, r3, #31
 8005d70:	d508      	bpl.n	8005d84 <_printf_i+0x14c>
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	6861      	ldr	r1, [r4, #4]
 8005d76:	4299      	cmp	r1, r3
 8005d78:	bfde      	ittt	le
 8005d7a:	2330      	movle	r3, #48	; 0x30
 8005d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d84:	1b92      	subs	r2, r2, r6
 8005d86:	6122      	str	r2, [r4, #16]
 8005d88:	f8cd a000 	str.w	sl, [sp]
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	aa03      	add	r2, sp, #12
 8005d90:	4621      	mov	r1, r4
 8005d92:	4640      	mov	r0, r8
 8005d94:	f7ff fee2 	bl	8005b5c <_printf_common>
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d14c      	bne.n	8005e36 <_printf_i+0x1fe>
 8005d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005da0:	b004      	add	sp, #16
 8005da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da6:	4835      	ldr	r0, [pc, #212]	; (8005e7c <_printf_i+0x244>)
 8005da8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	680e      	ldr	r6, [r1, #0]
 8005db0:	061f      	lsls	r7, r3, #24
 8005db2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005db6:	600e      	str	r6, [r1, #0]
 8005db8:	d514      	bpl.n	8005de4 <_printf_i+0x1ac>
 8005dba:	07d9      	lsls	r1, r3, #31
 8005dbc:	bf44      	itt	mi
 8005dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005dc2:	6023      	strmi	r3, [r4, #0]
 8005dc4:	b91d      	cbnz	r5, 8005dce <_printf_i+0x196>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	f023 0320 	bic.w	r3, r3, #32
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	2310      	movs	r3, #16
 8005dd0:	e7b0      	b.n	8005d34 <_printf_i+0xfc>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	f043 0320 	orr.w	r3, r3, #32
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	2378      	movs	r3, #120	; 0x78
 8005ddc:	4828      	ldr	r0, [pc, #160]	; (8005e80 <_printf_i+0x248>)
 8005dde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005de2:	e7e3      	b.n	8005dac <_printf_i+0x174>
 8005de4:	065e      	lsls	r6, r3, #25
 8005de6:	bf48      	it	mi
 8005de8:	b2ad      	uxthmi	r5, r5
 8005dea:	e7e6      	b.n	8005dba <_printf_i+0x182>
 8005dec:	4616      	mov	r6, r2
 8005dee:	e7bb      	b.n	8005d68 <_printf_i+0x130>
 8005df0:	680b      	ldr	r3, [r1, #0]
 8005df2:	6826      	ldr	r6, [r4, #0]
 8005df4:	6960      	ldr	r0, [r4, #20]
 8005df6:	1d1d      	adds	r5, r3, #4
 8005df8:	600d      	str	r5, [r1, #0]
 8005dfa:	0635      	lsls	r5, r6, #24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	d501      	bpl.n	8005e04 <_printf_i+0x1cc>
 8005e00:	6018      	str	r0, [r3, #0]
 8005e02:	e002      	b.n	8005e0a <_printf_i+0x1d2>
 8005e04:	0671      	lsls	r1, r6, #25
 8005e06:	d5fb      	bpl.n	8005e00 <_printf_i+0x1c8>
 8005e08:	8018      	strh	r0, [r3, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	4616      	mov	r6, r2
 8005e10:	e7ba      	b.n	8005d88 <_printf_i+0x150>
 8005e12:	680b      	ldr	r3, [r1, #0]
 8005e14:	1d1a      	adds	r2, r3, #4
 8005e16:	600a      	str	r2, [r1, #0]
 8005e18:	681e      	ldr	r6, [r3, #0]
 8005e1a:	6862      	ldr	r2, [r4, #4]
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7fa f9de 	bl	80001e0 <memchr>
 8005e24:	b108      	cbz	r0, 8005e2a <_printf_i+0x1f2>
 8005e26:	1b80      	subs	r0, r0, r6
 8005e28:	6060      	str	r0, [r4, #4]
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	6123      	str	r3, [r4, #16]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e34:	e7a8      	b.n	8005d88 <_printf_i+0x150>
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	4632      	mov	r2, r6
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	47d0      	blx	sl
 8005e40:	3001      	adds	r0, #1
 8005e42:	d0ab      	beq.n	8005d9c <_printf_i+0x164>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	079b      	lsls	r3, r3, #30
 8005e48:	d413      	bmi.n	8005e72 <_printf_i+0x23a>
 8005e4a:	68e0      	ldr	r0, [r4, #12]
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	4298      	cmp	r0, r3
 8005e50:	bfb8      	it	lt
 8005e52:	4618      	movlt	r0, r3
 8005e54:	e7a4      	b.n	8005da0 <_printf_i+0x168>
 8005e56:	2301      	movs	r3, #1
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	47d0      	blx	sl
 8005e60:	3001      	adds	r0, #1
 8005e62:	d09b      	beq.n	8005d9c <_printf_i+0x164>
 8005e64:	3501      	adds	r5, #1
 8005e66:	68e3      	ldr	r3, [r4, #12]
 8005e68:	9903      	ldr	r1, [sp, #12]
 8005e6a:	1a5b      	subs	r3, r3, r1
 8005e6c:	42ab      	cmp	r3, r5
 8005e6e:	dcf2      	bgt.n	8005e56 <_printf_i+0x21e>
 8005e70:	e7eb      	b.n	8005e4a <_printf_i+0x212>
 8005e72:	2500      	movs	r5, #0
 8005e74:	f104 0619 	add.w	r6, r4, #25
 8005e78:	e7f5      	b.n	8005e66 <_printf_i+0x22e>
 8005e7a:	bf00      	nop
 8005e7c:	08006135 	.word	0x08006135
 8005e80:	08006146 	.word	0x08006146

08005e84 <memmove>:
 8005e84:	4288      	cmp	r0, r1
 8005e86:	b510      	push	{r4, lr}
 8005e88:	eb01 0402 	add.w	r4, r1, r2
 8005e8c:	d902      	bls.n	8005e94 <memmove+0x10>
 8005e8e:	4284      	cmp	r4, r0
 8005e90:	4623      	mov	r3, r4
 8005e92:	d807      	bhi.n	8005ea4 <memmove+0x20>
 8005e94:	1e43      	subs	r3, r0, #1
 8005e96:	42a1      	cmp	r1, r4
 8005e98:	d008      	beq.n	8005eac <memmove+0x28>
 8005e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ea2:	e7f8      	b.n	8005e96 <memmove+0x12>
 8005ea4:	4402      	add	r2, r0
 8005ea6:	4601      	mov	r1, r0
 8005ea8:	428a      	cmp	r2, r1
 8005eaa:	d100      	bne.n	8005eae <memmove+0x2a>
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eb6:	e7f7      	b.n	8005ea8 <memmove+0x24>

08005eb8 <_free_r>:
 8005eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eba:	2900      	cmp	r1, #0
 8005ebc:	d048      	beq.n	8005f50 <_free_r+0x98>
 8005ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec2:	9001      	str	r0, [sp, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f1a1 0404 	sub.w	r4, r1, #4
 8005eca:	bfb8      	it	lt
 8005ecc:	18e4      	addlt	r4, r4, r3
 8005ece:	f000 f8d3 	bl	8006078 <__malloc_lock>
 8005ed2:	4a20      	ldr	r2, [pc, #128]	; (8005f54 <_free_r+0x9c>)
 8005ed4:	9801      	ldr	r0, [sp, #4]
 8005ed6:	6813      	ldr	r3, [r2, #0]
 8005ed8:	4615      	mov	r5, r2
 8005eda:	b933      	cbnz	r3, 8005eea <_free_r+0x32>
 8005edc:	6063      	str	r3, [r4, #4]
 8005ede:	6014      	str	r4, [r2, #0]
 8005ee0:	b003      	add	sp, #12
 8005ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee6:	f000 b8cd 	b.w	8006084 <__malloc_unlock>
 8005eea:	42a3      	cmp	r3, r4
 8005eec:	d90b      	bls.n	8005f06 <_free_r+0x4e>
 8005eee:	6821      	ldr	r1, [r4, #0]
 8005ef0:	1862      	adds	r2, r4, r1
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	bf04      	itt	eq
 8005ef6:	681a      	ldreq	r2, [r3, #0]
 8005ef8:	685b      	ldreq	r3, [r3, #4]
 8005efa:	6063      	str	r3, [r4, #4]
 8005efc:	bf04      	itt	eq
 8005efe:	1852      	addeq	r2, r2, r1
 8005f00:	6022      	streq	r2, [r4, #0]
 8005f02:	602c      	str	r4, [r5, #0]
 8005f04:	e7ec      	b.n	8005ee0 <_free_r+0x28>
 8005f06:	461a      	mov	r2, r3
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b10b      	cbz	r3, 8005f10 <_free_r+0x58>
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	d9fa      	bls.n	8005f06 <_free_r+0x4e>
 8005f10:	6811      	ldr	r1, [r2, #0]
 8005f12:	1855      	adds	r5, r2, r1
 8005f14:	42a5      	cmp	r5, r4
 8005f16:	d10b      	bne.n	8005f30 <_free_r+0x78>
 8005f18:	6824      	ldr	r4, [r4, #0]
 8005f1a:	4421      	add	r1, r4
 8005f1c:	1854      	adds	r4, r2, r1
 8005f1e:	42a3      	cmp	r3, r4
 8005f20:	6011      	str	r1, [r2, #0]
 8005f22:	d1dd      	bne.n	8005ee0 <_free_r+0x28>
 8005f24:	681c      	ldr	r4, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	6053      	str	r3, [r2, #4]
 8005f2a:	4421      	add	r1, r4
 8005f2c:	6011      	str	r1, [r2, #0]
 8005f2e:	e7d7      	b.n	8005ee0 <_free_r+0x28>
 8005f30:	d902      	bls.n	8005f38 <_free_r+0x80>
 8005f32:	230c      	movs	r3, #12
 8005f34:	6003      	str	r3, [r0, #0]
 8005f36:	e7d3      	b.n	8005ee0 <_free_r+0x28>
 8005f38:	6825      	ldr	r5, [r4, #0]
 8005f3a:	1961      	adds	r1, r4, r5
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	bf04      	itt	eq
 8005f40:	6819      	ldreq	r1, [r3, #0]
 8005f42:	685b      	ldreq	r3, [r3, #4]
 8005f44:	6063      	str	r3, [r4, #4]
 8005f46:	bf04      	itt	eq
 8005f48:	1949      	addeq	r1, r1, r5
 8005f4a:	6021      	streq	r1, [r4, #0]
 8005f4c:	6054      	str	r4, [r2, #4]
 8005f4e:	e7c7      	b.n	8005ee0 <_free_r+0x28>
 8005f50:	b003      	add	sp, #12
 8005f52:	bd30      	pop	{r4, r5, pc}
 8005f54:	200004b8 	.word	0x200004b8

08005f58 <_malloc_r>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	1ccd      	adds	r5, r1, #3
 8005f5c:	f025 0503 	bic.w	r5, r5, #3
 8005f60:	3508      	adds	r5, #8
 8005f62:	2d0c      	cmp	r5, #12
 8005f64:	bf38      	it	cc
 8005f66:	250c      	movcc	r5, #12
 8005f68:	2d00      	cmp	r5, #0
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	db01      	blt.n	8005f72 <_malloc_r+0x1a>
 8005f6e:	42a9      	cmp	r1, r5
 8005f70:	d903      	bls.n	8005f7a <_malloc_r+0x22>
 8005f72:	230c      	movs	r3, #12
 8005f74:	6033      	str	r3, [r6, #0]
 8005f76:	2000      	movs	r0, #0
 8005f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f7a:	f000 f87d 	bl	8006078 <__malloc_lock>
 8005f7e:	4921      	ldr	r1, [pc, #132]	; (8006004 <_malloc_r+0xac>)
 8005f80:	680a      	ldr	r2, [r1, #0]
 8005f82:	4614      	mov	r4, r2
 8005f84:	b99c      	cbnz	r4, 8005fae <_malloc_r+0x56>
 8005f86:	4f20      	ldr	r7, [pc, #128]	; (8006008 <_malloc_r+0xb0>)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	b923      	cbnz	r3, 8005f96 <_malloc_r+0x3e>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 f862 	bl	8006058 <_sbrk_r>
 8005f94:	6038      	str	r0, [r7, #0]
 8005f96:	4629      	mov	r1, r5
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f000 f85d 	bl	8006058 <_sbrk_r>
 8005f9e:	1c43      	adds	r3, r0, #1
 8005fa0:	d123      	bne.n	8005fea <_malloc_r+0x92>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	6033      	str	r3, [r6, #0]
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 f86c 	bl	8006084 <__malloc_unlock>
 8005fac:	e7e3      	b.n	8005f76 <_malloc_r+0x1e>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	1b5b      	subs	r3, r3, r5
 8005fb2:	d417      	bmi.n	8005fe4 <_malloc_r+0x8c>
 8005fb4:	2b0b      	cmp	r3, #11
 8005fb6:	d903      	bls.n	8005fc0 <_malloc_r+0x68>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	441c      	add	r4, r3
 8005fbc:	6025      	str	r5, [r4, #0]
 8005fbe:	e004      	b.n	8005fca <_malloc_r+0x72>
 8005fc0:	6863      	ldr	r3, [r4, #4]
 8005fc2:	42a2      	cmp	r2, r4
 8005fc4:	bf0c      	ite	eq
 8005fc6:	600b      	streq	r3, [r1, #0]
 8005fc8:	6053      	strne	r3, [r2, #4]
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f000 f85a 	bl	8006084 <__malloc_unlock>
 8005fd0:	f104 000b 	add.w	r0, r4, #11
 8005fd4:	1d23      	adds	r3, r4, #4
 8005fd6:	f020 0007 	bic.w	r0, r0, #7
 8005fda:	1ac2      	subs	r2, r0, r3
 8005fdc:	d0cc      	beq.n	8005f78 <_malloc_r+0x20>
 8005fde:	1a1b      	subs	r3, r3, r0
 8005fe0:	50a3      	str	r3, [r4, r2]
 8005fe2:	e7c9      	b.n	8005f78 <_malloc_r+0x20>
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	6864      	ldr	r4, [r4, #4]
 8005fe8:	e7cc      	b.n	8005f84 <_malloc_r+0x2c>
 8005fea:	1cc4      	adds	r4, r0, #3
 8005fec:	f024 0403 	bic.w	r4, r4, #3
 8005ff0:	42a0      	cmp	r0, r4
 8005ff2:	d0e3      	beq.n	8005fbc <_malloc_r+0x64>
 8005ff4:	1a21      	subs	r1, r4, r0
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f000 f82e 	bl	8006058 <_sbrk_r>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d1dd      	bne.n	8005fbc <_malloc_r+0x64>
 8006000:	e7cf      	b.n	8005fa2 <_malloc_r+0x4a>
 8006002:	bf00      	nop
 8006004:	200004b8 	.word	0x200004b8
 8006008:	200004bc 	.word	0x200004bc

0800600c <_realloc_r>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	4607      	mov	r7, r0
 8006010:	4614      	mov	r4, r2
 8006012:	460e      	mov	r6, r1
 8006014:	b921      	cbnz	r1, 8006020 <_realloc_r+0x14>
 8006016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800601a:	4611      	mov	r1, r2
 800601c:	f7ff bf9c 	b.w	8005f58 <_malloc_r>
 8006020:	b922      	cbnz	r2, 800602c <_realloc_r+0x20>
 8006022:	f7ff ff49 	bl	8005eb8 <_free_r>
 8006026:	4625      	mov	r5, r4
 8006028:	4628      	mov	r0, r5
 800602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602c:	f000 f830 	bl	8006090 <_malloc_usable_size_r>
 8006030:	42a0      	cmp	r0, r4
 8006032:	d20f      	bcs.n	8006054 <_realloc_r+0x48>
 8006034:	4621      	mov	r1, r4
 8006036:	4638      	mov	r0, r7
 8006038:	f7ff ff8e 	bl	8005f58 <_malloc_r>
 800603c:	4605      	mov	r5, r0
 800603e:	2800      	cmp	r0, #0
 8006040:	d0f2      	beq.n	8006028 <_realloc_r+0x1c>
 8006042:	4631      	mov	r1, r6
 8006044:	4622      	mov	r2, r4
 8006046:	f7ff fbf7 	bl	8005838 <memcpy>
 800604a:	4631      	mov	r1, r6
 800604c:	4638      	mov	r0, r7
 800604e:	f7ff ff33 	bl	8005eb8 <_free_r>
 8006052:	e7e9      	b.n	8006028 <_realloc_r+0x1c>
 8006054:	4635      	mov	r5, r6
 8006056:	e7e7      	b.n	8006028 <_realloc_r+0x1c>

08006058 <_sbrk_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4d06      	ldr	r5, [pc, #24]	; (8006074 <_sbrk_r+0x1c>)
 800605c:	2300      	movs	r3, #0
 800605e:	4604      	mov	r4, r0
 8006060:	4608      	mov	r0, r1
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	f7fc f820 	bl	80020a8 <_sbrk>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_sbrk_r+0x1a>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	b103      	cbz	r3, 8006072 <_sbrk_r+0x1a>
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	200006d8 	.word	0x200006d8

08006078 <__malloc_lock>:
 8006078:	4801      	ldr	r0, [pc, #4]	; (8006080 <__malloc_lock+0x8>)
 800607a:	f000 b811 	b.w	80060a0 <__retarget_lock_acquire_recursive>
 800607e:	bf00      	nop
 8006080:	200006e0 	.word	0x200006e0

08006084 <__malloc_unlock>:
 8006084:	4801      	ldr	r0, [pc, #4]	; (800608c <__malloc_unlock+0x8>)
 8006086:	f000 b80c 	b.w	80060a2 <__retarget_lock_release_recursive>
 800608a:	bf00      	nop
 800608c:	200006e0 	.word	0x200006e0

08006090 <_malloc_usable_size_r>:
 8006090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006094:	1f18      	subs	r0, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfbc      	itt	lt
 800609a:	580b      	ldrlt	r3, [r1, r0]
 800609c:	18c0      	addlt	r0, r0, r3
 800609e:	4770      	bx	lr

080060a0 <__retarget_lock_acquire_recursive>:
 80060a0:	4770      	bx	lr

080060a2 <__retarget_lock_release_recursive>:
 80060a2:	4770      	bx	lr

080060a4 <_init>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr

080060b0 <_fini>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr
