
oladyi02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800495c  0800495c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004964  08004964  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000057c  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d71d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cae  00000000  00000000  0002d7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000980  00000000  00000000  0002fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002091c  00000000  00000000  000307f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d253  00000000  00000000  0005110c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c56b4  00000000  00000000  0005e35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00123a13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d18  00000000  00000000  00123a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048ac 	.word	0x080048ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080048ac 	.word	0x080048ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MovingAverage>:
volatile int64_t tmp64[3];
//--------------------------------------------

//--------------------------------------------
void MovingAverage(int16_t* dt)
{
 8000578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800057c:	b088      	sub	sp, #32
 800057e:	af00      	add	r7, sp, #0
 8000580:	61f8      	str	r0, [r7, #28]
	if(avg_cnt<8)
 8000582:	4b74      	ldr	r3, [pc, #464]	; (8000754 <MovingAverage+0x1dc>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b25b      	sxtb	r3, r3
 8000588:	2b07      	cmp	r3, #7
 800058a:	f300 80ed 	bgt.w	8000768 <MovingAverage+0x1f0>
	{
		xbuf_avg[avg_cnt]=dt[0];
 800058e:	4b71      	ldr	r3, [pc, #452]	; (8000754 <MovingAverage+0x1dc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b25b      	sxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	f9b3 1000 	ldrsh.w	r1, [r3]
 800059c:	4b6e      	ldr	r3, [pc, #440]	; (8000758 <MovingAverage+0x1e0>)
 800059e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		ybuf_avg[avg_cnt]=dt[1];
 80005a2:	4b6c      	ldr	r3, [pc, #432]	; (8000754 <MovingAverage+0x1dc>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80005b0:	4b6a      	ldr	r3, [pc, #424]	; (800075c <MovingAverage+0x1e4>)
 80005b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		zbuf_avg[avg_cnt]=dt[2];
 80005b6:	4b67      	ldr	r3, [pc, #412]	; (8000754 <MovingAverage+0x1dc>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80005c4:	4b66      	ldr	r3, [pc, #408]	; (8000760 <MovingAverage+0x1e8>)
 80005c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if(avg_cnt==7)
 80005ca:	4b62      	ldr	r3, [pc, #392]	; (8000754 <MovingAverage+0x1dc>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	f040 80b5 	bne.w	8000740 <MovingAverage+0x1c8>
		{
			tmp64[0]=xbuf_avg[7]+xbuf_avg[6]+xbuf_avg[5]+xbuf_avg[4]+\
 80005d6:	4b60      	ldr	r3, [pc, #384]	; (8000758 <MovingAverage+0x1e0>)
 80005d8:	89db      	ldrh	r3, [r3, #14]
 80005da:	b21b      	sxth	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	4b5e      	ldr	r3, [pc, #376]	; (8000758 <MovingAverage+0x1e0>)
 80005e0:	899b      	ldrh	r3, [r3, #12]
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	4413      	add	r3, r2
 80005e6:	4a5c      	ldr	r2, [pc, #368]	; (8000758 <MovingAverage+0x1e0>)
 80005e8:	8952      	ldrh	r2, [r2, #10]
 80005ea:	b212      	sxth	r2, r2
 80005ec:	4413      	add	r3, r2
 80005ee:	4a5a      	ldr	r2, [pc, #360]	; (8000758 <MovingAverage+0x1e0>)
 80005f0:	8912      	ldrh	r2, [r2, #8]
 80005f2:	b212      	sxth	r2, r2
 80005f4:	4413      	add	r3, r2
							 xbuf_avg[3]+xbuf_avg[2]+xbuf_avg[1]+xbuf_avg[0];
 80005f6:	4a58      	ldr	r2, [pc, #352]	; (8000758 <MovingAverage+0x1e0>)
 80005f8:	88d2      	ldrh	r2, [r2, #6]
 80005fa:	b212      	sxth	r2, r2
			tmp64[0]=xbuf_avg[7]+xbuf_avg[6]+xbuf_avg[5]+xbuf_avg[4]+\
 80005fc:	4413      	add	r3, r2
							 xbuf_avg[3]+xbuf_avg[2]+xbuf_avg[1]+xbuf_avg[0];
 80005fe:	4a56      	ldr	r2, [pc, #344]	; (8000758 <MovingAverage+0x1e0>)
 8000600:	8892      	ldrh	r2, [r2, #4]
 8000602:	b212      	sxth	r2, r2
 8000604:	4413      	add	r3, r2
 8000606:	4a54      	ldr	r2, [pc, #336]	; (8000758 <MovingAverage+0x1e0>)
 8000608:	8852      	ldrh	r2, [r2, #2]
 800060a:	b212      	sxth	r2, r2
 800060c:	4413      	add	r3, r2
 800060e:	4a52      	ldr	r2, [pc, #328]	; (8000758 <MovingAverage+0x1e0>)
 8000610:	8812      	ldrh	r2, [r2, #0]
 8000612:	b212      	sxth	r2, r2
 8000614:	4413      	add	r3, r2
 8000616:	461a      	mov	r2, r3
 8000618:	ea4f 73e2 	mov.w	r3, r2, asr #31
			tmp64[0]=xbuf_avg[7]+xbuf_avg[6]+xbuf_avg[5]+xbuf_avg[4]+\
 800061c:	4951      	ldr	r1, [pc, #324]	; (8000764 <MovingAverage+0x1ec>)
 800061e:	e9c1 2300 	strd	r2, r3, [r1]
			tmp64[1]=ybuf_avg[7]+ybuf_avg[6]+ybuf_avg[5]+ybuf_avg[4]+\
 8000622:	4b4e      	ldr	r3, [pc, #312]	; (800075c <MovingAverage+0x1e4>)
 8000624:	89db      	ldrh	r3, [r3, #14]
 8000626:	b21b      	sxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	4b4c      	ldr	r3, [pc, #304]	; (800075c <MovingAverage+0x1e4>)
 800062c:	899b      	ldrh	r3, [r3, #12]
 800062e:	b21b      	sxth	r3, r3
 8000630:	4413      	add	r3, r2
 8000632:	4a4a      	ldr	r2, [pc, #296]	; (800075c <MovingAverage+0x1e4>)
 8000634:	8952      	ldrh	r2, [r2, #10]
 8000636:	b212      	sxth	r2, r2
 8000638:	4413      	add	r3, r2
 800063a:	4a48      	ldr	r2, [pc, #288]	; (800075c <MovingAverage+0x1e4>)
 800063c:	8912      	ldrh	r2, [r2, #8]
 800063e:	b212      	sxth	r2, r2
 8000640:	4413      	add	r3, r2
							 ybuf_avg[3]+ybuf_avg[2]+ybuf_avg[1]+ybuf_avg[0];
 8000642:	4a46      	ldr	r2, [pc, #280]	; (800075c <MovingAverage+0x1e4>)
 8000644:	88d2      	ldrh	r2, [r2, #6]
 8000646:	b212      	sxth	r2, r2
			tmp64[1]=ybuf_avg[7]+ybuf_avg[6]+ybuf_avg[5]+ybuf_avg[4]+\
 8000648:	4413      	add	r3, r2
							 ybuf_avg[3]+ybuf_avg[2]+ybuf_avg[1]+ybuf_avg[0];
 800064a:	4a44      	ldr	r2, [pc, #272]	; (800075c <MovingAverage+0x1e4>)
 800064c:	8892      	ldrh	r2, [r2, #4]
 800064e:	b212      	sxth	r2, r2
 8000650:	4413      	add	r3, r2
 8000652:	4a42      	ldr	r2, [pc, #264]	; (800075c <MovingAverage+0x1e4>)
 8000654:	8852      	ldrh	r2, [r2, #2]
 8000656:	b212      	sxth	r2, r2
 8000658:	4413      	add	r3, r2
 800065a:	4a40      	ldr	r2, [pc, #256]	; (800075c <MovingAverage+0x1e4>)
 800065c:	8812      	ldrh	r2, [r2, #0]
 800065e:	b212      	sxth	r2, r2
 8000660:	4413      	add	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	ea4f 73e2 	mov.w	r3, r2, asr #31
			tmp64[1]=ybuf_avg[7]+ybuf_avg[6]+ybuf_avg[5]+ybuf_avg[4]+\
 8000668:	493e      	ldr	r1, [pc, #248]	; (8000764 <MovingAverage+0x1ec>)
 800066a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			tmp64[2]=zbuf_avg[7]+zbuf_avg[6]+zbuf_avg[5]+zbuf_avg[4]+\
 800066e:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <MovingAverage+0x1e8>)
 8000670:	89db      	ldrh	r3, [r3, #14]
 8000672:	b21b      	sxth	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <MovingAverage+0x1e8>)
 8000678:	899b      	ldrh	r3, [r3, #12]
 800067a:	b21b      	sxth	r3, r3
 800067c:	4413      	add	r3, r2
 800067e:	4a38      	ldr	r2, [pc, #224]	; (8000760 <MovingAverage+0x1e8>)
 8000680:	8952      	ldrh	r2, [r2, #10]
 8000682:	b212      	sxth	r2, r2
 8000684:	4413      	add	r3, r2
 8000686:	4a36      	ldr	r2, [pc, #216]	; (8000760 <MovingAverage+0x1e8>)
 8000688:	8912      	ldrh	r2, [r2, #8]
 800068a:	b212      	sxth	r2, r2
 800068c:	4413      	add	r3, r2
							 zbuf_avg[3]+zbuf_avg[2]+zbuf_avg[1]+zbuf_avg[0];
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <MovingAverage+0x1e8>)
 8000690:	88d2      	ldrh	r2, [r2, #6]
 8000692:	b212      	sxth	r2, r2
			tmp64[2]=zbuf_avg[7]+zbuf_avg[6]+zbuf_avg[5]+zbuf_avg[4]+\
 8000694:	4413      	add	r3, r2
							 zbuf_avg[3]+zbuf_avg[2]+zbuf_avg[1]+zbuf_avg[0];
 8000696:	4a32      	ldr	r2, [pc, #200]	; (8000760 <MovingAverage+0x1e8>)
 8000698:	8892      	ldrh	r2, [r2, #4]
 800069a:	b212      	sxth	r2, r2
 800069c:	4413      	add	r3, r2
 800069e:	4a30      	ldr	r2, [pc, #192]	; (8000760 <MovingAverage+0x1e8>)
 80006a0:	8852      	ldrh	r2, [r2, #2]
 80006a2:	b212      	sxth	r2, r2
 80006a4:	4413      	add	r3, r2
 80006a6:	4a2e      	ldr	r2, [pc, #184]	; (8000760 <MovingAverage+0x1e8>)
 80006a8:	8812      	ldrh	r2, [r2, #0]
 80006aa:	b212      	sxth	r2, r2
 80006ac:	4413      	add	r3, r2
 80006ae:	461a      	mov	r2, r3
 80006b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
			tmp64[2]=zbuf_avg[7]+zbuf_avg[6]+zbuf_avg[5]+zbuf_avg[4]+\
 80006b4:	492b      	ldr	r1, [pc, #172]	; (8000764 <MovingAverage+0x1ec>)
 80006b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			dt[0]=tmp64[0]/8;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <MovingAverage+0x1ec>)
 80006bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	f173 0100 	sbcs.w	r1, r3, #0
 80006c6:	da02      	bge.n	80006ce <MovingAverage+0x156>
 80006c8:	3207      	adds	r2, #7
 80006ca:	f143 0300 	adc.w	r3, r3, #0
 80006ce:	f04f 0000 	mov.w	r0, #0
 80006d2:	f04f 0100 	mov.w	r1, #0
 80006d6:	08d0      	lsrs	r0, r2, #3
 80006d8:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 80006dc:	10d9      	asrs	r1, r3, #3
 80006de:	4602      	mov	r2, r0
 80006e0:	460b      	mov	r3, r1
 80006e2:	b212      	sxth	r2, r2
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	801a      	strh	r2, [r3, #0]
			dt[1]=tmp64[1]/8;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MovingAverage+0x1ec>)
 80006ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	f173 0100 	sbcs.w	r1, r3, #0
 80006f4:	da02      	bge.n	80006fc <MovingAverage+0x184>
 80006f6:	3207      	adds	r2, #7
 80006f8:	f143 0300 	adc.w	r3, r3, #0
 80006fc:	f04f 0000 	mov.w	r0, #0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	08d0      	lsrs	r0, r2, #3
 8000706:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800070a:	10d9      	asrs	r1, r3, #3
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3302      	adds	r3, #2
 8000710:	b202      	sxth	r2, r0
 8000712:	801a      	strh	r2, [r3, #0]
			dt[2]=tmp64[2]/8;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MovingAverage+0x1ec>)
 8000716:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800071a:	2a00      	cmp	r2, #0
 800071c:	f173 0100 	sbcs.w	r1, r3, #0
 8000720:	da02      	bge.n	8000728 <MovingAverage+0x1b0>
 8000722:	3207      	adds	r2, #7
 8000724:	f143 0300 	adc.w	r3, r3, #0
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	08d0      	lsrs	r0, r2, #3
 8000732:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8000736:	10d9      	asrs	r1, r3, #3
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	3304      	adds	r3, #4
 800073c:	b202      	sxth	r2, r0
 800073e:	801a      	strh	r2, [r3, #0]
		}
		avg_cnt++;
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <MovingAverage+0x1dc>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b25b      	sxtb	r3, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	3301      	adds	r3, #1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	b25a      	sxtb	r2, r3
 800074e:	4b01      	ldr	r3, [pc, #4]	; (8000754 <MovingAverage+0x1dc>)
 8000750:	701a      	strb	r2, [r3, #0]
		//������� ������� ��������
		dt[0]=tmp64[0]/8;
		dt[1]=tmp64[1]/8;
		dt[2]=tmp64[2]/8;
	}
}
 8000752:	e0d7      	b.n	8000904 <MovingAverage+0x38c>
 8000754:	200004c0 	.word	0x200004c0
 8000758:	2000008c 	.word	0x2000008c
 800075c:	2000009c 	.word	0x2000009c
 8000760:	200000ac 	.word	0x200000ac
 8000764:	200004c8 	.word	0x200004c8
		tmp64[0]-=xbuf_avg[0];
 8000768:	4b69      	ldr	r3, [pc, #420]	; (8000910 <MovingAverage+0x398>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	4b69      	ldr	r3, [pc, #420]	; (8000914 <MovingAverage+0x39c>)
 8000770:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000774:	b212      	sxth	r2, r2
 8000776:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800077a:	1a84      	subs	r4, r0, r2
 800077c:	eb61 0503 	sbc.w	r5, r1, r3
 8000780:	4b64      	ldr	r3, [pc, #400]	; (8000914 <MovingAverage+0x39c>)
 8000782:	e9c3 4500 	strd	r4, r5, [r3]
		tmp64[1]-=ybuf_avg[0];
 8000786:	4b64      	ldr	r3, [pc, #400]	; (8000918 <MovingAverage+0x3a0>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b21b      	sxth	r3, r3
 800078c:	4a61      	ldr	r2, [pc, #388]	; (8000914 <MovingAverage+0x39c>)
 800078e:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8000792:	b21a      	sxth	r2, r3
 8000794:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000798:	1a84      	subs	r4, r0, r2
 800079a:	613c      	str	r4, [r7, #16]
 800079c:	eb61 0303 	sbc.w	r3, r1, r3
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <MovingAverage+0x39c>)
 80007a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80007a8:	e9c3 1202 	strd	r1, r2, [r3, #8]
		tmp64[2]-=zbuf_avg[0];
 80007ac:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MovingAverage+0x3a4>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4a58      	ldr	r2, [pc, #352]	; (8000914 <MovingAverage+0x39c>)
 80007b4:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80007be:	1a84      	subs	r4, r0, r2
 80007c0:	60bc      	str	r4, [r7, #8]
 80007c2:	eb61 0303 	sbc.w	r3, r1, r3
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4b52      	ldr	r3, [pc, #328]	; (8000914 <MovingAverage+0x39c>)
 80007ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80007ce:	e9c3 1204 	strd	r1, r2, [r3, #16]
		memcpy((void*)xbuf_avg,(void*)(xbuf_avg+1),sizeof(int16_t)*7);
 80007d2:	4b53      	ldr	r3, [pc, #332]	; (8000920 <MovingAverage+0x3a8>)
 80007d4:	220e      	movs	r2, #14
 80007d6:	4619      	mov	r1, r3
 80007d8:	484d      	ldr	r0, [pc, #308]	; (8000910 <MovingAverage+0x398>)
 80007da:	f003 fc31 	bl	8004040 <memcpy>
		memcpy((void*)ybuf_avg,(void*)(ybuf_avg+1),sizeof(int16_t)*7);
 80007de:	4b51      	ldr	r3, [pc, #324]	; (8000924 <MovingAverage+0x3ac>)
 80007e0:	220e      	movs	r2, #14
 80007e2:	4619      	mov	r1, r3
 80007e4:	484c      	ldr	r0, [pc, #304]	; (8000918 <MovingAverage+0x3a0>)
 80007e6:	f003 fc2b 	bl	8004040 <memcpy>
		memcpy((void*)zbuf_avg,(void*)(zbuf_avg+1),sizeof(int16_t)*7);
 80007ea:	4b4f      	ldr	r3, [pc, #316]	; (8000928 <MovingAverage+0x3b0>)
 80007ec:	220e      	movs	r2, #14
 80007ee:	4619      	mov	r1, r3
 80007f0:	484a      	ldr	r0, [pc, #296]	; (800091c <MovingAverage+0x3a4>)
 80007f2:	f003 fc25 	bl	8004040 <memcpy>
		xbuf_avg[7]=dt[0];
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80007fc:	4b44      	ldr	r3, [pc, #272]	; (8000910 <MovingAverage+0x398>)
 80007fe:	81da      	strh	r2, [r3, #14]
		ybuf_avg[7]=dt[1];
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000806:	4b44      	ldr	r3, [pc, #272]	; (8000918 <MovingAverage+0x3a0>)
 8000808:	81da      	strh	r2, [r3, #14]
		zbuf_avg[7]=dt[2];
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000810:	4b42      	ldr	r3, [pc, #264]	; (800091c <MovingAverage+0x3a4>)
 8000812:	81da      	strh	r2, [r3, #14]
		tmp64[0]+=dt[0];
 8000814:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MovingAverage+0x39c>)
 8000816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000820:	b21a      	sxth	r2, r3
 8000822:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000826:	1884      	adds	r4, r0, r2
 8000828:	603c      	str	r4, [r7, #0]
 800082a:	eb41 0303 	adc.w	r3, r1, r3
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MovingAverage+0x39c>)
 8000832:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000836:	e9c3 1200 	strd	r1, r2, [r3]
		tmp64[1]+=dt[1];
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MovingAverage+0x39c>)
 800083c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	3302      	adds	r3, #2
 8000844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000848:	b21a      	sxth	r2, r3
 800084a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800084e:	eb10 0a02 	adds.w	sl, r0, r2
 8000852:	eb41 0b03 	adc.w	fp, r1, r3
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MovingAverage+0x39c>)
 8000858:	e9c3 ab02 	strd	sl, fp, [r3, #8]
		tmp64[2]+=dt[2];
 800085c:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MovingAverage+0x39c>)
 800085e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086a:	b21a      	sxth	r2, r3
 800086c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000870:	eb10 0802 	adds.w	r8, r0, r2
 8000874:	eb41 0903 	adc.w	r9, r1, r3
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MovingAverage+0x39c>)
 800087a:	e9c3 8904 	strd	r8, r9, [r3, #16]
		dt[0]=tmp64[0]/8;
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MovingAverage+0x39c>)
 8000880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000884:	2a00      	cmp	r2, #0
 8000886:	f173 0100 	sbcs.w	r1, r3, #0
 800088a:	da02      	bge.n	8000892 <MovingAverage+0x31a>
 800088c:	3207      	adds	r2, #7
 800088e:	f143 0300 	adc.w	r3, r3, #0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	f04f 0100 	mov.w	r1, #0
 800089a:	08d0      	lsrs	r0, r2, #3
 800089c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 80008a0:	10d9      	asrs	r1, r3, #3
 80008a2:	4602      	mov	r2, r0
 80008a4:	460b      	mov	r3, r1
 80008a6:	b212      	sxth	r2, r2
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	801a      	strh	r2, [r3, #0]
		dt[1]=tmp64[1]/8;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MovingAverage+0x39c>)
 80008ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	f173 0100 	sbcs.w	r1, r3, #0
 80008b8:	da02      	bge.n	80008c0 <MovingAverage+0x348>
 80008ba:	3207      	adds	r2, #7
 80008bc:	f143 0300 	adc.w	r3, r3, #0
 80008c0:	f04f 0000 	mov.w	r0, #0
 80008c4:	f04f 0100 	mov.w	r1, #0
 80008c8:	08d0      	lsrs	r0, r2, #3
 80008ca:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 80008ce:	10d9      	asrs	r1, r3, #3
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	3302      	adds	r3, #2
 80008d4:	b202      	sxth	r2, r0
 80008d6:	801a      	strh	r2, [r3, #0]
		dt[2]=tmp64[2]/8;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MovingAverage+0x39c>)
 80008da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80008de:	2a00      	cmp	r2, #0
 80008e0:	f173 0100 	sbcs.w	r1, r3, #0
 80008e4:	da02      	bge.n	80008ec <MovingAverage+0x374>
 80008e6:	3207      	adds	r2, #7
 80008e8:	f143 0300 	adc.w	r3, r3, #0
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	f04f 0100 	mov.w	r1, #0
 80008f4:	08d0      	lsrs	r0, r2, #3
 80008f6:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 80008fa:	10d9      	asrs	r1, r3, #3
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3304      	adds	r3, #4
 8000900:	b202      	sxth	r2, r0
 8000902:	801a      	strh	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800090e:	bf00      	nop
 8000910:	2000008c 	.word	0x2000008c
 8000914:	200004c8 	.word	0x200004c8
 8000918:	2000009c 	.word	0x2000009c
 800091c:	200000ac 	.word	0x200000ac
 8000920:	2000008e 	.word	0x2000008e
 8000924:	2000009e 	.word	0x2000009e
 8000928:	200000ae 	.word	0x200000ae

0800092c <I2Cx_ReadData>:
//--------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af04      	add	r7, sp, #16
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	80fb      	strh	r3, [r7, #6]
 8000938:	4613      	mov	r3, r2
 800093a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	b29a      	uxth	r2, r3
 8000948:	88f9      	ldrh	r1, [r7, #6]
 800094a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	f107 030e 	add.w	r3, r7, #14
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <I2Cx_ReadData+0x44>)
 800095e:	f001 fe65 	bl	800262c <HAL_I2C_Mem_Read>
 8000962:	4603      	mov	r3, r0
 8000964:	73fb      	strb	r3, [r7, #15]
	return value;
 8000966:	7bbb      	ldrb	r3, [r7, #14]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200004e0 	.word	0x200004e0

08000974 <I2Cx_WriteData>:
//--------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af04      	add	r7, sp, #16
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	717b      	strb	r3, [r7, #5]
 8000982:	4613      	mov	r3, r2
 8000984:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 800098a:	797b      	ldrb	r3, [r7, #5]
 800098c:	b29a      	uxth	r2, r3
 800098e:	88f9      	ldrh	r1, [r7, #6]
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2301      	movs	r3, #1
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2301      	movs	r3, #1
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <I2Cx_WriteData+0x40>)
 80009a2:	f001 fd49 	bl	8002438 <HAL_I2C_Mem_Write>
 80009a6:	4603      	mov	r3, r0
 80009a8:	73fb      	strb	r3, [r7, #15]
//	if(status != HAL_OK) Error();
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200004e0 	.word	0x200004e0

080009b8 <Accel_IO_Read>:
//--------------------------------------------
uint8_t Accel_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	80fb      	strh	r3, [r7, #6]
 80009c4:	4613      	mov	r3, r2
 80009c6:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80009c8:	797a      	ldrb	r2, [r7, #5]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ffac 	bl	800092c <I2Cx_ReadData>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <Accel_IO_Write>:
//--------------------------------------------
void Accel_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	80fb      	strh	r3, [r7, #6]
 80009e8:	460b      	mov	r3, r1
 80009ea:	717b      	strb	r3, [r7, #5]
 80009ec:	4613      	mov	r3, r2
 80009ee:	713b      	strb	r3, [r7, #4]
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80009f0:	793a      	ldrb	r2, [r7, #4]
 80009f2:	7979      	ldrb	r1, [r7, #5]
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffbc 	bl	8000974 <I2Cx_WriteData>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Accel_GetXYZ>:
//--------------------------------------------
void Accel_GetXYZ(int16_t* pData)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	int16_t pnRawData[3];
	uint8_t ctrlx[2]={0,0};
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	82bb      	strh	r3, [r7, #20]
	uint8_t buffer[6];
	uint8_t i=0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	77fb      	strb	r3, [r7, #31]
	uint8_t sensitivity = LSM303DLHC_FULLSCALE_2G;
 8000a14:	2300      	movs	r3, #0
 8000a16:	77bb      	strb	r3, [r7, #30]
	
	ctrlx[0] = Accel_IO_Read(0x32,LSM303DLHC_CTRL_REG4_A);
 8000a18:	2123      	movs	r1, #35	; 0x23
 8000a1a:	2032      	movs	r0, #50	; 0x32
 8000a1c:	f7ff ffcc 	bl	80009b8 <Accel_IO_Read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	753b      	strb	r3, [r7, #20]
	ctrlx[1] = Accel_IO_Read(0x32,LSM303DLHC_CTRL_REG5_A);
 8000a24:	2124      	movs	r1, #36	; 0x24
 8000a26:	2032      	movs	r0, #50	; 0x32
 8000a28:	f7ff ffc6 	bl	80009b8 <Accel_IO_Read>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	757b      	strb	r3, [r7, #21]
	
	buffer[0] = Accel_IO_Read(0x32,LSM303DLHC_OUT_X_L_A);
 8000a30:	2128      	movs	r1, #40	; 0x28
 8000a32:	2032      	movs	r0, #50	; 0x32
 8000a34:	f7ff ffc0 	bl	80009b8 <Accel_IO_Read>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	733b      	strb	r3, [r7, #12]
	buffer[1] = Accel_IO_Read(0x32,LSM303DLHC_OUT_X_H_A);
 8000a3c:	2129      	movs	r1, #41	; 0x29
 8000a3e:	2032      	movs	r0, #50	; 0x32
 8000a40:	f7ff ffba 	bl	80009b8 <Accel_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	737b      	strb	r3, [r7, #13]
	buffer[2] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Y_L_A);
 8000a48:	212a      	movs	r1, #42	; 0x2a
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f7ff ffb4 	bl	80009b8 <Accel_IO_Read>
 8000a50:	4603      	mov	r3, r0
 8000a52:	73bb      	strb	r3, [r7, #14]
	buffer[3] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Y_H_A);
 8000a54:	212b      	movs	r1, #43	; 0x2b
 8000a56:	2032      	movs	r0, #50	; 0x32
 8000a58:	f7ff ffae 	bl	80009b8 <Accel_IO_Read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]
	buffer[4] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Z_L_A);
 8000a60:	212c      	movs	r1, #44	; 0x2c
 8000a62:	2032      	movs	r0, #50	; 0x32
 8000a64:	f7ff ffa8 	bl	80009b8 <Accel_IO_Read>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	743b      	strb	r3, [r7, #16]
	buffer[5] = Accel_IO_Read(0x32,LSM303DLHC_OUT_Z_H_A);
 8000a6c:	212d      	movs	r1, #45	; 0x2d
 8000a6e:	2032      	movs	r0, #50	; 0x32
 8000a70:	f7ff ffa2 	bl	80009b8 <Accel_IO_Read>
 8000a74:	4603      	mov	r3, r0
 8000a76:	747b      	strb	r3, [r7, #17]
	
	if(!(ctrlx[0]&LSM303DLHC_BLE_MSB))
 8000a78:	7d3b      	ldrb	r3, [r7, #20]
 8000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d125      	bne.n	8000ace <Accel_GetXYZ+0xca>
	{
		for(i=0;i<3;i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	77fb      	strb	r3, [r7, #31]
 8000a86:	e01e      	b.n	8000ac6 <Accel_GetXYZ+0xc2>
		{
			pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1]<<8)+buffer[2*i]);
 8000a88:	7ffb      	ldrb	r3, [r7, #31]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	f107 0220 	add.w	r2, r7, #32
 8000a92:	4413      	add	r3, r2
 8000a94:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	f107 0120 	add.w	r1, r7, #32
 8000aa4:	440b      	add	r3, r1
 8000aa6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4413      	add	r3, r2
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	7ffb      	ldrb	r3, [r7, #31]
 8000ab2:	b212      	sxth	r2, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	f107 0120 	add.w	r1, r7, #32
 8000aba:	440b      	add	r3, r1
 8000abc:	f823 2c08 	strh.w	r2, [r3, #-8]
		for(i=0;i<3;i++)
 8000ac0:	7ffb      	ldrb	r3, [r7, #31]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	77fb      	strb	r3, [r7, #31]
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d9dd      	bls.n	8000a88 <Accel_GetXYZ+0x84>
 8000acc:	e024      	b.n	8000b18 <Accel_GetXYZ+0x114>
		}
	}
	else
	{
		for(i=0;i<3;i++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	77fb      	strb	r3, [r7, #31]
 8000ad2:	e01e      	b.n	8000b12 <Accel_GetXYZ+0x10e>
		{
			pnRawData[i]=((int16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]);
 8000ad4:	7ffb      	ldrb	r3, [r7, #31]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	f107 0220 	add.w	r2, r7, #32
 8000adc:	4413      	add	r3, r2
 8000ade:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	7ffb      	ldrb	r3, [r7, #31]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	3301      	adds	r3, #1
 8000aec:	f107 0120 	add.w	r1, r7, #32
 8000af0:	440b      	add	r3, r1
 8000af2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	b212      	sxth	r2, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	f107 0120 	add.w	r1, r7, #32
 8000b06:	440b      	add	r3, r1
 8000b08:	f823 2c08 	strh.w	r2, [r3, #-8]
		for(i=0;i<3;i++)
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	77fb      	strb	r3, [r7, #31]
 8000b12:	7ffb      	ldrb	r3, [r7, #31]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d9dd      	bls.n	8000ad4 <Accel_GetXYZ+0xd0>
		}
	}
	
	switch(ctrlx[0]&LSM303DLHC_FULLSCALE_16G)
 8000b18:	7d3b      	ldrb	r3, [r7, #20]
 8000b1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b1e:	2b30      	cmp	r3, #48	; 0x30
 8000b20:	d013      	beq.n	8000b4a <Accel_GetXYZ+0x146>
 8000b22:	2b30      	cmp	r3, #48	; 0x30
 8000b24:	dc14      	bgt.n	8000b50 <Accel_GetXYZ+0x14c>
 8000b26:	2b20      	cmp	r3, #32
 8000b28:	d00c      	beq.n	8000b44 <Accel_GetXYZ+0x140>
 8000b2a:	2b20      	cmp	r3, #32
 8000b2c:	dc10      	bgt.n	8000b50 <Accel_GetXYZ+0x14c>
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <Accel_GetXYZ+0x134>
 8000b32:	2b10      	cmp	r3, #16
 8000b34:	d003      	beq.n	8000b3e <Accel_GetXYZ+0x13a>
 8000b36:	e00b      	b.n	8000b50 <Accel_GetXYZ+0x14c>
	{
		case LSM303DLHC_FULLSCALE_2G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	77bb      	strb	r3, [r7, #30]
			break;
 8000b3c:	e008      	b.n	8000b50 <Accel_GetXYZ+0x14c>
		case LSM303DLHC_FULLSCALE_4G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	77bb      	strb	r3, [r7, #30]
			break;
 8000b42:	e005      	b.n	8000b50 <Accel_GetXYZ+0x14c>
		case LSM303DLHC_FULLSCALE_8G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000b44:	2304      	movs	r3, #4
 8000b46:	77bb      	strb	r3, [r7, #30]
			break;
 8000b48:	e002      	b.n	8000b50 <Accel_GetXYZ+0x14c>
		case LSM303DLHC_FULLSCALE_16G:
			sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	77bb      	strb	r3, [r7, #30]
			break;
 8000b4e:	bf00      	nop
	}
	
	for(i=0;i<3;i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	77fb      	strb	r3, [r7, #31]
 8000b54:	e015      	b.n	8000b82 <Accel_GetXYZ+0x17e>
	{
		pData[i]=(pnRawData[i]*sensitivity);
 8000b56:	7ffb      	ldrb	r3, [r7, #31]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	f107 0220 	add.w	r2, r7, #32
 8000b5e:	4413      	add	r3, r2
 8000b60:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	7fbb      	ldrb	r3, [r7, #30]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	fb12 f303 	smulbb	r3, r2, r3
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	7ffb      	ldrb	r3, [r7, #31]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	b20a      	sxth	r2, r1
 8000b7a:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000b7c:	7ffb      	ldrb	r3, [r7, #31]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	77fb      	strb	r3, [r7, #31]
 8000b82:	7ffb      	ldrb	r3, [r7, #31]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d9e6      	bls.n	8000b56 <Accel_GetXYZ+0x152>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <Mag_GetXYZ>:
//--------------------------------------------
void Mag_GetXYZ(int16_t* pData)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	uint8_t i=0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
	
	buffer[0] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_X_H_M);
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	203c      	movs	r0, #60	; 0x3c
 8000ba2:	f7ff ff09 	bl	80009b8 <Accel_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	723b      	strb	r3, [r7, #8]
	buffer[1] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_X_L_M);
 8000baa:	2104      	movs	r1, #4
 8000bac:	203c      	movs	r0, #60	; 0x3c
 8000bae:	f7ff ff03 	bl	80009b8 <Accel_IO_Read>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	727b      	strb	r3, [r7, #9]
	buffer[2] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Y_H_M);
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	203c      	movs	r0, #60	; 0x3c
 8000bba:	f7ff fefd 	bl	80009b8 <Accel_IO_Read>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	72bb      	strb	r3, [r7, #10]
	buffer[3] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Y_L_M);
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	203c      	movs	r0, #60	; 0x3c
 8000bc6:	f7ff fef7 	bl	80009b8 <Accel_IO_Read>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	72fb      	strb	r3, [r7, #11]
	buffer[4] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Z_H_M);
 8000bce:	2105      	movs	r1, #5
 8000bd0:	203c      	movs	r0, #60	; 0x3c
 8000bd2:	f7ff fef1 	bl	80009b8 <Accel_IO_Read>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	733b      	strb	r3, [r7, #12]
	buffer[5] = Accel_IO_Read(MAG_I2C_ADDRESS,LSM303DLHC_OUT_Z_L_M);
 8000bda:	2106      	movs	r1, #6
 8000bdc:	203c      	movs	r0, #60	; 0x3c
 8000bde:	f7ff feeb 	bl	80009b8 <Accel_IO_Read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	737b      	strb	r3, [r7, #13]
	
	for(i=0;i<3;i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e026      	b.n	8000c3a <Mag_GetXYZ+0xa8>
	{
		if(pData[i]!=-4096) pData[i]=((uint16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]);
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf8:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000bfc:	d01a      	beq.n	8000c34 <Mag_GetXYZ+0xa2>
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	f107 0210 	add.w	r2, r7, #16
 8000c06:	4413      	add	r3, r2
 8000c08:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	3301      	adds	r3, #1
 8000c18:	f107 0110 	add.w	r1, r7, #16
 8000c1c:	440b      	add	r3, r1
 8000c1e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	b299      	uxth	r1, r3
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b20a      	sxth	r2, r1
 8000c32:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	3301      	adds	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d9d5      	bls.n	8000bec <Mag_GetXYZ+0x5a>
	}
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <Accel_ReadID>:
//--------------------------------------------
uint8_t Accel_ReadID(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8000c50:	2300      	movs	r3, #0
 8000c52:	71fb      	strb	r3, [r7, #7]
	ctrl = Accel_IO_Read(0x32,0x0F);
 8000c54:	210f      	movs	r1, #15
 8000c56:	2032      	movs	r0, #50	; 0x32
 8000c58:	f7ff feae 	bl	80009b8 <Accel_IO_Read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
	return ctrl;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <AccelMag_Read>:
//--------------------------------------------
#include <stdbool.h>
_Bool wave_detected = false;
static int16_t massiv[500]={0};
void AccelMag_Read(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0a0      	sub	sp, #128	; 0x80
 8000c70:	af00      	add	r7, sp, #0
	int16_t buffer[3] = {0};
 8000c72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	809a      	strh	r2, [r3, #4]
	int16_t bufferAcess[3]={0};
 8000c7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	809a      	strh	r2, [r3, #4]
	static int16_t val[3], tmp16;
	Accel_GetXYZ(bufferAcess);
 8000c86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff feba 	bl	8000a04 <Accel_GetXYZ>
	Mag_GetXYZ(buffer);
 8000c90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff7c 	bl	8000b92 <Mag_GetXYZ>
	tmp16=buffer[0]; if(tmp16!=-4096) val[0]=tmp16+64;
 8000c9a:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8000c9e:	4b5c      	ldr	r3, [pc, #368]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000ca0:	801a      	strh	r2, [r3, #0]
 8000ca2:	4b5b      	ldr	r3, [pc, #364]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca8:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000cac:	d008      	beq.n	8000cc0 <AccelMag_Read+0x54>
 8000cae:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3340      	adds	r3, #64	; 0x40
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	4b55      	ldr	r3, [pc, #340]	; (8000e14 <AccelMag_Read+0x1a8>)
 8000cbe:	801a      	strh	r2, [r3, #0]
	tmp16=buffer[1]; if(tmp16!=-4096) val[1]=tmp16+174;
 8000cc0:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 8000cc4:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000cc6:	801a      	strh	r2, [r3, #0]
 8000cc8:	4b51      	ldr	r3, [pc, #324]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cce:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000cd2:	d008      	beq.n	8000ce6 <AccelMag_Read+0x7a>
 8000cd4:	4b4e      	ldr	r3, [pc, #312]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	33ae      	adds	r3, #174	; 0xae
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <AccelMag_Read+0x1a8>)
 8000ce4:	805a      	strh	r2, [r3, #2]
	tmp16=buffer[2]; if(tmp16!=-4096) val[2]=tmp16+1204;
 8000ce6:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8000cea:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000cec:	801a      	strh	r2, [r3, #0]
 8000cee:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf4:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000cf8:	d009      	beq.n	8000d0e <AccelMag_Read+0xa2>
 8000cfa:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <AccelMag_Read+0x1a4>)
 8000cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <AccelMag_Read+0x1a8>)
 8000d0c:	809a      	strh	r2, [r3, #4]
	//������� ������ ����������� ��������
	MovingAverage(val);
 8000d0e:	4841      	ldr	r0, [pc, #260]	; (8000e14 <AccelMag_Read+0x1a8>)
 8000d10:	f7ff fc32 	bl	8000578 <MovingAverage>
//	sprintf(str1,"Mag X:%06d Y:%06d Z:%06d\r\n", val[0], val[1], val[2]);
//	sprintf(str2,"Acell X:%06d Y:%06d Z:%06d\r\n", bufferAcess[0], bufferAcess[1], bufferAcess[2]);
//	HAL_UART_Transmit(&huart4, (uint8_t*)str2,strlen(str2),0x1000);
	static int16_t number=0;
	massiv[number]=bufferAcess[1];
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <AccelMag_Read+0x1ac>)
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	; 0x6a
 8000d20:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <AccelMag_Read+0x1b0>)
 8000d22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (number<499)
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <AccelMag_Read+0x1ac>)
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8000d30:	dc09      	bgt.n	8000d46 <AccelMag_Read+0xda>
		number=number+1;
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <AccelMag_Read+0x1ac>)
 8000d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <AccelMag_Read+0x1ac>)
 8000d42:	801a      	strh	r2, [r3, #0]
 8000d44:	e002      	b.n	8000d4c <AccelMag_Read+0xe0>
	else
		number=0;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <AccelMag_Read+0x1ac>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	801a      	strh	r2, [r3, #0]

	uint16_t k=0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	for (int numbercell=0; numbercell<500; numbercell=numbercell+1){
 8000d52:	2300      	movs	r3, #0
 8000d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d56:	e021      	b.n	8000d9c <AccelMag_Read+0x130>
		if (massiv[numbercell] < 14000 | massiv[numbercell] > 18000)
 8000d58:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <AccelMag_Read+0x1b0>)
 8000d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d5c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d60:	f243 62af 	movw	r2, #13999	; 0x36af
 8000d64:	4293      	cmp	r3, r2
 8000d66:	bfd4      	ite	le
 8000d68:	2301      	movle	r3, #1
 8000d6a:	2300      	movgt	r3, #0
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	492b      	ldr	r1, [pc, #172]	; (8000e1c <AccelMag_Read+0x1b0>)
 8000d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d72:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000d76:	f244 6150 	movw	r1, #18000	; 0x4650
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	bfcc      	ite	gt
 8000d7e:	2301      	movgt	r3, #1
 8000d80:	2300      	movle	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <AccelMag_Read+0x12a>
			k=k+1;
 8000d8c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000d90:	3301      	adds	r3, #1
 8000d92:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	for (int numbercell=0; numbercell<500; numbercell=numbercell+1){
 8000d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d98:	3301      	adds	r3, #1
 8000d9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000da2:	dbd9      	blt.n	8000d58 <AccelMag_Read+0xec>
	}

	char answer_str[100] = {0};
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2260      	movs	r2, #96	; 0x60
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 f953 	bl	800405c <memset>
	if (k>25){
 8000db6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000dba:	2b19      	cmp	r3, #25
 8000dbc:	d90a      	bls.n	8000dd4 <AccelMag_Read+0x168>
		wave_detected = true;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <AccelMag_Read+0x1b4>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
		sprintf(answer_str, "Wave detected [DEBUG] k = %d\r\n", k);
 8000dc4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4916      	ldr	r1, [pc, #88]	; (8000e24 <AccelMag_Read+0x1b8>)
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 f94d 	bl	800406c <siprintf>
 8000dd2:	e009      	b.n	8000de8 <AccelMag_Read+0x17c>
	}
	else{
		wave_detected = false;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <AccelMag_Read+0x1b4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		sprintf(answer_str, "Wave not detected [DEBUG] k = %d\r\n", k);
 8000dda:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4911      	ldr	r1, [pc, #68]	; (8000e28 <AccelMag_Read+0x1bc>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f942 	bl	800406c <siprintf>
	}

	HAL_UART_Transmit(&huart4, (uint8_t*)answer_str, strlen(answer_str),1000);
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9f0 	bl	80001d0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	1d39      	adds	r1, r7, #4
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <AccelMag_Read+0x1c0>)
 8000dfc:	f002 fe2d 	bl	8003a5a <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e04:	f000 fbfe 	bl	8001604 <HAL_Delay>
}
 8000e08:	bf00      	nop
 8000e0a:	3780      	adds	r7, #128	; 0x80
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200004a8 	.word	0x200004a8
 8000e14:	200004ac 	.word	0x200004ac
 8000e18:	200004b2 	.word	0x200004b2
 8000e1c:	200000c0 	.word	0x200000c0
 8000e20:	200000bc 	.word	0x200000bc
 8000e24:	080048c4 	.word	0x080048c4
 8000e28:	080048e4 	.word	0x080048e4
 8000e2c:	20000534 	.word	0x20000534

08000e30 <AccInit>:
//--------------------------------------------
void AccInit(uint16_t InitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]

	memset(massiv, 56, 500 * 2);
 8000e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3e:	2138      	movs	r1, #56	; 0x38
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <AccInit+0x44>)
 8000e42:	f003 f90b 	bl	800405c <memset>
	uint8_t ctrl = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
	ctrl = (uint8_t) InitStruct;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32,LSM303DLHC_CTRL_REG1_A,ctrl);
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	461a      	mov	r2, r3
 8000e52:	2120      	movs	r1, #32
 8000e54:	2032      	movs	r0, #50	; 0x32
 8000e56:	f7ff fdc2 	bl	80009de <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<8);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32,LSM303DLHC_CTRL_REG4_A,ctrl);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	461a      	mov	r2, r3
 8000e62:	2123      	movs	r1, #35	; 0x23
 8000e64:	2032      	movs	r0, #50	; 0x32
 8000e66:	f7ff fdba 	bl	80009de <Accel_IO_Write>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000c0 	.word	0x200000c0

08000e78 <MagInit>:
//--------------------------------------------
void MagInit(uint32_t InitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
	ctrl = (uint8_t) InitStruct;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_CRA_REG_M,ctrl);
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	203c      	movs	r0, #60	; 0x3c
 8000e90:	f7ff fda5 	bl	80009de <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<8);
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_CRB_REG_M,ctrl);
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	203c      	movs	r0, #60	; 0x3c
 8000ea0:	f7ff fd9d 	bl	80009de <Accel_IO_Write>
	ctrl = (uint8_t)(InitStruct<<16);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(MAG_I2C_ADDRESS,LSM303DLHC_MR_REG_M,ctrl);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2102      	movs	r1, #2
 8000eae:	203c      	movs	r0, #60	; 0x3c
 8000eb0:	f7ff fd95 	bl	80009de <Accel_IO_Write>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <Accel_AccFilter>:
//--------------------------------------------
void Accel_AccFilter(uint16_t FilterStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	uint8_t tmpreg;
	tmpreg = Accel_IO_Read(0x32,LSM303DLHC_CTRL_REG2_A);
 8000ec6:	2121      	movs	r1, #33	; 0x21
 8000ec8:	2032      	movs	r0, #50	; 0x32
 8000eca:	f7ff fd75 	bl	80009b8 <Accel_IO_Read>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
	tmpreg &= 0x0C;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	73fb      	strb	r3, [r7, #15]
	tmpreg |= FilterStruct;
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32,LSM303DLHC_CTRL_REG2_A,tmpreg);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	2121      	movs	r1, #33	; 0x21
 8000eea:	2032      	movs	r0, #50	; 0x32
 8000eec:	f7ff fd77 	bl	80009de <Accel_IO_Write>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <AccelMag_Ini>:
//--------------------------------------------
void AccelMag_Ini(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	uint16_t ctrl = 0x0000;
 8000efe:	2300      	movs	r3, #0
 8000f00:	80fb      	strh	r3, [r7, #6]
	uint32_t ctrl32 = 0x00000000;
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
	avg_cnt=0;//������� ����������
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <AccelMag_Ini+0x80>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8000f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f10:	f000 fb78 	bl	8001604 <HAL_Delay>
	if(Accel_ReadID()==0x33) LD6_ON;
 8000f14:	f7ff fe99 	bl	8000c4a <Accel_ReadID>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b33      	cmp	r3, #51	; 0x33
 8000f1c:	d105      	bne.n	8000f2a <AccelMag_Ini+0x32>
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f24:	4815      	ldr	r0, [pc, #84]	; (8000f7c <AccelMag_Ini+0x84>)
 8000f26:	f001 f929 	bl	800217c <HAL_GPIO_WritePin>
//	else Error();
	ctrl|=(LSM303DLHC_NORMAL_MODE|LSM303DLHC_ODR_50_HZ|LSM303DLHC_AXES_ENABLE);
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000f30:	80fb      	strh	r3, [r7, #6]
	ctrl|=((LSM303DLHC_BlockUpdate_Continous|LSM303DLHC_BLE_LSB|LSM303DLHC_HR_ENABLE)<<8);
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f38:	80fb      	strh	r3, [r7, #6]
	AccInit(ctrl);
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff77 	bl	8000e30 <AccInit>
	ctrl=(uint8_t)(LSM303DLHC_HPM_NORMAL_MODE|LSM303DLHC_HPFCF_16|\
 8000f42:	2390      	movs	r3, #144	; 0x90
 8000f44:	80fb      	strh	r3, [r7, #6]
								 LSM303DLHC_HPF_AOI1_DISABLE|LSM303DLHC_HPF_AOI2_DISABLE);
	Accel_AccFilter(ctrl);
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffb7 	bl	8000ebc <Accel_AccFilter>
	ctrl32|=(LSM303DLHC_TEMPSENSOR_DISABLE|LSM303DLHC_ODR_220_HZ);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f043 031c 	orr.w	r3, r3, #28
 8000f54:	603b      	str	r3, [r7, #0]
	ctrl32|=LSM303DLHC_FS_4_0_GA<<8;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5c:	603b      	str	r3, [r7, #0]
	ctrl32|=LSM303DLHC_CONTINUOS_CONVERSION<<16;
	MagInit(ctrl32);
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff ff8a 	bl	8000e78 <MagInit>
	LD7_ON;
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <AccelMag_Ini+0x84>)
 8000f6c:	f001 f906 	bl	800217c <HAL_GPIO_WritePin>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200004c0 	.word	0x200004c0
 8000f7c:	40021000 	.word	0x40021000

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f84:	f000 facc 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f88:	f000 f80e 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8c:	f000 f8ee 	bl	800116c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f90:	f000 f8cc 	bl	800112c <MX_DMA_Init>
  MX_UART4_Init();
 8000f94:	f000 f8a0 	bl	80010d8 <MX_UART4_Init>
  MX_I2C1_Init();
 8000f98:	f000 f870 	bl	800107c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  AccelMag_Ini();
 8000f9c:	f7ff ffac 	bl	8000ef8 <AccelMag_Ini>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AccelMag_Read();
 8000fa0:	f7ff fe64 	bl	8000c6c <AccelMag_Read>
  {
 8000fa4:	e7fc      	b.n	8000fa0 <main+0x20>
	...

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 f850 	bl	800405c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001018:	2308      	movs	r3, #8
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800101c:	23a8      	movs	r3, #168	; 0xa8
 800101e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f002 f87f 	bl	8003130 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001038:	f000 f8dc 	bl	80011f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001048:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2105      	movs	r1, #5
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fae0 	bl	8003620 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001066:	f000 f8c5 	bl	80011f4 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	; 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_I2C1_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_I2C1_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_I2C1_Init+0x50>)
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x58>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_I2C1_Init+0x50>)
 800109a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_I2C1_Init+0x50>)
 80010ba:	f001 f879 	bl	80021b0 <HAL_I2C_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 f896 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200004e0 	.word	0x200004e0
 80010d0:	40005400 	.word	0x40005400
 80010d4:	000186a0 	.word	0x000186a0

080010d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_UART4_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <MX_UART4_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_UART4_Init+0x4c>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_UART4_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_UART4_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_UART4_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_UART4_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_UART4_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_UART4_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_UART4_Init+0x4c>)
 8001110:	f002 fc56 	bl	80039c0 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800111a:	f000 f86b 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000534 	.word	0x20000534
 8001128:	40004c00 	.word	0x40004c00

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_DMA_Init+0x3c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <MX_DMA_Init+0x3c>)
 800113c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_DMA_Init+0x3c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	200f      	movs	r0, #15
 8001154:	f000 fb55 	bl	8001802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001158:	200f      	movs	r0, #15
 800115a:	f000 fb6e 	bl	800183a <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_GPIO_Init+0x84>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <MX_GPIO_Init+0x84>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_GPIO_Init+0x84>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_GPIO_Init+0x84>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <MX_GPIO_Init+0x84>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <HAL_MspInit+0x4c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_MspInit+0x4c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_I2C_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128e:	23c0      	movs	r3, #192	; 0xc0
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001292:	2312      	movs	r3, #18
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800129e:	2304      	movs	r3, #4
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <HAL_I2C_MspInit+0x8c>)
 80012aa:	f000 fdcb 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 80012b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40005400 	.word	0x40005400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020400 	.word	0x40020400

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <HAL_UART_MspInit+0xe0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d159      	bne.n	80013b6 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_UART_MspInit+0xe4>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <HAL_UART_MspInit+0xe4>)
 800130c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <HAL_UART_MspInit+0xe4>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_UART_MspInit+0xe4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_UART_MspInit+0xe4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_UART_MspInit+0xe4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133a:	2303      	movs	r3, #3
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800134a:	2308      	movs	r3, #8
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <HAL_UART_MspInit+0xe8>)
 8001356:	f000 fd75 	bl	8001e44 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_UART_MspInit+0xec>)
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_UART_MspInit+0xf0>)
 800135e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001366:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_UART_MspInit+0xec>)
 800136a:	2240      	movs	r2, #64	; 0x40
 800136c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_UART_MspInit+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_UART_MspInit+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <HAL_UART_MspInit+0xec>)
 800139c:	f000 fa68 	bl	8001870 <HAL_DMA_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80013a6:	f7ff ff25 	bl	80011f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_UART_MspInit+0xec>)
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_UART_MspInit+0xec>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004c00 	.word	0x40004c00
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	20000578 	.word	0x20000578
 80013d0:	40026070 	.word	0x40026070

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f8d0 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <DMA1_Stream4_IRQHandler+0x10>)
 800142e:	f000 facd 	bl	80019cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000578 	.word	0x20000578

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f002 fdbe 	bl	8003fec <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20020000 	.word	0x20020000
 800149c:	00000400 	.word	0x00000400
 80014a0:	200004b4 	.word	0x200004b4
 80014a4:	200005f0 	.word	0x200005f0

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e8:	4c0b      	ldr	r4, [pc, #44]	; (8001518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ffd7 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f002 fd7d 	bl	8003ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fd3f 	bl	8000f80 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001510:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 8001514:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001518:	200005ec 	.word	0x200005ec

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_Init+0x40>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_Init+0x40>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x40>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f94f 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	200f      	movs	r0, #15
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fe54 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f967 	bl	8001856 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f92f 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	200005d8 	.word	0x200005d8

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200005d8 	.word	0x200005d8

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffde 	bl	80015ec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4907      	ldr	r1, [pc, #28]	; (80016e8 <__NVIC_EnableIRQ+0x38>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff8e 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff29 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff3e 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff8e 	bl	8001740 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5d 	bl	80016ec <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff31 	bl	80016b0 <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffa2 	bl	80017a8 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff feb6 	bl	80015ec <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e099      	b.n	80019c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ac:	e00f      	b.n	80018ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ae:	f7ff fe9d 	bl	80015ec <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d908      	bls.n	80018ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e078      	b.n	80019c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e8      	bne.n	80018ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_DMA_Init+0x158>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2b04      	cmp	r3, #4
 8001926:	d107      	bne.n	8001938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4313      	orrs	r3, r2
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f023 0307 	bic.w	r3, r3, #7
 800194e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	2b04      	cmp	r3, #4
 8001960:	d117      	bne.n	8001992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00e      	beq.n	8001992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f9e9 	bl	8001d4c <DMA_CheckFifoParam>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2240      	movs	r2, #64	; 0x40
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800198e:	2301      	movs	r3, #1
 8001990:	e016      	b.n	80019c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f9a0 	bl	8001ce0 <DMA_CalcBaseAndBitshift>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	223f      	movs	r2, #63	; 0x3f
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	f010803f 	.word	0xf010803f

080019cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019d8:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_DMA_IRQHandler+0x258>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a92      	ldr	r2, [pc, #584]	; (8001c28 <HAL_DMA_IRQHandler+0x25c>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0a9b      	lsrs	r3, r3, #10
 80019e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2208      	movs	r2, #8
 80019f8:	409a      	lsls	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01a      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0204 	bic.w	r2, r2, #4
 8001a1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2208      	movs	r2, #8
 8001a26:	409a      	lsls	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d012      	beq.n	8001a6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f043 0202 	orr.w	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	2204      	movs	r2, #4
 8001a74:	409a      	lsls	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d012      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2204      	movs	r2, #4
 8001a92:	409a      	lsls	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	f043 0204 	orr.w	r2, r3, #4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d043      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03c      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d018      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d108      	bne.n	8001afc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d024      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
 8001afa:	e01f      	b.n	8001b3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01b      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
 8001b0c:	e016      	b.n	8001b3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0208 	bic.w	r2, r2, #8
 8001b2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	2220      	movs	r2, #32
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 808e 	beq.w	8001c6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8086 	beq.w	8001c6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	2220      	movs	r2, #32
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d136      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0216 	bic.w	r2, r2, #22
 8001b84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d103      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x1da>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0208 	bic.w	r2, r2, #8
 8001bb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	223f      	movs	r2, #63	; 0x3f
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d07d      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
        }
        return;
 8001be2:	e078      	b.n	8001cd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01c      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d108      	bne.n	8001c12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d030      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
 8001c10:	e02b      	b.n	8001c6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d027      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
 8001c22:	e022      	b.n	8001c6a <HAL_DMA_IRQHandler+0x29e>
 8001c24:	20000000 	.word	0x20000000
 8001c28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0210 	bic.w	r2, r2, #16
 8001c48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d032      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d022      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2205      	movs	r2, #5
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d307      	bcc.n	8001cb2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f2      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x2ca>
 8001cb0:	e000      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cb2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
 8001cd4:	e000      	b.n	8001cd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cd6:	bf00      	nop
    }
  }
}
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop

08001ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3b10      	subs	r3, #16
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <DMA_CalcBaseAndBitshift+0x64>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <DMA_CalcBaseAndBitshift+0x68>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d909      	bls.n	8001d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d16:	f023 0303 	bic.w	r3, r3, #3
 8001d1a:	1d1a      	adds	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d20:	e007      	b.n	8001d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	aaaaaaab 	.word	0xaaaaaaab
 8001d48:	08004920 	.word	0x08004920

08001d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d11f      	bne.n	8001da6 <DMA_CheckFifoParam+0x5a>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d856      	bhi.n	8001e1a <DMA_CheckFifoParam+0xce>
 8001d6c:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <DMA_CheckFifoParam+0x28>)
 8001d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d72:	bf00      	nop
 8001d74:	08001d85 	.word	0x08001d85
 8001d78:	08001d97 	.word	0x08001d97
 8001d7c:	08001d85 	.word	0x08001d85
 8001d80:	08001e1b 	.word	0x08001e1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d046      	beq.n	8001e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d94:	e043      	b.n	8001e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d9e:	d140      	bne.n	8001e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da4:	e03d      	b.n	8001e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dae:	d121      	bne.n	8001df4 <DMA_CheckFifoParam+0xa8>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d837      	bhi.n	8001e26 <DMA_CheckFifoParam+0xda>
 8001db6:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <DMA_CheckFifoParam+0x70>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001dcd 	.word	0x08001dcd
 8001dc0:	08001dd3 	.word	0x08001dd3
 8001dc4:	08001dcd 	.word	0x08001dcd
 8001dc8:	08001de5 	.word	0x08001de5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd0:	e030      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d025      	beq.n	8001e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de2:	e022      	b.n	8001e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dec:	d11f      	bne.n	8001e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001df2:	e01c      	b.n	8001e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d903      	bls.n	8001e02 <DMA_CheckFifoParam+0xb6>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d003      	beq.n	8001e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e00:	e018      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
      break;
 8001e06:	e015      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      break;
 8001e18:	e00b      	b.n	8001e32 <DMA_CheckFifoParam+0xe6>
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e00a      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e008      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e22:	bf00      	nop
 8001e24:	e006      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e004      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e002      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e32:	bf00      	nop
    }
  } 
  
  return status; 
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e16b      	b.n	8002138 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 815a 	bne.w	8002132 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d005      	beq.n	8001e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d130      	bne.n	8001ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 0201 	and.w	r2, r3, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d017      	beq.n	8001f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d123      	bne.n	8001f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80b4 	beq.w	8002132 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b60      	ldr	r3, [pc, #384]	; (8002150 <HAL_GPIO_Init+0x30c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a5f      	ldr	r2, [pc, #380]	; (8002150 <HAL_GPIO_Init+0x30c>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b5d      	ldr	r3, [pc, #372]	; (8002150 <HAL_GPIO_Init+0x30c>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a5b      	ldr	r2, [pc, #364]	; (8002154 <HAL_GPIO_Init+0x310>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a52      	ldr	r2, [pc, #328]	; (8002158 <HAL_GPIO_Init+0x314>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <HAL_GPIO_Init+0x226>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a51      	ldr	r2, [pc, #324]	; (800215c <HAL_GPIO_Init+0x318>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x222>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a50      	ldr	r2, [pc, #320]	; (8002160 <HAL_GPIO_Init+0x31c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x21e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4f      	ldr	r2, [pc, #316]	; (8002164 <HAL_GPIO_Init+0x320>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x21a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_GPIO_Init+0x324>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x216>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4d      	ldr	r2, [pc, #308]	; (800216c <HAL_GPIO_Init+0x328>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x212>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x32c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_GPIO_Init+0x330>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x20a>
 800204a:	2307      	movs	r3, #7
 800204c:	e00e      	b.n	800206c <HAL_GPIO_Init+0x228>
 800204e:	2308      	movs	r3, #8
 8002050:	e00c      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002052:	2306      	movs	r3, #6
 8002054:	e00a      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002056:	2305      	movs	r3, #5
 8002058:	e008      	b.n	800206c <HAL_GPIO_Init+0x228>
 800205a:	2304      	movs	r3, #4
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x228>
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x228>
 800206a:	2300      	movs	r3, #0
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	f002 0203 	and.w	r2, r2, #3
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	4093      	lsls	r3, r2
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800207c:	4935      	ldr	r1, [pc, #212]	; (8002154 <HAL_GPIO_Init+0x310>)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_GPIO_Init+0x334>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ae:	4a32      	ldr	r2, [pc, #200]	; (8002178 <HAL_GPIO_Init+0x334>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b4:	4b30      	ldr	r3, [pc, #192]	; (8002178 <HAL_GPIO_Init+0x334>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <HAL_GPIO_Init+0x334>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_GPIO_Init+0x334>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_GPIO_Init+0x334>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_GPIO_Init+0x334>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_GPIO_Init+0x334>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b0f      	cmp	r3, #15
 800213c:	f67f ae90 	bls.w	8001e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40013800 	.word	0x40013800
 8002158:	40020000 	.word	0x40020000
 800215c:	40020400 	.word	0x40020400
 8002160:	40020800 	.word	0x40020800
 8002164:	40020c00 	.word	0x40020c00
 8002168:	40021000 	.word	0x40021000
 800216c:	40021400 	.word	0x40021400
 8002170:	40021800 	.word	0x40021800
 8002174:	40021c00 	.word	0x40021c00
 8002178:	40013c00 	.word	0x40013c00

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002198:	e003      	b.n	80021a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e12b      	b.n	800241a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff f83a 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	; 0x24
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002214:	f001 fbac 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8002218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a81      	ldr	r2, [pc, #516]	; (8002424 <HAL_I2C_Init+0x274>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d807      	bhi.n	8002234 <HAL_I2C_Init+0x84>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a80      	ldr	r2, [pc, #512]	; (8002428 <HAL_I2C_Init+0x278>)
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e006      	b.n	8002242 <HAL_I2C_Init+0x92>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4a7d      	ldr	r2, [pc, #500]	; (800242c <HAL_I2C_Init+0x27c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	bf94      	ite	ls
 800223c:	2301      	movls	r3, #1
 800223e:	2300      	movhi	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0e7      	b.n	800241a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a78      	ldr	r2, [pc, #480]	; (8002430 <HAL_I2C_Init+0x280>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_I2C_Init+0x274>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d802      	bhi.n	8002284 <HAL_I2C_Init+0xd4>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3301      	adds	r3, #1
 8002282:	e009      	b.n	8002298 <HAL_I2C_Init+0xe8>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	4a69      	ldr	r2, [pc, #420]	; (8002434 <HAL_I2C_Init+0x284>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	3301      	adds	r3, #1
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	495c      	ldr	r1, [pc, #368]	; (8002424 <HAL_I2C_Init+0x274>)
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d819      	bhi.n	80022ec <HAL_I2C_Init+0x13c>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e59      	subs	r1, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c6:	1c59      	adds	r1, r3, #1
 80022c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022cc:	400b      	ands	r3, r1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_I2C_Init+0x138>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e59      	subs	r1, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e6:	e051      	b.n	800238c <HAL_I2C_Init+0x1dc>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e04f      	b.n	800238c <HAL_I2C_Init+0x1dc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d111      	bne.n	8002318 <HAL_I2C_Init+0x168>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e012      	b.n	800233e <HAL_I2C_Init+0x18e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x196>
 8002342:	2301      	movs	r3, #1
 8002344:	e022      	b.n	800238c <HAL_I2C_Init+0x1dc>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10e      	bne.n	800236c <HAL_I2C_Init+0x1bc>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e58      	subs	r0, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	440b      	add	r3, r1
 800235c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236a:	e00f      	b.n	800238c <HAL_I2C_Init+0x1dc>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6809      	ldr	r1, [r1, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6911      	ldr	r1, [r2, #16]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	000186a0 	.word	0x000186a0
 8002428:	001e847f 	.word	0x001e847f
 800242c:	003d08ff 	.word	0x003d08ff
 8002430:	431bde83 	.word	0x431bde83
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	817b      	strh	r3, [r7, #10]
 800244a:	460b      	mov	r3, r1
 800244c:	813b      	strh	r3, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002452:	f7ff f8cb 	bl	80015ec <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b20      	cmp	r3, #32
 8002462:	f040 80d9 	bne.w	8002618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2319      	movs	r3, #25
 800246c:	2201      	movs	r2, #1
 800246e:	496d      	ldr	r1, [pc, #436]	; (8002624 <HAL_I2C_Mem_Write+0x1ec>)
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fc7f 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
 800247e:	e0cc      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_I2C_Mem_Write+0x56>
 800248a:	2302      	movs	r3, #2
 800248c:	e0c5      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d007      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2221      	movs	r2, #33	; 0x21
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2240      	movs	r2, #64	; 0x40
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_I2C_Mem_Write+0x1f0>)
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f6:	88f8      	ldrh	r0, [r7, #6]
 80024f8:	893a      	ldrh	r2, [r7, #8]
 80024fa:	8979      	ldrh	r1, [r7, #10]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	4603      	mov	r3, r0
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fab6 	bl	8002a78 <I2C_RequestMemoryWrite>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d052      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e081      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fd00 	bl	8002f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b04      	cmp	r3, #4
 800252c:	d107      	bne.n	800253e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06b      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d11b      	bne.n	80025b8 <HAL_I2C_Mem_Write+0x180>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1aa      	bne.n	8002516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fcec 	bl	8002fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d107      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e016      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	00100002 	.word	0x00100002
 8002628:	ffff0000 	.word	0xffff0000

0800262c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7fe ffd1 	bl	80015ec <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 8208 	bne.w	8002a6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	497b      	ldr	r1, [pc, #492]	; (8002850 <HAL_I2C_Mem_Read+0x224>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb85 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e1fb      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Read+0x56>
 800267e:	2302      	movs	r3, #2
 8002680:	e1f4      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2222      	movs	r2, #34	; 0x22
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a5b      	ldr	r2, [pc, #364]	; (8002854 <HAL_I2C_Mem_Read+0x228>)
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa52 	bl	8002ba4 <I2C_RequestMemoryRead>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1b0      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e184      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d11b      	bne.n	800277a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e164      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	2b02      	cmp	r3, #2
 8002780:	d11b      	bne.n	80027ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	e144      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027d0:	e138      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	f200 80f1 	bhi.w	80029be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d123      	bne.n	800282c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fc1b 	bl	8003024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e139      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800282a:	e10b      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	2b02      	cmp	r3, #2
 8002832:	d14e      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	2200      	movs	r2, #0
 800283c:	4906      	ldr	r1, [pc, #24]	; (8002858 <HAL_I2C_Mem_Read+0x22c>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fa98 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e10e      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 800284e:	bf00      	nop
 8002850:	00100002 	.word	0x00100002
 8002854:	ffff0000 	.word	0xffff0000
 8002858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d0:	e0b8      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	4966      	ldr	r1, [pc, #408]	; (8002a74 <HAL_I2C_Mem_Read+0x448>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa49 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0bf      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	494f      	ldr	r1, [pc, #316]	; (8002a74 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fa1b 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e091      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029bc:	e042      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fb2e 	bl	8003024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e04c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d118      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f aec2 	bne.w	80027d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010004 	.word	0x00010004

08002a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f960 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac8:	d103      	bne.n	8002ad2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e05f      	b.n	8002b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	492d      	ldr	r1, [pc, #180]	; (8002ba0 <I2C_RequestMemoryWrite+0x128>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f998 	bl	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04c      	b.n	8002b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fa02 	bl	8002f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d107      	bne.n	8002b3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e02b      	b.n	8002b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b44:	893b      	ldrh	r3, [r7, #8]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]
 8002b4e:	e021      	b.n	8002b94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	6a39      	ldr	r1, [r7, #32]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f9dc 	bl	8002f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d107      	bne.n	8002b86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e005      	b.n	8002b96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	00010002 	.word	0x00010002

08002ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	817b      	strh	r3, [r7, #10]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	813b      	strh	r3, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f8c2 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c04:	d103      	bne.n	8002c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0aa      	b.n	8002d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	6a3a      	ldr	r2, [r7, #32]
 8002c26:	4952      	ldr	r1, [pc, #328]	; (8002d70 <I2C_RequestMemoryRead+0x1cc>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f8fa 	bl	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e097      	b.n	8002d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	6a39      	ldr	r1, [r7, #32]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f964 	bl	8002f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d107      	bne.n	8002c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e076      	b.n	8002d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c80:	893b      	ldrh	r3, [r7, #8]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	611a      	str	r2, [r3, #16]
 8002c8a:	e021      	b.n	8002cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c8c:	893b      	ldrh	r3, [r7, #8]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f93e 	bl	8002f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d107      	bne.n	8002cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e050      	b.n	8002d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc6:	893b      	ldrh	r3, [r7, #8]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f923 	bl	8002f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d107      	bne.n	8002cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e035      	b.n	8002d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f82b 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d32:	d103      	bne.n	8002d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e013      	b.n	8002d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d40:	897b      	ldrh	r3, [r7, #10]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	6a3a      	ldr	r2, [r7, #32]
 8002d54:	4906      	ldr	r1, [pc, #24]	; (8002d70 <I2C_RequestMemoryRead+0x1cc>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f863 	bl	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	00010002 	.word	0x00010002

08002d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d84:	e025      	b.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d021      	beq.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7fe fc2d 	bl	80015ec <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e023      	b.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d10d      	bne.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	e00c      	b.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d0b6      	beq.n	8002d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e30:	e051      	b.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d123      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f043 0204 	orr.w	r2, r3, #4
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e046      	b.n	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d021      	beq.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7fe fbab 	bl	80015ec <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d116      	bne.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f043 0220 	orr.w	r2, r3, #32
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e020      	b.n	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10c      	bne.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e00b      	b.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d18d      	bne.n	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2c:	e02d      	b.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f8ce 	bl	80030d0 <I2C_IsAcknowledgeFailed>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e02d      	b.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d021      	beq.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7fe fb51 	bl	80015ec <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d116      	bne.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d1ca      	bne.n	8002f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fae:	e02d      	b.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f88d 	bl	80030d0 <I2C_IsAcknowledgeFailed>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e02d      	b.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d021      	beq.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7fe fb10 	bl	80015ec <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d116      	bne.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d1ca      	bne.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003030:	e042      	b.n	80030b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d119      	bne.n	8003074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0210 	mvn.w	r2, #16
 8003048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e029      	b.n	80030c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003074:	f7fe faba 	bl	80015ec <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	d302      	bcc.n	800308a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e007      	b.n	80030c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d1b5      	bne.n	8003032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e6:	d11b      	bne.n	8003120 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e264      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d075      	beq.n	800323a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314e:	4ba3      	ldr	r3, [pc, #652]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d00c      	beq.n	8003174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315a:	4ba0      	ldr	r3, [pc, #640]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003162:	2b08      	cmp	r3, #8
 8003164:	d112      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b9d      	ldr	r3, [pc, #628]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003172:	d10b      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	4b99      	ldr	r3, [pc, #612]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d05b      	beq.n	8003238 <HAL_RCC_OscConfig+0x108>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d157      	bne.n	8003238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e23f      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_OscConfig+0x74>
 8003196:	4b91      	ldr	r3, [pc, #580]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a90      	ldr	r2, [pc, #576]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x98>
 80031ae:	4b8b      	ldr	r3, [pc, #556]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a8a      	ldr	r2, [pc, #552]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a87      	ldr	r2, [pc, #540]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031c8:	4b84      	ldr	r3, [pc, #528]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a83      	ldr	r2, [pc, #524]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a80      	ldr	r2, [pc, #512]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fa00 	bl	80015ec <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe f9fc 	bl	80015ec <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e204      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xc0>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe f9ec 	bl	80015ec <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe f9e8 	bl	80015ec <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1f0      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0xe8>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003252:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1c4      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b56      	ldr	r3, [pc, #344]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4952      	ldr	r1, [pc, #328]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b4f      	ldr	r3, [pc, #316]	; (80033e0 <HAL_RCC_OscConfig+0x2b0>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe f9a1 	bl	80015ec <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe f99d 	bl	80015ec <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1a5      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4940      	ldr	r1, [pc, #256]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_OscConfig+0x2b0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe f980 	bl	80015ec <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fe f97c 	bl	80015ec <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e184      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d030      	beq.n	800337c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <HAL_RCC_OscConfig+0x2b4>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fe f960 	bl	80015ec <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe f95c 	bl	80015ec <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e164      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x200>
 800334e:	e015      	b.n	800337c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RCC_OscConfig+0x2b4>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fe f949 	bl	80015ec <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335e:	f7fe f945 	bl	80015ec <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e14d      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a0 	beq.w	80034ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a0e      	ldr	r2, [pc, #56]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_OscConfig+0x2b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d121      	bne.n	800340a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_RCC_OscConfig+0x2b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_RCC_OscConfig+0x2b8>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fe f90b 	bl	80015ec <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	e011      	b.n	80033fe <HAL_RCC_OscConfig+0x2ce>
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	42470000 	.word	0x42470000
 80033e4:	42470e80 	.word	0x42470e80
 80033e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fe f8fe 	bl	80015ec <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e106      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b85      	ldr	r3, [pc, #532]	; (8003614 <HAL_RCC_OscConfig+0x4e4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x2f0>
 8003412:	4b81      	ldr	r3, [pc, #516]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a80      	ldr	r2, [pc, #512]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	e01c      	b.n	800345a <HAL_RCC_OscConfig+0x32a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b05      	cmp	r3, #5
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_OscConfig+0x312>
 8003428:	4b7b      	ldr	r3, [pc, #492]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a7a      	ldr	r2, [pc, #488]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	4b78      	ldr	r3, [pc, #480]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a77      	ldr	r2, [pc, #476]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	e00b      	b.n	800345a <HAL_RCC_OscConfig+0x32a>
 8003442:	4b75      	ldr	r3, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a74      	ldr	r2, [pc, #464]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	4a71      	ldr	r2, [pc, #452]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d015      	beq.n	800348e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fe f8c3 	bl	80015ec <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe f8bf 	bl	80015ec <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e0c5      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003480:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ee      	beq.n	800346a <HAL_RCC_OscConfig+0x33a>
 800348c:	e014      	b.n	80034b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348e:	f7fe f8ad 	bl	80015ec <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fe f8a9 	bl	80015ec <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0af      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ac:	4b5a      	ldr	r3, [pc, #360]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ee      	bne.n	8003496 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d105      	bne.n	80034ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b56      	ldr	r3, [pc, #344]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a55      	ldr	r2, [pc, #340]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 809b 	beq.w	800360a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d05c      	beq.n	800359a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d141      	bne.n	800356c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	4b4c      	ldr	r3, [pc, #304]	; (800361c <HAL_RCC_OscConfig+0x4ec>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe f87d 	bl	80015ec <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fe f879 	bl	80015ec <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e081      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003508:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f0      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	3b01      	subs	r3, #1
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	4937      	ldr	r1, [pc, #220]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <HAL_RCC_OscConfig+0x4ec>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe f852 	bl	80015ec <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe f84e 	bl	80015ec <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e056      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x41c>
 800356a:	e04e      	b.n	800360a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCC_OscConfig+0x4ec>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe f83b 	bl	80015ec <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe f837 	bl	80015ec <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e03f      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x44a>
 8003598:	e037      	b.n	800360a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e032      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d028      	beq.n	8003606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d121      	bne.n	8003606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d11a      	bne.n	8003606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d6:	4013      	ands	r3, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035de:	4293      	cmp	r3, r2
 80035e0:	d111      	bne.n	8003606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	3b01      	subs	r3, #1
 80035f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40007000 	.word	0x40007000
 8003618:	40023800 	.word	0x40023800
 800361c:	42470060 	.word	0x42470060

08003620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0cc      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003634:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d90c      	bls.n	800365c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0b8      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003674:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800367e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800368c:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003698:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	494d      	ldr	r1, [pc, #308]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d044      	beq.n	8003740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d119      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d003      	beq.n	80036de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ee:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e067      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4934      	ldr	r1, [pc, #208]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003710:	f7fd ff6c 	bl	80015ec <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd ff68 	bl	80015ec <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e04f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 020c 	and.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	429a      	cmp	r2, r3
 800373e:	d1eb      	bne.n	8003718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d20c      	bcs.n	8003768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e032      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4916      	ldr	r1, [pc, #88]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	490e      	ldr	r1, [pc, #56]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037a6:	f000 f821 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	490a      	ldr	r1, [pc, #40]	; (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	5ccb      	ldrb	r3, [r1, r3]
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fecc 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023c00 	.word	0x40023c00
 80037dc:	40023800 	.word	0x40023800
 80037e0:	08004908 	.word	0x08004908
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000004 	.word	0x20000004

080037ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ec:	b5b0      	push	{r4, r5, r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f2:	2100      	movs	r1, #0
 80037f4:	6079      	str	r1, [r7, #4]
 80037f6:	2100      	movs	r1, #0
 80037f8:	60f9      	str	r1, [r7, #12]
 80037fa:	2100      	movs	r1, #0
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037fe:	2100      	movs	r1, #0
 8003800:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003802:	4952      	ldr	r1, [pc, #328]	; (800394c <HAL_RCC_GetSysClockFreq+0x160>)
 8003804:	6889      	ldr	r1, [r1, #8]
 8003806:	f001 010c 	and.w	r1, r1, #12
 800380a:	2908      	cmp	r1, #8
 800380c:	d00d      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x3e>
 800380e:	2908      	cmp	r1, #8
 8003810:	f200 8094 	bhi.w	800393c <HAL_RCC_GetSysClockFreq+0x150>
 8003814:	2900      	cmp	r1, #0
 8003816:	d002      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x32>
 8003818:	2904      	cmp	r1, #4
 800381a:	d003      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x38>
 800381c:	e08e      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800381e:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCC_GetSysClockFreq+0x164>)
 8003820:	60bb      	str	r3, [r7, #8]
       break;
 8003822:	e08e      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003824:	4b4b      	ldr	r3, [pc, #300]	; (8003954 <HAL_RCC_GetSysClockFreq+0x168>)
 8003826:	60bb      	str	r3, [r7, #8]
      break;
 8003828:	e08b      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800382a:	4948      	ldr	r1, [pc, #288]	; (800394c <HAL_RCC_GetSysClockFreq+0x160>)
 800382c:	6849      	ldr	r1, [r1, #4]
 800382e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003832:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003834:	4945      	ldr	r1, [pc, #276]	; (800394c <HAL_RCC_GetSysClockFreq+0x160>)
 8003836:	6849      	ldr	r1, [r1, #4]
 8003838:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800383c:	2900      	cmp	r1, #0
 800383e:	d024      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003840:	4942      	ldr	r1, [pc, #264]	; (800394c <HAL_RCC_GetSysClockFreq+0x160>)
 8003842:	6849      	ldr	r1, [r1, #4]
 8003844:	0989      	lsrs	r1, r1, #6
 8003846:	4608      	mov	r0, r1
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003850:	f04f 0500 	mov.w	r5, #0
 8003854:	ea00 0204 	and.w	r2, r0, r4
 8003858:	ea01 0305 	and.w	r3, r1, r5
 800385c:	493d      	ldr	r1, [pc, #244]	; (8003954 <HAL_RCC_GetSysClockFreq+0x168>)
 800385e:	fb01 f003 	mul.w	r0, r1, r3
 8003862:	2100      	movs	r1, #0
 8003864:	fb01 f102 	mul.w	r1, r1, r2
 8003868:	1844      	adds	r4, r0, r1
 800386a:	493a      	ldr	r1, [pc, #232]	; (8003954 <HAL_RCC_GetSysClockFreq+0x168>)
 800386c:	fba2 0101 	umull	r0, r1, r2, r1
 8003870:	1863      	adds	r3, r4, r1
 8003872:	4619      	mov	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	461a      	mov	r2, r3
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	f7fc fd00 	bl	8000280 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e04a      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCC_GetSysClockFreq+0x160>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	461a      	mov	r2, r3
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	f240 10ff 	movw	r0, #511	; 0x1ff
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	ea02 0400 	and.w	r4, r2, r0
 80038a2:	ea03 0501 	and.w	r5, r3, r1
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	014b      	lsls	r3, r1, #5
 80038b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038b8:	0142      	lsls	r2, r0, #5
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	1b00      	subs	r0, r0, r4
 80038c0:	eb61 0105 	sbc.w	r1, r1, r5
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	018b      	lsls	r3, r1, #6
 80038ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038d2:	0182      	lsls	r2, r0, #6
 80038d4:	1a12      	subs	r2, r2, r0
 80038d6:	eb63 0301 	sbc.w	r3, r3, r1
 80038da:	f04f 0000 	mov.w	r0, #0
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	00d9      	lsls	r1, r3, #3
 80038e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038e8:	00d0      	lsls	r0, r2, #3
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	1912      	adds	r2, r2, r4
 80038f0:	eb45 0303 	adc.w	r3, r5, r3
 80038f4:	f04f 0000 	mov.w	r0, #0
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	0299      	lsls	r1, r3, #10
 80038fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003902:	0290      	lsls	r0, r2, #10
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	461a      	mov	r2, r3
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	f7fc fcb4 	bl	8000280 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_RCC_GetSysClockFreq+0x160>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	3301      	adds	r3, #1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	60bb      	str	r3, [r7, #8]
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_RCC_GetSysClockFreq+0x164>)
 800393e:	60bb      	str	r3, [r7, #8]
      break;
 8003940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003942:	68bb      	ldr	r3, [r7, #8]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bdb0      	pop	{r4, r5, r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400
 8003954:	017d7840 	.word	0x017d7840

08003958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000000 	.word	0x20000000

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08004918 	.word	0x08004918

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800399c:	f7ff ffdc 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0b5b      	lsrs	r3, r3, #13
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08004918 	.word	0x08004918

080039c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e03f      	b.n	8003a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fc7a 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f929 	bl	8003c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08a      	sub	sp, #40	; 0x28
 8003a5e:	af02      	add	r7, sp, #8
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d17c      	bne.n	8003b74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_UART_Transmit+0x2c>
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e075      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Transmit+0x3e>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e06e      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2221      	movs	r2, #33	; 0x21
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aae:	f7fd fd9d 	bl	80015ec <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d108      	bne.n	8003adc <HAL_UART_Transmit+0x82>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e003      	b.n	8003ae4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003aec:	e02a      	b.n	8003b44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f840 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e036      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3302      	adds	r3, #2
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e007      	b.n	8003b36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	3301      	adds	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1cf      	bne.n	8003aee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2140      	movs	r1, #64	; 0x40
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f810 	bl	8003b7e <UART_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e006      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b090      	sub	sp, #64	; 0x40
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8e:	e050      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d04c      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	f7fd fd25 	bl	80015ec <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d241      	bcs.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bce:	637a      	str	r2, [r7, #52]	; 0x34
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c02:	623a      	str	r2, [r7, #32]
 8003c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	69f9      	ldr	r1, [r7, #28]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e00f      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d09f      	beq.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3740      	adds	r7, #64	; 0x40
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	b09f      	sub	sp, #124	; 0x7c
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	68d9      	ldr	r1, [r3, #12]
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	ea40 0301 	orr.w	r3, r0, r1
 8003c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca0:	f021 010c 	bic.w	r1, r1, #12
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003caa:	430b      	orrs	r3, r1
 8003cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cba:	6999      	ldr	r1, [r3, #24]
 8003cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	ea40 0301 	orr.w	r3, r0, r1
 8003cc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4bc5      	ldr	r3, [pc, #788]	; (8003fe0 <UART_SetConfig+0x384>)
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d004      	beq.n	8003cda <UART_SetConfig+0x7e>
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4bc3      	ldr	r3, [pc, #780]	; (8003fe4 <UART_SetConfig+0x388>)
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d103      	bne.n	8003ce2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cda:	f7ff fe5d 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8003cde:	6778      	str	r0, [r7, #116]	; 0x74
 8003ce0:	e002      	b.n	8003ce8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ce2:	f7ff fe45 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8003ce6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf0:	f040 80b6 	bne.w	8003e60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	f04f 0500 	mov.w	r5, #0
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	462b      	mov	r3, r5
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	6439      	str	r1, [r7, #64]	; 0x40
 8003d04:	415b      	adcs	r3, r3
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
 8003d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d0c:	1912      	adds	r2, r2, r4
 8003d0e:	eb45 0303 	adc.w	r3, r5, r3
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	00d9      	lsls	r1, r3, #3
 8003d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d20:	00d0      	lsls	r0, r2, #3
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	1911      	adds	r1, r2, r4
 8003d28:	6639      	str	r1, [r7, #96]	; 0x60
 8003d2a:	416b      	adcs	r3, r5
 8003d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d48:	f7fc fa9a 	bl	8000280 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4ba5      	ldr	r3, [pc, #660]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003d52:	fba3 2302 	umull	r2, r3, r3, r2
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	011e      	lsls	r6, r3, #4
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5c:	461c      	mov	r4, r3
 8003d5e:	f04f 0500 	mov.w	r5, #0
 8003d62:	4622      	mov	r2, r4
 8003d64:	462b      	mov	r3, r5
 8003d66:	1891      	adds	r1, r2, r2
 8003d68:	6339      	str	r1, [r7, #48]	; 0x30
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d72:	1912      	adds	r2, r2, r4
 8003d74:	eb45 0303 	adc.w	r3, r5, r3
 8003d78:	f04f 0000 	mov.w	r0, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	00d9      	lsls	r1, r3, #3
 8003d82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d86:	00d0      	lsls	r0, r2, #3
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	1911      	adds	r1, r2, r4
 8003d8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d90:	416b      	adcs	r3, r5
 8003d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	1891      	adds	r1, r2, r2
 8003da0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003da2:	415b      	adcs	r3, r3
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003daa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dae:	f7fc fa67 	bl	8000280 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b8c      	ldr	r3, [pc, #560]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a87      	ldr	r2, [pc, #540]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd8:	441e      	add	r6, r3
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	1894      	adds	r4, r2, r2
 8003de8:	623c      	str	r4, [r7, #32]
 8003dea:	415b      	adcs	r3, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df2:	1812      	adds	r2, r2, r0
 8003df4:	eb41 0303 	adc.w	r3, r1, r3
 8003df8:	f04f 0400 	mov.w	r4, #0
 8003dfc:	f04f 0500 	mov.w	r5, #0
 8003e00:	00dd      	lsls	r5, r3, #3
 8003e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e06:	00d4      	lsls	r4, r2, #3
 8003e08:	4622      	mov	r2, r4
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	1814      	adds	r4, r2, r0
 8003e0e:	653c      	str	r4, [r7, #80]	; 0x50
 8003e10:	414b      	adcs	r3, r1
 8003e12:	657b      	str	r3, [r7, #84]	; 0x54
 8003e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	1891      	adds	r1, r2, r2
 8003e20:	61b9      	str	r1, [r7, #24]
 8003e22:	415b      	adcs	r3, r3
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e2e:	f7fc fa27 	bl	8000280 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a67      	ldr	r2, [pc, #412]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4432      	add	r2, r6
 8003e5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e5e:	e0b9      	b.n	8003fd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e62:	461c      	mov	r4, r3
 8003e64:	f04f 0500 	mov.w	r5, #0
 8003e68:	4622      	mov	r2, r4
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	6139      	str	r1, [r7, #16]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e78:	1912      	adds	r2, r2, r4
 8003e7a:	eb45 0303 	adc.w	r3, r5, r3
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	00d9      	lsls	r1, r3, #3
 8003e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e8c:	00d0      	lsls	r0, r2, #3
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	eb12 0804 	adds.w	r8, r2, r4
 8003e96:	eb43 0905 	adc.w	r9, r3, r5
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	008b      	lsls	r3, r1, #2
 8003eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eb2:	0082      	lsls	r2, r0, #2
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	f7fc f9e2 	bl	8000280 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4b49      	ldr	r3, [pc, #292]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	011e      	lsls	r6, r3, #4
 8003eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	1894      	adds	r4, r2, r2
 8003ed8:	60bc      	str	r4, [r7, #8]
 8003eda:	415b      	adcs	r3, r3
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee2:	1812      	adds	r2, r2, r0
 8003ee4:	eb41 0303 	adc.w	r3, r1, r3
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	f04f 0500 	mov.w	r5, #0
 8003ef0:	00dd      	lsls	r5, r3, #3
 8003ef2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ef6:	00d4      	lsls	r4, r2, #3
 8003ef8:	4622      	mov	r2, r4
 8003efa:	462b      	mov	r3, r5
 8003efc:	1814      	adds	r4, r2, r0
 8003efe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f00:	414b      	adcs	r3, r1
 8003f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	008b      	lsls	r3, r1, #2
 8003f18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f1c:	0082      	lsls	r2, r0, #2
 8003f1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f22:	f7fc f9ad 	bl	8000280 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	2164      	movs	r1, #100	; 0x64
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	3332      	adds	r3, #50	; 0x32
 8003f3e:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4a:	441e      	add	r6, r3
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	1894      	adds	r4, r2, r2
 8003f5a:	603c      	str	r4, [r7, #0]
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f64:	1812      	adds	r2, r2, r0
 8003f66:	eb41 0303 	adc.w	r3, r1, r3
 8003f6a:	f04f 0400 	mov.w	r4, #0
 8003f6e:	f04f 0500 	mov.w	r5, #0
 8003f72:	00dd      	lsls	r5, r3, #3
 8003f74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f78:	00d4      	lsls	r4, r2, #3
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	eb12 0a00 	adds.w	sl, r2, r0
 8003f82:	eb43 0b01 	adc.w	fp, r3, r1
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	008b      	lsls	r3, r1, #2
 8003f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f9e:	0082      	lsls	r2, r0, #2
 8003fa0:	4650      	mov	r0, sl
 8003fa2:	4659      	mov	r1, fp
 8003fa4:	f7fc f96c 	bl	8000280 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003fae:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2164      	movs	r1, #100	; 0x64
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <UART_SetConfig+0x38c>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4432      	add	r2, r6
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	377c      	adds	r7, #124	; 0x7c
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fde:	bf00      	nop
 8003fe0:	40011000 	.word	0x40011000
 8003fe4:	40011400 	.word	0x40011400
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <__errno>:
 8003fec:	4b01      	ldr	r3, [pc, #4]	; (8003ff4 <__errno+0x8>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	2000000c 	.word	0x2000000c

08003ff8 <__libc_init_array>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	4d0d      	ldr	r5, [pc, #52]	; (8004030 <__libc_init_array+0x38>)
 8003ffc:	4c0d      	ldr	r4, [pc, #52]	; (8004034 <__libc_init_array+0x3c>)
 8003ffe:	1b64      	subs	r4, r4, r5
 8004000:	10a4      	asrs	r4, r4, #2
 8004002:	2600      	movs	r6, #0
 8004004:	42a6      	cmp	r6, r4
 8004006:	d109      	bne.n	800401c <__libc_init_array+0x24>
 8004008:	4d0b      	ldr	r5, [pc, #44]	; (8004038 <__libc_init_array+0x40>)
 800400a:	4c0c      	ldr	r4, [pc, #48]	; (800403c <__libc_init_array+0x44>)
 800400c:	f000 fc4e 	bl	80048ac <_init>
 8004010:	1b64      	subs	r4, r4, r5
 8004012:	10a4      	asrs	r4, r4, #2
 8004014:	2600      	movs	r6, #0
 8004016:	42a6      	cmp	r6, r4
 8004018:	d105      	bne.n	8004026 <__libc_init_array+0x2e>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004020:	4798      	blx	r3
 8004022:	3601      	adds	r6, #1
 8004024:	e7ee      	b.n	8004004 <__libc_init_array+0xc>
 8004026:	f855 3b04 	ldr.w	r3, [r5], #4
 800402a:	4798      	blx	r3
 800402c:	3601      	adds	r6, #1
 800402e:	e7f2      	b.n	8004016 <__libc_init_array+0x1e>
 8004030:	08004964 	.word	0x08004964
 8004034:	08004964 	.word	0x08004964
 8004038:	08004964 	.word	0x08004964
 800403c:	08004968 	.word	0x08004968

08004040 <memcpy>:
 8004040:	440a      	add	r2, r1
 8004042:	4291      	cmp	r1, r2
 8004044:	f100 33ff 	add.w	r3, r0, #4294967295
 8004048:	d100      	bne.n	800404c <memcpy+0xc>
 800404a:	4770      	bx	lr
 800404c:	b510      	push	{r4, lr}
 800404e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004056:	4291      	cmp	r1, r2
 8004058:	d1f9      	bne.n	800404e <memcpy+0xe>
 800405a:	bd10      	pop	{r4, pc}

0800405c <memset>:
 800405c:	4402      	add	r2, r0
 800405e:	4603      	mov	r3, r0
 8004060:	4293      	cmp	r3, r2
 8004062:	d100      	bne.n	8004066 <memset+0xa>
 8004064:	4770      	bx	lr
 8004066:	f803 1b01 	strb.w	r1, [r3], #1
 800406a:	e7f9      	b.n	8004060 <memset+0x4>

0800406c <siprintf>:
 800406c:	b40e      	push	{r1, r2, r3}
 800406e:	b500      	push	{lr}
 8004070:	b09c      	sub	sp, #112	; 0x70
 8004072:	ab1d      	add	r3, sp, #116	; 0x74
 8004074:	9002      	str	r0, [sp, #8]
 8004076:	9006      	str	r0, [sp, #24]
 8004078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800407c:	4809      	ldr	r0, [pc, #36]	; (80040a4 <siprintf+0x38>)
 800407e:	9107      	str	r1, [sp, #28]
 8004080:	9104      	str	r1, [sp, #16]
 8004082:	4909      	ldr	r1, [pc, #36]	; (80040a8 <siprintf+0x3c>)
 8004084:	f853 2b04 	ldr.w	r2, [r3], #4
 8004088:	9105      	str	r1, [sp, #20]
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	a902      	add	r1, sp, #8
 8004090:	f000 f868 	bl	8004164 <_svfiprintf_r>
 8004094:	9b02      	ldr	r3, [sp, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	b01c      	add	sp, #112	; 0x70
 800409c:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a0:	b003      	add	sp, #12
 80040a2:	4770      	bx	lr
 80040a4:	2000000c 	.word	0x2000000c
 80040a8:	ffff0208 	.word	0xffff0208

080040ac <__ssputs_r>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	688e      	ldr	r6, [r1, #8]
 80040b2:	429e      	cmp	r6, r3
 80040b4:	4682      	mov	sl, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	4690      	mov	r8, r2
 80040ba:	461f      	mov	r7, r3
 80040bc:	d838      	bhi.n	8004130 <__ssputs_r+0x84>
 80040be:	898a      	ldrh	r2, [r1, #12]
 80040c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040c4:	d032      	beq.n	800412c <__ssputs_r+0x80>
 80040c6:	6825      	ldr	r5, [r4, #0]
 80040c8:	6909      	ldr	r1, [r1, #16]
 80040ca:	eba5 0901 	sub.w	r9, r5, r1
 80040ce:	6965      	ldr	r5, [r4, #20]
 80040d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d8:	3301      	adds	r3, #1
 80040da:	444b      	add	r3, r9
 80040dc:	106d      	asrs	r5, r5, #1
 80040de:	429d      	cmp	r5, r3
 80040e0:	bf38      	it	cc
 80040e2:	461d      	movcc	r5, r3
 80040e4:	0553      	lsls	r3, r2, #21
 80040e6:	d531      	bpl.n	800414c <__ssputs_r+0xa0>
 80040e8:	4629      	mov	r1, r5
 80040ea:	f000 fb39 	bl	8004760 <_malloc_r>
 80040ee:	4606      	mov	r6, r0
 80040f0:	b950      	cbnz	r0, 8004108 <__ssputs_r+0x5c>
 80040f2:	230c      	movs	r3, #12
 80040f4:	f8ca 3000 	str.w	r3, [sl]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004108:	6921      	ldr	r1, [r4, #16]
 800410a:	464a      	mov	r2, r9
 800410c:	f7ff ff98 	bl	8004040 <memcpy>
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	6126      	str	r6, [r4, #16]
 800411e:	6165      	str	r5, [r4, #20]
 8004120:	444e      	add	r6, r9
 8004122:	eba5 0509 	sub.w	r5, r5, r9
 8004126:	6026      	str	r6, [r4, #0]
 8004128:	60a5      	str	r5, [r4, #8]
 800412a:	463e      	mov	r6, r7
 800412c:	42be      	cmp	r6, r7
 800412e:	d900      	bls.n	8004132 <__ssputs_r+0x86>
 8004130:	463e      	mov	r6, r7
 8004132:	4632      	mov	r2, r6
 8004134:	6820      	ldr	r0, [r4, #0]
 8004136:	4641      	mov	r1, r8
 8004138:	f000 faa8 	bl	800468c <memmove>
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	1b9b      	subs	r3, r3, r6
 8004142:	4432      	add	r2, r6
 8004144:	60a3      	str	r3, [r4, #8]
 8004146:	6022      	str	r2, [r4, #0]
 8004148:	2000      	movs	r0, #0
 800414a:	e7db      	b.n	8004104 <__ssputs_r+0x58>
 800414c:	462a      	mov	r2, r5
 800414e:	f000 fb61 	bl	8004814 <_realloc_r>
 8004152:	4606      	mov	r6, r0
 8004154:	2800      	cmp	r0, #0
 8004156:	d1e1      	bne.n	800411c <__ssputs_r+0x70>
 8004158:	6921      	ldr	r1, [r4, #16]
 800415a:	4650      	mov	r0, sl
 800415c:	f000 fab0 	bl	80046c0 <_free_r>
 8004160:	e7c7      	b.n	80040f2 <__ssputs_r+0x46>
	...

08004164 <_svfiprintf_r>:
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	4698      	mov	r8, r3
 800416a:	898b      	ldrh	r3, [r1, #12]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	b09d      	sub	sp, #116	; 0x74
 8004170:	4607      	mov	r7, r0
 8004172:	460d      	mov	r5, r1
 8004174:	4614      	mov	r4, r2
 8004176:	d50e      	bpl.n	8004196 <_svfiprintf_r+0x32>
 8004178:	690b      	ldr	r3, [r1, #16]
 800417a:	b963      	cbnz	r3, 8004196 <_svfiprintf_r+0x32>
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	f000 faef 	bl	8004760 <_malloc_r>
 8004182:	6028      	str	r0, [r5, #0]
 8004184:	6128      	str	r0, [r5, #16]
 8004186:	b920      	cbnz	r0, 8004192 <_svfiprintf_r+0x2e>
 8004188:	230c      	movs	r3, #12
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	e0d1      	b.n	8004336 <_svfiprintf_r+0x1d2>
 8004192:	2340      	movs	r3, #64	; 0x40
 8004194:	616b      	str	r3, [r5, #20]
 8004196:	2300      	movs	r3, #0
 8004198:	9309      	str	r3, [sp, #36]	; 0x24
 800419a:	2320      	movs	r3, #32
 800419c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a4:	2330      	movs	r3, #48	; 0x30
 80041a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004350 <_svfiprintf_r+0x1ec>
 80041aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041ae:	f04f 0901 	mov.w	r9, #1
 80041b2:	4623      	mov	r3, r4
 80041b4:	469a      	mov	sl, r3
 80041b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ba:	b10a      	cbz	r2, 80041c0 <_svfiprintf_r+0x5c>
 80041bc:	2a25      	cmp	r2, #37	; 0x25
 80041be:	d1f9      	bne.n	80041b4 <_svfiprintf_r+0x50>
 80041c0:	ebba 0b04 	subs.w	fp, sl, r4
 80041c4:	d00b      	beq.n	80041de <_svfiprintf_r+0x7a>
 80041c6:	465b      	mov	r3, fp
 80041c8:	4622      	mov	r2, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff ff6d 	bl	80040ac <__ssputs_r>
 80041d2:	3001      	adds	r0, #1
 80041d4:	f000 80aa 	beq.w	800432c <_svfiprintf_r+0x1c8>
 80041d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041da:	445a      	add	r2, fp
 80041dc:	9209      	str	r2, [sp, #36]	; 0x24
 80041de:	f89a 3000 	ldrb.w	r3, [sl]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80a2 	beq.w	800432c <_svfiprintf_r+0x1c8>
 80041e8:	2300      	movs	r3, #0
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f2:	f10a 0a01 	add.w	sl, sl, #1
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004200:	4654      	mov	r4, sl
 8004202:	2205      	movs	r2, #5
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	4851      	ldr	r0, [pc, #324]	; (8004350 <_svfiprintf_r+0x1ec>)
 800420a:	f7fb ffe9 	bl	80001e0 <memchr>
 800420e:	9a04      	ldr	r2, [sp, #16]
 8004210:	b9d8      	cbnz	r0, 800424a <_svfiprintf_r+0xe6>
 8004212:	06d0      	lsls	r0, r2, #27
 8004214:	bf44      	itt	mi
 8004216:	2320      	movmi	r3, #32
 8004218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800421c:	0711      	lsls	r1, r2, #28
 800421e:	bf44      	itt	mi
 8004220:	232b      	movmi	r3, #43	; 0x2b
 8004222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b2a      	cmp	r3, #42	; 0x2a
 800422c:	d015      	beq.n	800425a <_svfiprintf_r+0xf6>
 800422e:	9a07      	ldr	r2, [sp, #28]
 8004230:	4654      	mov	r4, sl
 8004232:	2000      	movs	r0, #0
 8004234:	f04f 0c0a 	mov.w	ip, #10
 8004238:	4621      	mov	r1, r4
 800423a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423e:	3b30      	subs	r3, #48	; 0x30
 8004240:	2b09      	cmp	r3, #9
 8004242:	d94e      	bls.n	80042e2 <_svfiprintf_r+0x17e>
 8004244:	b1b0      	cbz	r0, 8004274 <_svfiprintf_r+0x110>
 8004246:	9207      	str	r2, [sp, #28]
 8004248:	e014      	b.n	8004274 <_svfiprintf_r+0x110>
 800424a:	eba0 0308 	sub.w	r3, r0, r8
 800424e:	fa09 f303 	lsl.w	r3, r9, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	46a2      	mov	sl, r4
 8004258:	e7d2      	b.n	8004200 <_svfiprintf_r+0x9c>
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	1d19      	adds	r1, r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	9103      	str	r1, [sp, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbb      	ittet	lt
 8004266:	425b      	neglt	r3, r3
 8004268:	f042 0202 	orrlt.w	r2, r2, #2
 800426c:	9307      	strge	r3, [sp, #28]
 800426e:	9307      	strlt	r3, [sp, #28]
 8004270:	bfb8      	it	lt
 8004272:	9204      	strlt	r2, [sp, #16]
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	2b2e      	cmp	r3, #46	; 0x2e
 8004278:	d10c      	bne.n	8004294 <_svfiprintf_r+0x130>
 800427a:	7863      	ldrb	r3, [r4, #1]
 800427c:	2b2a      	cmp	r3, #42	; 0x2a
 800427e:	d135      	bne.n	80042ec <_svfiprintf_r+0x188>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	9203      	str	r2, [sp, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfb8      	it	lt
 800428c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004290:	3402      	adds	r4, #2
 8004292:	9305      	str	r3, [sp, #20]
 8004294:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004360 <_svfiprintf_r+0x1fc>
 8004298:	7821      	ldrb	r1, [r4, #0]
 800429a:	2203      	movs	r2, #3
 800429c:	4650      	mov	r0, sl
 800429e:	f7fb ff9f 	bl	80001e0 <memchr>
 80042a2:	b140      	cbz	r0, 80042b6 <_svfiprintf_r+0x152>
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	eba0 000a 	sub.w	r0, r0, sl
 80042aa:	fa03 f000 	lsl.w	r0, r3, r0
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	4303      	orrs	r3, r0
 80042b2:	3401      	adds	r4, #1
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ba:	4826      	ldr	r0, [pc, #152]	; (8004354 <_svfiprintf_r+0x1f0>)
 80042bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c0:	2206      	movs	r2, #6
 80042c2:	f7fb ff8d 	bl	80001e0 <memchr>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d038      	beq.n	800433c <_svfiprintf_r+0x1d8>
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <_svfiprintf_r+0x1f4>)
 80042cc:	bb1b      	cbnz	r3, 8004316 <_svfiprintf_r+0x1b2>
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	3307      	adds	r3, #7
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	3308      	adds	r3, #8
 80042d8:	9303      	str	r3, [sp, #12]
 80042da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042dc:	4433      	add	r3, r6
 80042de:	9309      	str	r3, [sp, #36]	; 0x24
 80042e0:	e767      	b.n	80041b2 <_svfiprintf_r+0x4e>
 80042e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80042e6:	460c      	mov	r4, r1
 80042e8:	2001      	movs	r0, #1
 80042ea:	e7a5      	b.n	8004238 <_svfiprintf_r+0xd4>
 80042ec:	2300      	movs	r3, #0
 80042ee:	3401      	adds	r4, #1
 80042f0:	9305      	str	r3, [sp, #20]
 80042f2:	4619      	mov	r1, r3
 80042f4:	f04f 0c0a 	mov.w	ip, #10
 80042f8:	4620      	mov	r0, r4
 80042fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042fe:	3a30      	subs	r2, #48	; 0x30
 8004300:	2a09      	cmp	r2, #9
 8004302:	d903      	bls.n	800430c <_svfiprintf_r+0x1a8>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0c5      	beq.n	8004294 <_svfiprintf_r+0x130>
 8004308:	9105      	str	r1, [sp, #20]
 800430a:	e7c3      	b.n	8004294 <_svfiprintf_r+0x130>
 800430c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004310:	4604      	mov	r4, r0
 8004312:	2301      	movs	r3, #1
 8004314:	e7f0      	b.n	80042f8 <_svfiprintf_r+0x194>
 8004316:	ab03      	add	r3, sp, #12
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	462a      	mov	r2, r5
 800431c:	4b0f      	ldr	r3, [pc, #60]	; (800435c <_svfiprintf_r+0x1f8>)
 800431e:	a904      	add	r1, sp, #16
 8004320:	4638      	mov	r0, r7
 8004322:	f3af 8000 	nop.w
 8004326:	1c42      	adds	r2, r0, #1
 8004328:	4606      	mov	r6, r0
 800432a:	d1d6      	bne.n	80042da <_svfiprintf_r+0x176>
 800432c:	89ab      	ldrh	r3, [r5, #12]
 800432e:	065b      	lsls	r3, r3, #25
 8004330:	f53f af2c 	bmi.w	800418c <_svfiprintf_r+0x28>
 8004334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004336:	b01d      	add	sp, #116	; 0x74
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	ab03      	add	r3, sp, #12
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	462a      	mov	r2, r5
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <_svfiprintf_r+0x1f8>)
 8004344:	a904      	add	r1, sp, #16
 8004346:	4638      	mov	r0, r7
 8004348:	f000 f87a 	bl	8004440 <_printf_i>
 800434c:	e7eb      	b.n	8004326 <_svfiprintf_r+0x1c2>
 800434e:	bf00      	nop
 8004350:	08004928 	.word	0x08004928
 8004354:	08004932 	.word	0x08004932
 8004358:	00000000 	.word	0x00000000
 800435c:	080040ad 	.word	0x080040ad
 8004360:	0800492e 	.word	0x0800492e

08004364 <_printf_common>:
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	4616      	mov	r6, r2
 800436a:	4699      	mov	r9, r3
 800436c:	688a      	ldr	r2, [r1, #8]
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004374:	4293      	cmp	r3, r2
 8004376:	bfb8      	it	lt
 8004378:	4613      	movlt	r3, r2
 800437a:	6033      	str	r3, [r6, #0]
 800437c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004380:	4607      	mov	r7, r0
 8004382:	460c      	mov	r4, r1
 8004384:	b10a      	cbz	r2, 800438a <_printf_common+0x26>
 8004386:	3301      	adds	r3, #1
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	0699      	lsls	r1, r3, #26
 800438e:	bf42      	ittt	mi
 8004390:	6833      	ldrmi	r3, [r6, #0]
 8004392:	3302      	addmi	r3, #2
 8004394:	6033      	strmi	r3, [r6, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	f015 0506 	ands.w	r5, r5, #6
 800439c:	d106      	bne.n	80043ac <_printf_common+0x48>
 800439e:	f104 0a19 	add.w	sl, r4, #25
 80043a2:	68e3      	ldr	r3, [r4, #12]
 80043a4:	6832      	ldr	r2, [r6, #0]
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	dc26      	bgt.n	80043fa <_printf_common+0x96>
 80043ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b0:	1e13      	subs	r3, r2, #0
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	bf18      	it	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	0692      	lsls	r2, r2, #26
 80043ba:	d42b      	bmi.n	8004414 <_printf_common+0xb0>
 80043bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c0:	4649      	mov	r1, r9
 80043c2:	4638      	mov	r0, r7
 80043c4:	47c0      	blx	r8
 80043c6:	3001      	adds	r0, #1
 80043c8:	d01e      	beq.n	8004408 <_printf_common+0xa4>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	68e5      	ldr	r5, [r4, #12]
 80043ce:	6832      	ldr	r2, [r6, #0]
 80043d0:	f003 0306 	and.w	r3, r3, #6
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	bf08      	it	eq
 80043d8:	1aad      	subeq	r5, r5, r2
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	6922      	ldr	r2, [r4, #16]
 80043de:	bf0c      	ite	eq
 80043e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e4:	2500      	movne	r5, #0
 80043e6:	4293      	cmp	r3, r2
 80043e8:	bfc4      	itt	gt
 80043ea:	1a9b      	subgt	r3, r3, r2
 80043ec:	18ed      	addgt	r5, r5, r3
 80043ee:	2600      	movs	r6, #0
 80043f0:	341a      	adds	r4, #26
 80043f2:	42b5      	cmp	r5, r6
 80043f4:	d11a      	bne.n	800442c <_printf_common+0xc8>
 80043f6:	2000      	movs	r0, #0
 80043f8:	e008      	b.n	800440c <_printf_common+0xa8>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4652      	mov	r2, sl
 80043fe:	4649      	mov	r1, r9
 8004400:	4638      	mov	r0, r7
 8004402:	47c0      	blx	r8
 8004404:	3001      	adds	r0, #1
 8004406:	d103      	bne.n	8004410 <_printf_common+0xac>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295
 800440c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004410:	3501      	adds	r5, #1
 8004412:	e7c6      	b.n	80043a2 <_printf_common+0x3e>
 8004414:	18e1      	adds	r1, r4, r3
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	2030      	movs	r0, #48	; 0x30
 800441a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800441e:	4422      	add	r2, r4
 8004420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004428:	3302      	adds	r3, #2
 800442a:	e7c7      	b.n	80043bc <_printf_common+0x58>
 800442c:	2301      	movs	r3, #1
 800442e:	4622      	mov	r2, r4
 8004430:	4649      	mov	r1, r9
 8004432:	4638      	mov	r0, r7
 8004434:	47c0      	blx	r8
 8004436:	3001      	adds	r0, #1
 8004438:	d0e6      	beq.n	8004408 <_printf_common+0xa4>
 800443a:	3601      	adds	r6, #1
 800443c:	e7d9      	b.n	80043f2 <_printf_common+0x8e>
	...

08004440 <_printf_i>:
 8004440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	460c      	mov	r4, r1
 8004446:	4691      	mov	r9, r2
 8004448:	7e27      	ldrb	r7, [r4, #24]
 800444a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800444c:	2f78      	cmp	r7, #120	; 0x78
 800444e:	4680      	mov	r8, r0
 8004450:	469a      	mov	sl, r3
 8004452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004456:	d807      	bhi.n	8004468 <_printf_i+0x28>
 8004458:	2f62      	cmp	r7, #98	; 0x62
 800445a:	d80a      	bhi.n	8004472 <_printf_i+0x32>
 800445c:	2f00      	cmp	r7, #0
 800445e:	f000 80d8 	beq.w	8004612 <_printf_i+0x1d2>
 8004462:	2f58      	cmp	r7, #88	; 0x58
 8004464:	f000 80a3 	beq.w	80045ae <_printf_i+0x16e>
 8004468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800446c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004470:	e03a      	b.n	80044e8 <_printf_i+0xa8>
 8004472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004476:	2b15      	cmp	r3, #21
 8004478:	d8f6      	bhi.n	8004468 <_printf_i+0x28>
 800447a:	a001      	add	r0, pc, #4	; (adr r0, 8004480 <_printf_i+0x40>)
 800447c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044ed 	.word	0x080044ed
 8004488:	08004469 	.word	0x08004469
 800448c:	08004469 	.word	0x08004469
 8004490:	08004469 	.word	0x08004469
 8004494:	08004469 	.word	0x08004469
 8004498:	080044ed 	.word	0x080044ed
 800449c:	08004469 	.word	0x08004469
 80044a0:	08004469 	.word	0x08004469
 80044a4:	08004469 	.word	0x08004469
 80044a8:	08004469 	.word	0x08004469
 80044ac:	080045f9 	.word	0x080045f9
 80044b0:	0800451d 	.word	0x0800451d
 80044b4:	080045db 	.word	0x080045db
 80044b8:	08004469 	.word	0x08004469
 80044bc:	08004469 	.word	0x08004469
 80044c0:	0800461b 	.word	0x0800461b
 80044c4:	08004469 	.word	0x08004469
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004469 	.word	0x08004469
 80044d0:	08004469 	.word	0x08004469
 80044d4:	080045e3 	.word	0x080045e3
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	600a      	str	r2, [r1, #0]
 80044e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0a3      	b.n	8004634 <_printf_i+0x1f4>
 80044ec:	6825      	ldr	r5, [r4, #0]
 80044ee:	6808      	ldr	r0, [r1, #0]
 80044f0:	062e      	lsls	r6, r5, #24
 80044f2:	f100 0304 	add.w	r3, r0, #4
 80044f6:	d50a      	bpl.n	800450e <_printf_i+0xce>
 80044f8:	6805      	ldr	r5, [r0, #0]
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	da03      	bge.n	8004508 <_printf_i+0xc8>
 8004500:	232d      	movs	r3, #45	; 0x2d
 8004502:	426d      	negs	r5, r5
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004508:	485e      	ldr	r0, [pc, #376]	; (8004684 <_printf_i+0x244>)
 800450a:	230a      	movs	r3, #10
 800450c:	e019      	b.n	8004542 <_printf_i+0x102>
 800450e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004512:	6805      	ldr	r5, [r0, #0]
 8004514:	600b      	str	r3, [r1, #0]
 8004516:	bf18      	it	ne
 8004518:	b22d      	sxthne	r5, r5
 800451a:	e7ef      	b.n	80044fc <_printf_i+0xbc>
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	6825      	ldr	r5, [r4, #0]
 8004520:	1d18      	adds	r0, r3, #4
 8004522:	6008      	str	r0, [r1, #0]
 8004524:	0628      	lsls	r0, r5, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0xec>
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	e002      	b.n	8004532 <_printf_i+0xf2>
 800452c:	0669      	lsls	r1, r5, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0xe8>
 8004530:	881d      	ldrh	r5, [r3, #0]
 8004532:	4854      	ldr	r0, [pc, #336]	; (8004684 <_printf_i+0x244>)
 8004534:	2f6f      	cmp	r7, #111	; 0x6f
 8004536:	bf0c      	ite	eq
 8004538:	2308      	moveq	r3, #8
 800453a:	230a      	movne	r3, #10
 800453c:	2100      	movs	r1, #0
 800453e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004542:	6866      	ldr	r6, [r4, #4]
 8004544:	60a6      	str	r6, [r4, #8]
 8004546:	2e00      	cmp	r6, #0
 8004548:	bfa2      	ittt	ge
 800454a:	6821      	ldrge	r1, [r4, #0]
 800454c:	f021 0104 	bicge.w	r1, r1, #4
 8004550:	6021      	strge	r1, [r4, #0]
 8004552:	b90d      	cbnz	r5, 8004558 <_printf_i+0x118>
 8004554:	2e00      	cmp	r6, #0
 8004556:	d04d      	beq.n	80045f4 <_printf_i+0x1b4>
 8004558:	4616      	mov	r6, r2
 800455a:	fbb5 f1f3 	udiv	r1, r5, r3
 800455e:	fb03 5711 	mls	r7, r3, r1, r5
 8004562:	5dc7      	ldrb	r7, [r0, r7]
 8004564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004568:	462f      	mov	r7, r5
 800456a:	42bb      	cmp	r3, r7
 800456c:	460d      	mov	r5, r1
 800456e:	d9f4      	bls.n	800455a <_printf_i+0x11a>
 8004570:	2b08      	cmp	r3, #8
 8004572:	d10b      	bne.n	800458c <_printf_i+0x14c>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	07df      	lsls	r7, r3, #31
 8004578:	d508      	bpl.n	800458c <_printf_i+0x14c>
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6861      	ldr	r1, [r4, #4]
 800457e:	4299      	cmp	r1, r3
 8004580:	bfde      	ittt	le
 8004582:	2330      	movle	r3, #48	; 0x30
 8004584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800458c:	1b92      	subs	r2, r2, r6
 800458e:	6122      	str	r2, [r4, #16]
 8004590:	f8cd a000 	str.w	sl, [sp]
 8004594:	464b      	mov	r3, r9
 8004596:	aa03      	add	r2, sp, #12
 8004598:	4621      	mov	r1, r4
 800459a:	4640      	mov	r0, r8
 800459c:	f7ff fee2 	bl	8004364 <_printf_common>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d14c      	bne.n	800463e <_printf_i+0x1fe>
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	b004      	add	sp, #16
 80045aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ae:	4835      	ldr	r0, [pc, #212]	; (8004684 <_printf_i+0x244>)
 80045b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	680e      	ldr	r6, [r1, #0]
 80045b8:	061f      	lsls	r7, r3, #24
 80045ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80045be:	600e      	str	r6, [r1, #0]
 80045c0:	d514      	bpl.n	80045ec <_printf_i+0x1ac>
 80045c2:	07d9      	lsls	r1, r3, #31
 80045c4:	bf44      	itt	mi
 80045c6:	f043 0320 	orrmi.w	r3, r3, #32
 80045ca:	6023      	strmi	r3, [r4, #0]
 80045cc:	b91d      	cbnz	r5, 80045d6 <_printf_i+0x196>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	f023 0320 	bic.w	r3, r3, #32
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	2310      	movs	r3, #16
 80045d8:	e7b0      	b.n	800453c <_printf_i+0xfc>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	f043 0320 	orr.w	r3, r3, #32
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	2378      	movs	r3, #120	; 0x78
 80045e4:	4828      	ldr	r0, [pc, #160]	; (8004688 <_printf_i+0x248>)
 80045e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ea:	e7e3      	b.n	80045b4 <_printf_i+0x174>
 80045ec:	065e      	lsls	r6, r3, #25
 80045ee:	bf48      	it	mi
 80045f0:	b2ad      	uxthmi	r5, r5
 80045f2:	e7e6      	b.n	80045c2 <_printf_i+0x182>
 80045f4:	4616      	mov	r6, r2
 80045f6:	e7bb      	b.n	8004570 <_printf_i+0x130>
 80045f8:	680b      	ldr	r3, [r1, #0]
 80045fa:	6826      	ldr	r6, [r4, #0]
 80045fc:	6960      	ldr	r0, [r4, #20]
 80045fe:	1d1d      	adds	r5, r3, #4
 8004600:	600d      	str	r5, [r1, #0]
 8004602:	0635      	lsls	r5, r6, #24
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	d501      	bpl.n	800460c <_printf_i+0x1cc>
 8004608:	6018      	str	r0, [r3, #0]
 800460a:	e002      	b.n	8004612 <_printf_i+0x1d2>
 800460c:	0671      	lsls	r1, r6, #25
 800460e:	d5fb      	bpl.n	8004608 <_printf_i+0x1c8>
 8004610:	8018      	strh	r0, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	6123      	str	r3, [r4, #16]
 8004616:	4616      	mov	r6, r2
 8004618:	e7ba      	b.n	8004590 <_printf_i+0x150>
 800461a:	680b      	ldr	r3, [r1, #0]
 800461c:	1d1a      	adds	r2, r3, #4
 800461e:	600a      	str	r2, [r1, #0]
 8004620:	681e      	ldr	r6, [r3, #0]
 8004622:	6862      	ldr	r2, [r4, #4]
 8004624:	2100      	movs	r1, #0
 8004626:	4630      	mov	r0, r6
 8004628:	f7fb fdda 	bl	80001e0 <memchr>
 800462c:	b108      	cbz	r0, 8004632 <_printf_i+0x1f2>
 800462e:	1b80      	subs	r0, r0, r6
 8004630:	6060      	str	r0, [r4, #4]
 8004632:	6863      	ldr	r3, [r4, #4]
 8004634:	6123      	str	r3, [r4, #16]
 8004636:	2300      	movs	r3, #0
 8004638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800463c:	e7a8      	b.n	8004590 <_printf_i+0x150>
 800463e:	6923      	ldr	r3, [r4, #16]
 8004640:	4632      	mov	r2, r6
 8004642:	4649      	mov	r1, r9
 8004644:	4640      	mov	r0, r8
 8004646:	47d0      	blx	sl
 8004648:	3001      	adds	r0, #1
 800464a:	d0ab      	beq.n	80045a4 <_printf_i+0x164>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	079b      	lsls	r3, r3, #30
 8004650:	d413      	bmi.n	800467a <_printf_i+0x23a>
 8004652:	68e0      	ldr	r0, [r4, #12]
 8004654:	9b03      	ldr	r3, [sp, #12]
 8004656:	4298      	cmp	r0, r3
 8004658:	bfb8      	it	lt
 800465a:	4618      	movlt	r0, r3
 800465c:	e7a4      	b.n	80045a8 <_printf_i+0x168>
 800465e:	2301      	movs	r3, #1
 8004660:	4632      	mov	r2, r6
 8004662:	4649      	mov	r1, r9
 8004664:	4640      	mov	r0, r8
 8004666:	47d0      	blx	sl
 8004668:	3001      	adds	r0, #1
 800466a:	d09b      	beq.n	80045a4 <_printf_i+0x164>
 800466c:	3501      	adds	r5, #1
 800466e:	68e3      	ldr	r3, [r4, #12]
 8004670:	9903      	ldr	r1, [sp, #12]
 8004672:	1a5b      	subs	r3, r3, r1
 8004674:	42ab      	cmp	r3, r5
 8004676:	dcf2      	bgt.n	800465e <_printf_i+0x21e>
 8004678:	e7eb      	b.n	8004652 <_printf_i+0x212>
 800467a:	2500      	movs	r5, #0
 800467c:	f104 0619 	add.w	r6, r4, #25
 8004680:	e7f5      	b.n	800466e <_printf_i+0x22e>
 8004682:	bf00      	nop
 8004684:	08004939 	.word	0x08004939
 8004688:	0800494a 	.word	0x0800494a

0800468c <memmove>:
 800468c:	4288      	cmp	r0, r1
 800468e:	b510      	push	{r4, lr}
 8004690:	eb01 0402 	add.w	r4, r1, r2
 8004694:	d902      	bls.n	800469c <memmove+0x10>
 8004696:	4284      	cmp	r4, r0
 8004698:	4623      	mov	r3, r4
 800469a:	d807      	bhi.n	80046ac <memmove+0x20>
 800469c:	1e43      	subs	r3, r0, #1
 800469e:	42a1      	cmp	r1, r4
 80046a0:	d008      	beq.n	80046b4 <memmove+0x28>
 80046a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046aa:	e7f8      	b.n	800469e <memmove+0x12>
 80046ac:	4402      	add	r2, r0
 80046ae:	4601      	mov	r1, r0
 80046b0:	428a      	cmp	r2, r1
 80046b2:	d100      	bne.n	80046b6 <memmove+0x2a>
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046be:	e7f7      	b.n	80046b0 <memmove+0x24>

080046c0 <_free_r>:
 80046c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046c2:	2900      	cmp	r1, #0
 80046c4:	d048      	beq.n	8004758 <_free_r+0x98>
 80046c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ca:	9001      	str	r0, [sp, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f1a1 0404 	sub.w	r4, r1, #4
 80046d2:	bfb8      	it	lt
 80046d4:	18e4      	addlt	r4, r4, r3
 80046d6:	f000 f8d3 	bl	8004880 <__malloc_lock>
 80046da:	4a20      	ldr	r2, [pc, #128]	; (800475c <_free_r+0x9c>)
 80046dc:	9801      	ldr	r0, [sp, #4]
 80046de:	6813      	ldr	r3, [r2, #0]
 80046e0:	4615      	mov	r5, r2
 80046e2:	b933      	cbnz	r3, 80046f2 <_free_r+0x32>
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	6014      	str	r4, [r2, #0]
 80046e8:	b003      	add	sp, #12
 80046ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046ee:	f000 b8cd 	b.w	800488c <__malloc_unlock>
 80046f2:	42a3      	cmp	r3, r4
 80046f4:	d90b      	bls.n	800470e <_free_r+0x4e>
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	1862      	adds	r2, r4, r1
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bf04      	itt	eq
 80046fe:	681a      	ldreq	r2, [r3, #0]
 8004700:	685b      	ldreq	r3, [r3, #4]
 8004702:	6063      	str	r3, [r4, #4]
 8004704:	bf04      	itt	eq
 8004706:	1852      	addeq	r2, r2, r1
 8004708:	6022      	streq	r2, [r4, #0]
 800470a:	602c      	str	r4, [r5, #0]
 800470c:	e7ec      	b.n	80046e8 <_free_r+0x28>
 800470e:	461a      	mov	r2, r3
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b10b      	cbz	r3, 8004718 <_free_r+0x58>
 8004714:	42a3      	cmp	r3, r4
 8004716:	d9fa      	bls.n	800470e <_free_r+0x4e>
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	1855      	adds	r5, r2, r1
 800471c:	42a5      	cmp	r5, r4
 800471e:	d10b      	bne.n	8004738 <_free_r+0x78>
 8004720:	6824      	ldr	r4, [r4, #0]
 8004722:	4421      	add	r1, r4
 8004724:	1854      	adds	r4, r2, r1
 8004726:	42a3      	cmp	r3, r4
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	d1dd      	bne.n	80046e8 <_free_r+0x28>
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6053      	str	r3, [r2, #4]
 8004732:	4421      	add	r1, r4
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	e7d7      	b.n	80046e8 <_free_r+0x28>
 8004738:	d902      	bls.n	8004740 <_free_r+0x80>
 800473a:	230c      	movs	r3, #12
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	e7d3      	b.n	80046e8 <_free_r+0x28>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	1961      	adds	r1, r4, r5
 8004744:	428b      	cmp	r3, r1
 8004746:	bf04      	itt	eq
 8004748:	6819      	ldreq	r1, [r3, #0]
 800474a:	685b      	ldreq	r3, [r3, #4]
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	bf04      	itt	eq
 8004750:	1949      	addeq	r1, r1, r5
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6054      	str	r4, [r2, #4]
 8004756:	e7c7      	b.n	80046e8 <_free_r+0x28>
 8004758:	b003      	add	sp, #12
 800475a:	bd30      	pop	{r4, r5, pc}
 800475c:	200004b8 	.word	0x200004b8

08004760 <_malloc_r>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	1ccd      	adds	r5, r1, #3
 8004764:	f025 0503 	bic.w	r5, r5, #3
 8004768:	3508      	adds	r5, #8
 800476a:	2d0c      	cmp	r5, #12
 800476c:	bf38      	it	cc
 800476e:	250c      	movcc	r5, #12
 8004770:	2d00      	cmp	r5, #0
 8004772:	4606      	mov	r6, r0
 8004774:	db01      	blt.n	800477a <_malloc_r+0x1a>
 8004776:	42a9      	cmp	r1, r5
 8004778:	d903      	bls.n	8004782 <_malloc_r+0x22>
 800477a:	230c      	movs	r3, #12
 800477c:	6033      	str	r3, [r6, #0]
 800477e:	2000      	movs	r0, #0
 8004780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004782:	f000 f87d 	bl	8004880 <__malloc_lock>
 8004786:	4921      	ldr	r1, [pc, #132]	; (800480c <_malloc_r+0xac>)
 8004788:	680a      	ldr	r2, [r1, #0]
 800478a:	4614      	mov	r4, r2
 800478c:	b99c      	cbnz	r4, 80047b6 <_malloc_r+0x56>
 800478e:	4f20      	ldr	r7, [pc, #128]	; (8004810 <_malloc_r+0xb0>)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	b923      	cbnz	r3, 800479e <_malloc_r+0x3e>
 8004794:	4621      	mov	r1, r4
 8004796:	4630      	mov	r0, r6
 8004798:	f000 f862 	bl	8004860 <_sbrk_r>
 800479c:	6038      	str	r0, [r7, #0]
 800479e:	4629      	mov	r1, r5
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 f85d 	bl	8004860 <_sbrk_r>
 80047a6:	1c43      	adds	r3, r0, #1
 80047a8:	d123      	bne.n	80047f2 <_malloc_r+0x92>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	4630      	mov	r0, r6
 80047b0:	f000 f86c 	bl	800488c <__malloc_unlock>
 80047b4:	e7e3      	b.n	800477e <_malloc_r+0x1e>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	1b5b      	subs	r3, r3, r5
 80047ba:	d417      	bmi.n	80047ec <_malloc_r+0x8c>
 80047bc:	2b0b      	cmp	r3, #11
 80047be:	d903      	bls.n	80047c8 <_malloc_r+0x68>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	441c      	add	r4, r3
 80047c4:	6025      	str	r5, [r4, #0]
 80047c6:	e004      	b.n	80047d2 <_malloc_r+0x72>
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	42a2      	cmp	r2, r4
 80047cc:	bf0c      	ite	eq
 80047ce:	600b      	streq	r3, [r1, #0]
 80047d0:	6053      	strne	r3, [r2, #4]
 80047d2:	4630      	mov	r0, r6
 80047d4:	f000 f85a 	bl	800488c <__malloc_unlock>
 80047d8:	f104 000b 	add.w	r0, r4, #11
 80047dc:	1d23      	adds	r3, r4, #4
 80047de:	f020 0007 	bic.w	r0, r0, #7
 80047e2:	1ac2      	subs	r2, r0, r3
 80047e4:	d0cc      	beq.n	8004780 <_malloc_r+0x20>
 80047e6:	1a1b      	subs	r3, r3, r0
 80047e8:	50a3      	str	r3, [r4, r2]
 80047ea:	e7c9      	b.n	8004780 <_malloc_r+0x20>
 80047ec:	4622      	mov	r2, r4
 80047ee:	6864      	ldr	r4, [r4, #4]
 80047f0:	e7cc      	b.n	800478c <_malloc_r+0x2c>
 80047f2:	1cc4      	adds	r4, r0, #3
 80047f4:	f024 0403 	bic.w	r4, r4, #3
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d0e3      	beq.n	80047c4 <_malloc_r+0x64>
 80047fc:	1a21      	subs	r1, r4, r0
 80047fe:	4630      	mov	r0, r6
 8004800:	f000 f82e 	bl	8004860 <_sbrk_r>
 8004804:	3001      	adds	r0, #1
 8004806:	d1dd      	bne.n	80047c4 <_malloc_r+0x64>
 8004808:	e7cf      	b.n	80047aa <_malloc_r+0x4a>
 800480a:	bf00      	nop
 800480c:	200004b8 	.word	0x200004b8
 8004810:	200004bc 	.word	0x200004bc

08004814 <_realloc_r>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	4607      	mov	r7, r0
 8004818:	4614      	mov	r4, r2
 800481a:	460e      	mov	r6, r1
 800481c:	b921      	cbnz	r1, 8004828 <_realloc_r+0x14>
 800481e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004822:	4611      	mov	r1, r2
 8004824:	f7ff bf9c 	b.w	8004760 <_malloc_r>
 8004828:	b922      	cbnz	r2, 8004834 <_realloc_r+0x20>
 800482a:	f7ff ff49 	bl	80046c0 <_free_r>
 800482e:	4625      	mov	r5, r4
 8004830:	4628      	mov	r0, r5
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004834:	f000 f830 	bl	8004898 <_malloc_usable_size_r>
 8004838:	42a0      	cmp	r0, r4
 800483a:	d20f      	bcs.n	800485c <_realloc_r+0x48>
 800483c:	4621      	mov	r1, r4
 800483e:	4638      	mov	r0, r7
 8004840:	f7ff ff8e 	bl	8004760 <_malloc_r>
 8004844:	4605      	mov	r5, r0
 8004846:	2800      	cmp	r0, #0
 8004848:	d0f2      	beq.n	8004830 <_realloc_r+0x1c>
 800484a:	4631      	mov	r1, r6
 800484c:	4622      	mov	r2, r4
 800484e:	f7ff fbf7 	bl	8004040 <memcpy>
 8004852:	4631      	mov	r1, r6
 8004854:	4638      	mov	r0, r7
 8004856:	f7ff ff33 	bl	80046c0 <_free_r>
 800485a:	e7e9      	b.n	8004830 <_realloc_r+0x1c>
 800485c:	4635      	mov	r5, r6
 800485e:	e7e7      	b.n	8004830 <_realloc_r+0x1c>

08004860 <_sbrk_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d06      	ldr	r5, [pc, #24]	; (800487c <_sbrk_r+0x1c>)
 8004864:	2300      	movs	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc fde6 	bl	800143c <_sbrk>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_sbrk_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_sbrk_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	200005dc 	.word	0x200005dc

08004880 <__malloc_lock>:
 8004880:	4801      	ldr	r0, [pc, #4]	; (8004888 <__malloc_lock+0x8>)
 8004882:	f000 b811 	b.w	80048a8 <__retarget_lock_acquire_recursive>
 8004886:	bf00      	nop
 8004888:	200005e4 	.word	0x200005e4

0800488c <__malloc_unlock>:
 800488c:	4801      	ldr	r0, [pc, #4]	; (8004894 <__malloc_unlock+0x8>)
 800488e:	f000 b80c 	b.w	80048aa <__retarget_lock_release_recursive>
 8004892:	bf00      	nop
 8004894:	200005e4 	.word	0x200005e4

08004898 <_malloc_usable_size_r>:
 8004898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800489c:	1f18      	subs	r0, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	bfbc      	itt	lt
 80048a2:	580b      	ldrlt	r3, [r1, r0]
 80048a4:	18c0      	addlt	r0, r0, r3
 80048a6:	4770      	bx	lr

080048a8 <__retarget_lock_acquire_recursive>:
 80048a8:	4770      	bx	lr

080048aa <__retarget_lock_release_recursive>:
 80048aa:	4770      	bx	lr

080048ac <_init>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr

080048b8 <_fini>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr
